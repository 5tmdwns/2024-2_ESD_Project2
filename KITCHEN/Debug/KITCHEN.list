
KITCHEN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093cc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  080094dc  080094dc  0000a4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009818  08009818  0000b064  2**0
                  CONTENTS
  4 .ARM          00000008  08009818  08009818  0000a818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009820  08009820  0000b064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009820  08009820  0000a820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009824  08009824  0000a824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08009828  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d28  20000064  0800988c  0000b064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d8c  0800988c  0000bd8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018951  00000000  00000000  0000b08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000395b  00000000  00000000  000239de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  00027340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001176  00000000  00000000  00028980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab7f  00000000  00000000  00029af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b739  00000000  00000000  00044675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097c3d  00000000  00000000  0005fdae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f79eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006298  00000000  00000000  000f7a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000fdcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	080094c4 	.word	0x080094c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	080094c4 	.word	0x080094c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	@ (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	@ (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	@ 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000080 	.word	0x20000080
 800018c:	20000120 	.word	0x20000120

08000190 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000190:	b480      	push	{r7}
 8000192:	b085      	sub	sp, #20
 8000194:	af00      	add	r7, sp, #0
 8000196:	60f8      	str	r0, [r7, #12]
 8000198:	60b9      	str	r1, [r7, #8]
 800019a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4a07      	ldr	r2, [pc, #28]	@ (80001bc <vApplicationGetTimerTaskMemory+0x2c>)
 80001a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	4a06      	ldr	r2, [pc, #24]	@ (80001c0 <vApplicationGetTimerTaskMemory+0x30>)
 80001a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80001ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001b0:	bf00      	nop
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	20000320 	.word	0x20000320
 80001c0:	200003c0 	.word	0x200003c0

080001c4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b086      	sub	sp, #24
 80001c8:	af02      	add	r7, sp, #8
 80001ca:	4603      	mov	r3, r0
 80001cc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
   uint8_t data_t[4];
   data_u = (cmd&0xf0);
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	f023 030f 	bic.w	r3, r3, #15
 80001d4:	73fb      	strb	r3, [r7, #15]
   data_l = ((cmd<<4)&0xf0);
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	011b      	lsls	r3, r3, #4
 80001da:	73bb      	strb	r3, [r7, #14]
   data_t[0] = data_u|0x0C;  //en=1, rs=0
 80001dc:	7bfb      	ldrb	r3, [r7, #15]
 80001de:	f043 030c 	orr.w	r3, r3, #12
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	723b      	strb	r3, [r7, #8]
   data_t[1] = data_u|0x08;  //en=0, rs=0
 80001e6:	7bfb      	ldrb	r3, [r7, #15]
 80001e8:	f043 0308 	orr.w	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	727b      	strb	r3, [r7, #9]
   data_t[2] = data_l|0x0C;  //en=1, rs=0
 80001f0:	7bbb      	ldrb	r3, [r7, #14]
 80001f2:	f043 030c 	orr.w	r3, r3, #12
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	72bb      	strb	r3, [r7, #10]
   data_t[3] = data_l|0x08;  //en=0, rs=0
 80001fa:	7bbb      	ldrb	r3, [r7, #14]
 80001fc:	f043 0308 	orr.w	r3, r3, #8
 8000200:	b2db      	uxtb	r3, r3
 8000202:	72fb      	strb	r3, [r7, #11]
   HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000204:	f107 0208 	add.w	r2, r7, #8
 8000208:	2364      	movs	r3, #100	@ 0x64
 800020a:	9300      	str	r3, [sp, #0]
 800020c:	2304      	movs	r3, #4
 800020e:	214e      	movs	r1, #78	@ 0x4e
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <lcd_send_cmd+0x5c>)
 8000212:	f003 fa23 	bl	800365c <HAL_I2C_Master_Transmit>
}
 8000216:	bf00      	nop
 8000218:	3710      	adds	r7, #16
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	200007c0 	.word	0x200007c0

08000224 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af02      	add	r7, sp, #8
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
   char data_u, data_l;
   uint8_t data_t[4];
   data_u = (data&0xf0);
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	f023 030f 	bic.w	r3, r3, #15
 8000234:	73fb      	strb	r3, [r7, #15]
   data_l = ((data<<4)&0xf0);
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	011b      	lsls	r3, r3, #4
 800023a:	73bb      	strb	r3, [r7, #14]
   data_t[0] = data_u|0x0D;  //en=1, rs=0
 800023c:	7bfb      	ldrb	r3, [r7, #15]
 800023e:	f043 030d 	orr.w	r3, r3, #13
 8000242:	b2db      	uxtb	r3, r3
 8000244:	723b      	strb	r3, [r7, #8]
   data_t[1] = data_u|0x09;  //en=0, rs=0
 8000246:	7bfb      	ldrb	r3, [r7, #15]
 8000248:	f043 0309 	orr.w	r3, r3, #9
 800024c:	b2db      	uxtb	r3, r3
 800024e:	727b      	strb	r3, [r7, #9]
   data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000250:	7bbb      	ldrb	r3, [r7, #14]
 8000252:	f043 030d 	orr.w	r3, r3, #13
 8000256:	b2db      	uxtb	r3, r3
 8000258:	72bb      	strb	r3, [r7, #10]
   data_t[3] = data_l|0x09;  //en=0, rs=0
 800025a:	7bbb      	ldrb	r3, [r7, #14]
 800025c:	f043 0309 	orr.w	r3, r3, #9
 8000260:	b2db      	uxtb	r3, r3
 8000262:	72fb      	strb	r3, [r7, #11]
   HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000264:	f107 0208 	add.w	r2, r7, #8
 8000268:	2364      	movs	r3, #100	@ 0x64
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2304      	movs	r3, #4
 800026e:	214e      	movs	r1, #78	@ 0x4e
 8000270:	4803      	ldr	r0, [pc, #12]	@ (8000280 <lcd_send_data+0x5c>)
 8000272:	f003 f9f3 	bl	800365c <HAL_I2C_Master_Transmit>
}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	200007c0 	.word	0x200007c0

08000284 <lcd_clear>:

void lcd_clear (void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
   lcd_send_cmd (0x80);
 800028a:	2080      	movs	r0, #128	@ 0x80
 800028c:	f7ff ff9a 	bl	80001c4 <lcd_send_cmd>
   for (int i=0; i<70; i++)
 8000290:	2300      	movs	r3, #0
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	e005      	b.n	80002a2 <lcd_clear+0x1e>
   {
      lcd_send_data (' ');
 8000296:	2020      	movs	r0, #32
 8000298:	f7ff ffc4 	bl	8000224 <lcd_send_data>
   for (int i=0; i<70; i++)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2b45      	cmp	r3, #69	@ 0x45
 80002a6:	ddf6      	ble.n	8000296 <lcd_clear+0x12>
   }
}
 80002a8:	bf00      	nop
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b082      	sub	sp, #8
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	6039      	str	r1, [r7, #0]
    switch (row)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d003      	beq.n	80002ca <lcd_put_cur+0x18>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d005      	beq.n	80002d4 <lcd_put_cur+0x22>
 80002c8:	e009      	b.n	80002de <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002d0:	603b      	str	r3, [r7, #0]
            break;
 80002d2:	e004      	b.n	80002de <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80002da:	603b      	str	r3, [r7, #0]
            break;
 80002dc:	bf00      	nop
    }

    lcd_send_cmd (col);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ff6e 	bl	80001c4 <lcd_send_cmd>
}
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <lcd_init>:


void lcd_init (void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
   // 4 bit initialisation
   HAL_Delay(50);  // wait for >40ms
 80002f4:	2032      	movs	r0, #50	@ 0x32
 80002f6:	f002 fd55 	bl	8002da4 <HAL_Delay>
   lcd_send_cmd (0x30);
 80002fa:	2030      	movs	r0, #48	@ 0x30
 80002fc:	f7ff ff62 	bl	80001c4 <lcd_send_cmd>
   HAL_Delay(5);  // wait for >4.1ms
 8000300:	2005      	movs	r0, #5
 8000302:	f002 fd4f 	bl	8002da4 <HAL_Delay>
   lcd_send_cmd (0x30);
 8000306:	2030      	movs	r0, #48	@ 0x30
 8000308:	f7ff ff5c 	bl	80001c4 <lcd_send_cmd>
   HAL_Delay(1);  // wait for >100us
 800030c:	2001      	movs	r0, #1
 800030e:	f002 fd49 	bl	8002da4 <HAL_Delay>
   lcd_send_cmd (0x30);
 8000312:	2030      	movs	r0, #48	@ 0x30
 8000314:	f7ff ff56 	bl	80001c4 <lcd_send_cmd>
   HAL_Delay(10);
 8000318:	200a      	movs	r0, #10
 800031a:	f002 fd43 	bl	8002da4 <HAL_Delay>
   lcd_send_cmd (0x20);  // 4bit mode
 800031e:	2020      	movs	r0, #32
 8000320:	f7ff ff50 	bl	80001c4 <lcd_send_cmd>
   HAL_Delay(10);
 8000324:	200a      	movs	r0, #10
 8000326:	f002 fd3d 	bl	8002da4 <HAL_Delay>

  // dislay initialisation
   lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800032a:	2028      	movs	r0, #40	@ 0x28
 800032c:	f7ff ff4a 	bl	80001c4 <lcd_send_cmd>
   HAL_Delay(1);
 8000330:	2001      	movs	r0, #1
 8000332:	f002 fd37 	bl	8002da4 <HAL_Delay>
   lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000336:	2008      	movs	r0, #8
 8000338:	f7ff ff44 	bl	80001c4 <lcd_send_cmd>
   HAL_Delay(1);
 800033c:	2001      	movs	r0, #1
 800033e:	f002 fd31 	bl	8002da4 <HAL_Delay>
   lcd_send_cmd (0x01);  // clear display
 8000342:	2001      	movs	r0, #1
 8000344:	f7ff ff3e 	bl	80001c4 <lcd_send_cmd>
   HAL_Delay(1);
 8000348:	2001      	movs	r0, #1
 800034a:	f002 fd2b 	bl	8002da4 <HAL_Delay>
   HAL_Delay(1);
 800034e:	2001      	movs	r0, #1
 8000350:	f002 fd28 	bl	8002da4 <HAL_Delay>
   lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000354:	2006      	movs	r0, #6
 8000356:	f7ff ff35 	bl	80001c4 <lcd_send_cmd>
   HAL_Delay(1);
 800035a:	2001      	movs	r0, #1
 800035c:	f002 fd22 	bl	8002da4 <HAL_Delay>
   lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000360:	200c      	movs	r0, #12
 8000362:	f7ff ff2f 	bl	80001c4 <lcd_send_cmd>
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}

0800036a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	b082      	sub	sp, #8
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
   while (*str) lcd_send_data (*str++);
 8000372:	e006      	b.n	8000382 <lcd_send_string+0x18>
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	607a      	str	r2, [r7, #4]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ff51 	bl	8000224 <lcd_send_data>
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d1f4      	bne.n	8000374 <lcd_send_string+0xa>
}
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800039a:	f002 fcd1 	bl	8002d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039e:	f000 f889 	bl	80004b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a2:	f000 f957 	bl	8000654 <MX_GPIO_Init>
  MX_SPI1_Init();
 80003a6:	f000 f8f9 	bl	800059c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80003aa:	f000 f929 	bl	8000600 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80003ae:	f000 f8c7 	bl	8000540 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80003b2:	f7ff ff9d 	bl	80002f0 <lcd_init>
  dataInit();
 80003b6:	f000 f9c7 	bl	8000748 <dataInit>
  HAL_SPI_Receive_IT(&hspi1, rxBuffer, sizeof(rxBuffer));
 80003ba:	2205      	movs	r2, #5
 80003bc:	4929      	ldr	r1, [pc, #164]	@ (8000464 <main+0xd0>)
 80003be:	482a      	ldr	r0, [pc, #168]	@ (8000468 <main+0xd4>)
 80003c0:	f004 faac 	bl	800491c <HAL_SPI_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  spiSem = xSemaphoreCreateBinary();
 80003c4:	2203      	movs	r2, #3
 80003c6:	2100      	movs	r1, #0
 80003c8:	2001      	movs	r0, #1
 80003ca:	f005 fd94 	bl	8005ef6 <xQueueGenericCreate>
 80003ce:	4603      	mov	r3, r0
 80003d0:	4a26      	ldr	r2, [pc, #152]	@ (800046c <main+0xd8>)
 80003d2:	6013      	str	r3, [r2, #0]
  cookSem = xSemaphoreCreateBinary();
 80003d4:	2203      	movs	r2, #3
 80003d6:	2100      	movs	r1, #0
 80003d8:	2001      	movs	r0, #1
 80003da:	f005 fd8c 	bl	8005ef6 <xQueueGenericCreate>
 80003de:	4603      	mov	r3, r0
 80003e0:	4a23      	ldr	r2, [pc, #140]	@ (8000470 <main+0xdc>)
 80003e2:	6013      	str	r3, [r2, #0]
  lcdSem = xSemaphoreCreateBinary();
 80003e4:	2203      	movs	r2, #3
 80003e6:	2100      	movs	r1, #0
 80003e8:	2001      	movs	r0, #1
 80003ea:	f005 fd84 	bl	8005ef6 <xQueueGenericCreate>
 80003ee:	4603      	mov	r3, r0
 80003f0:	4a20      	ldr	r2, [pc, #128]	@ (8000474 <main+0xe0>)
 80003f2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  userTimerHandler = xTimerCreate("userTimer", pdMS_TO_TICKS(1000), pdTRUE, NULL, updateUserTimer);
 80003f4:	4b20      	ldr	r3, [pc, #128]	@ (8000478 <main+0xe4>)
 80003f6:	9300      	str	r3, [sp, #0]
 80003f8:	2300      	movs	r3, #0
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000400:	481e      	ldr	r0, [pc, #120]	@ (800047c <main+0xe8>)
 8000402:	f007 fc2d 	bl	8007c60 <xTimerCreate>
 8000406:	4603      	mov	r3, r0
 8000408:	4a1d      	ldr	r2, [pc, #116]	@ (8000480 <main+0xec>)
 800040a:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of deaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(copyTask, "spiTask", 128, NULL, 3, &copyHandler);
 800040c:	4b1d      	ldr	r3, [pc, #116]	@ (8000484 <main+0xf0>)
 800040e:	9301      	str	r3, [sp, #4]
 8000410:	2303      	movs	r3, #3
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	2300      	movs	r3, #0
 8000416:	2280      	movs	r2, #128	@ 0x80
 8000418:	491b      	ldr	r1, [pc, #108]	@ (8000488 <main+0xf4>)
 800041a:	481c      	ldr	r0, [pc, #112]	@ (800048c <main+0xf8>)
 800041c:	f006 fbcc 	bl	8006bb8 <xTaskCreate>
  xTaskCreate(cookTask, "cookTask", 128, NULL, 2, &cookHandler);
 8000420:	4b1b      	ldr	r3, [pc, #108]	@ (8000490 <main+0xfc>)
 8000422:	9301      	str	r3, [sp, #4]
 8000424:	2302      	movs	r3, #2
 8000426:	9300      	str	r3, [sp, #0]
 8000428:	2300      	movs	r3, #0
 800042a:	2280      	movs	r2, #128	@ 0x80
 800042c:	4919      	ldr	r1, [pc, #100]	@ (8000494 <main+0x100>)
 800042e:	481a      	ldr	r0, [pc, #104]	@ (8000498 <main+0x104>)
 8000430:	f006 fbc2 	bl	8006bb8 <xTaskCreate>
  xTaskCreate(lcdTask, "lcdTask", 128, NULL, 1, &lcdHandler);
 8000434:	4b19      	ldr	r3, [pc, #100]	@ (800049c <main+0x108>)
 8000436:	9301      	str	r3, [sp, #4]
 8000438:	2301      	movs	r3, #1
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2300      	movs	r3, #0
 800043e:	2280      	movs	r2, #128	@ 0x80
 8000440:	4917      	ldr	r1, [pc, #92]	@ (80004a0 <main+0x10c>)
 8000442:	4818      	ldr	r0, [pc, #96]	@ (80004a4 <main+0x110>)
 8000444:	f006 fbb8 	bl	8006bb8 <xTaskCreate>
  xTaskCreate(buzzerTask, "buzzerTask", 128, NULL, 1, &buzzerHandler);
 8000448:	4b17      	ldr	r3, [pc, #92]	@ (80004a8 <main+0x114>)
 800044a:	9301      	str	r3, [sp, #4]
 800044c:	2301      	movs	r3, #1
 800044e:	9300      	str	r3, [sp, #0]
 8000450:	2300      	movs	r3, #0
 8000452:	2280      	movs	r2, #128	@ 0x80
 8000454:	4915      	ldr	r1, [pc, #84]	@ (80004ac <main+0x118>)
 8000456:	4816      	ldr	r0, [pc, #88]	@ (80004b0 <main+0x11c>)
 8000458:	f006 fbae 	bl	8006bb8 <xTaskCreate>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 800045c:	f006 fd32 	bl	8006ec4 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <main+0xcc>
 8000464:	20000908 	.word	0x20000908
 8000468:	20000814 	.word	0x20000814
 800046c:	200008c4 	.word	0x200008c4
 8000470:	200008c8 	.word	0x200008c8
 8000474:	200008cc 	.word	0x200008cc
 8000478:	08000855 	.word	0x08000855
 800047c:	080094dc 	.word	0x080094dc
 8000480:	200008d0 	.word	0x200008d0
 8000484:	200008b4 	.word	0x200008b4
 8000488:	080094e8 	.word	0x080094e8
 800048c:	080018e5 	.word	0x080018e5
 8000490:	200008b8 	.word	0x200008b8
 8000494:	080094f0 	.word	0x080094f0
 8000498:	080019e9 	.word	0x080019e9
 800049c:	200008bc 	.word	0x200008bc
 80004a0:	080094fc 	.word	0x080094fc
 80004a4:	08001fb5 	.word	0x08001fb5
 80004a8:	200008c0 	.word	0x200008c0
 80004ac:	08009504 	.word	0x08009504
 80004b0:	080025dd 	.word	0x080025dd

080004b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b090      	sub	sp, #64	@ 0x40
 80004b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ba:	f107 0318 	add.w	r3, r7, #24
 80004be:	2228      	movs	r2, #40	@ 0x28
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f008 fb18 	bl	8008af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004d6:	2301      	movs	r3, #1
 80004d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004da:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80004de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004e0:	2300      	movs	r3, #0
 80004e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e4:	2301      	movs	r3, #1
 80004e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e8:	2302      	movs	r3, #2
 80004ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004f2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f8:	f107 0318 	add.w	r3, r7, #24
 80004fc:	4618      	mov	r0, r3
 80004fe:	f003 fc05 	bl	8003d0c <HAL_RCC_OscConfig>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000508:	f002 f8fb 	bl	8002702 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050c:	230f      	movs	r3, #15
 800050e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000510:	2302      	movs	r3, #2
 8000512:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000518:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800051c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2102      	movs	r1, #2
 8000526:	4618      	mov	r0, r3
 8000528:	f003 fe72 	bl	8004210 <HAL_RCC_ClockConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000532:	f002 f8e6 	bl	8002702 <Error_Handler>
  }
}
 8000536:	bf00      	nop
 8000538:	3740      	adds	r7, #64	@ 0x40
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000544:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <MX_I2C1_Init+0x50>)
 8000546:	4a13      	ldr	r2, [pc, #76]	@ (8000594 <MX_I2C1_Init+0x54>)
 8000548:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800054a:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <MX_I2C1_Init+0x50>)
 800054c:	4a12      	ldr	r2, [pc, #72]	@ (8000598 <MX_I2C1_Init+0x58>)
 800054e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000550:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <MX_I2C1_Init+0x50>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000556:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <MX_I2C1_Init+0x50>)
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800055c:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <MX_I2C1_Init+0x50>)
 800055e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000562:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000564:	4b0a      	ldr	r3, [pc, #40]	@ (8000590 <MX_I2C1_Init+0x50>)
 8000566:	2200      	movs	r2, #0
 8000568:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800056a:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <MX_I2C1_Init+0x50>)
 800056c:	2200      	movs	r2, #0
 800056e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000570:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <MX_I2C1_Init+0x50>)
 8000572:	2200      	movs	r2, #0
 8000574:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000576:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <MX_I2C1_Init+0x50>)
 8000578:	2200      	movs	r2, #0
 800057a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800057c:	4804      	ldr	r0, [pc, #16]	@ (8000590 <MX_I2C1_Init+0x50>)
 800057e:	f002 ff29 	bl	80033d4 <HAL_I2C_Init>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000588:	f002 f8bb 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200007c0 	.word	0x200007c0
 8000594:	40005400 	.word	0x40005400
 8000598:	000186a0 	.word	0x000186a0

0800059c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005a0:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <MX_SPI1_Init+0x5c>)
 80005a2:	4a16      	ldr	r2, [pc, #88]	@ (80005fc <MX_SPI1_Init+0x60>)
 80005a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80005a6:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <MX_SPI1_Init+0x5c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005ac:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <MX_SPI1_Init+0x5c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005b2:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <MX_SPI1_Init+0x5c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <MX_SPI1_Init+0x5c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005be:	4b0e      	ldr	r3, [pc, #56]	@ (80005f8 <MX_SPI1_Init+0x5c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <MX_SPI1_Init+0x5c>)
 80005c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <MX_SPI1_Init+0x5c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005d2:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <MX_SPI1_Init+0x5c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005d8:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <MX_SPI1_Init+0x5c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005de:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <MX_SPI1_Init+0x5c>)
 80005e0:	220a      	movs	r2, #10
 80005e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005e4:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <MX_SPI1_Init+0x5c>)
 80005e6:	f003 ffd1 	bl	800458c <HAL_SPI_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 80005f0:	f002 f887 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000814 	.word	0x20000814
 80005fc:	40013000 	.word	0x40013000

08000600 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000604:	4b11      	ldr	r3, [pc, #68]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000606:	4a12      	ldr	r2, [pc, #72]	@ (8000650 <MX_USART2_UART_Init+0x50>)
 8000608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060a:	4b10      	ldr	r3, [pc, #64]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 800060c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b09      	ldr	r3, [pc, #36]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b06      	ldr	r3, [pc, #24]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000638:	f005 f8a2 	bl	8005780 <HAL_UART_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000642:	f002 f85e 	bl	8002702 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000086c 	.word	0x2000086c
 8000650:	40004400 	.word	0x40004400

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000668:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <MX_GPIO_Init+0xbc>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a28      	ldr	r2, [pc, #160]	@ (8000710 <MX_GPIO_Init+0xbc>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b26      	ldr	r3, [pc, #152]	@ (8000710 <MX_GPIO_Init+0xbc>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0310 	and.w	r3, r3, #16
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000680:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <MX_GPIO_Init+0xbc>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a22      	ldr	r2, [pc, #136]	@ (8000710 <MX_GPIO_Init+0xbc>)
 8000686:	f043 0320 	orr.w	r3, r3, #32
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <MX_GPIO_Init+0xbc>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0320 	and.w	r3, r3, #32
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <MX_GPIO_Init+0xbc>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a1c      	ldr	r2, [pc, #112]	@ (8000710 <MX_GPIO_Init+0xbc>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <MX_GPIO_Init+0xbc>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <MX_GPIO_Init+0xbc>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a16      	ldr	r2, [pc, #88]	@ (8000710 <MX_GPIO_Init+0xbc>)
 80006b6:	f043 0308 	orr.w	r3, r3, #8
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_GPIO_Init+0xbc>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|LED_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2130      	movs	r1, #48	@ 0x30
 80006cc:	4811      	ldr	r0, [pc, #68]	@ (8000714 <MX_GPIO_Init+0xc0>)
 80006ce:	f002 fe69 	bl	80033a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 80006d2:	2310      	movs	r3, #16
 80006d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	4619      	mov	r1, r3
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <MX_GPIO_Init+0xc4>)
 80006e6:	f002 fcd9 	bl	800309c <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|LED_Pin;
 80006ea:	2330      	movs	r3, #48	@ 0x30
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_GPIO_Init+0xc0>)
 8000702:	f002 fccb 	bl	800309c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000706:	bf00      	nop
 8000708:	3720      	adds	r7, #32
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000

0800071c <UART_Print>:

/* USER CODE BEGIN 4 */
void UART_Print(const char *message)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff fd13 	bl	8000150 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	4803      	ldr	r0, [pc, #12]	@ (8000744 <UART_Print+0x28>)
 8000736:	f005 f873 	bl	8005820 <HAL_UART_Transmit>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000086c 	.word	0x2000086c

08000748 <dataInit>:

void dataInit()
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i ++)
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	e06f      	b.n	8000834 <dataInit+0xec>
	{
		userData[i].courseData[0][0] = SmallBites;
 8000754:	493d      	ldr	r1, [pc, #244]	@ (800084c <dataInit+0x104>)
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	4613      	mov	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4413      	add	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	440b      	add	r3, r1
 8000764:	221f      	movs	r2, #31
 8000766:	701a      	strb	r2, [r3, #0]
		userData[i].courseData[0][1] = 5;
 8000768:	4938      	ldr	r1, [pc, #224]	@ (800084c <dataInit+0x104>)
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	440b      	add	r3, r1
 8000778:	3301      	adds	r3, #1
 800077a:	2205      	movs	r2, #5
 800077c:	701a      	strb	r2, [r3, #0]
		userData[i].courseData[1][0] = AlmondWithCavior;
 800077e:	4933      	ldr	r1, [pc, #204]	@ (800084c <dataInit+0x104>)
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	4413      	add	r3, r2
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	4413      	add	r3, r2
 800078c:	440b      	add	r3, r1
 800078e:	3302      	adds	r3, #2
 8000790:	2220      	movs	r2, #32
 8000792:	701a      	strb	r2, [r3, #0]
		userData[i].courseData[1][1] = 10;
 8000794:	492d      	ldr	r1, [pc, #180]	@ (800084c <dataInit+0x104>)
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	4613      	mov	r3, r2
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	4413      	add	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	3303      	adds	r3, #3
 80007a6:	220a      	movs	r2, #10
 80007a8:	701a      	strb	r2, [r3, #0]
		userData[i].courseData[2][0] = HearthOvenGrilledHanwoo;
 80007aa:	4928      	ldr	r1, [pc, #160]	@ (800084c <dataInit+0x104>)
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	4613      	mov	r3, r2
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	4413      	add	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	4413      	add	r3, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	3304      	adds	r3, #4
 80007bc:	2223      	movs	r2, #35	@ 0x23
 80007be:	701a      	strb	r2, [r3, #0]
		userData[i].courseData[2][1] = 15;
 80007c0:	4922      	ldr	r1, [pc, #136]	@ (800084c <dataInit+0x104>)
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	4613      	mov	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	4413      	add	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	440b      	add	r3, r1
 80007d0:	3305      	adds	r3, #5
 80007d2:	220f      	movs	r2, #15
 80007d4:	701a      	strb	r2, [r3, #0]
		userData[i].courseData[3][0] = BurdockTarteTatinWithSkinJuice;
 80007d6:	491d      	ldr	r1, [pc, #116]	@ (800084c <dataInit+0x104>)
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4613      	mov	r3, r2
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	4413      	add	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	440b      	add	r3, r1
 80007e6:	3306      	adds	r3, #6
 80007e8:	2226      	movs	r2, #38	@ 0x26
 80007ea:	701a      	strb	r2, [r3, #0]
		userData[i].courseData[3][1] = 10;
 80007ec:	4917      	ldr	r1, [pc, #92]	@ (800084c <dataInit+0x104>)
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4613      	mov	r3, r2
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	4413      	add	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	3307      	adds	r3, #7
 80007fe:	220a      	movs	r2, #10
 8000800:	701a      	strb	r2, [r3, #0]
		userData[i].courseData[4][0] = SmallSweets;
 8000802:	4912      	ldr	r1, [pc, #72]	@ (800084c <dataInit+0x104>)
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	4413      	add	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4413      	add	r3, r2
 8000810:	440b      	add	r3, r1
 8000812:	3308      	adds	r3, #8
 8000814:	2229      	movs	r2, #41	@ 0x29
 8000816:	701a      	strb	r2, [r3, #0]
		userData[i].courseData[4][1] = 15;
 8000818:	490c      	ldr	r1, [pc, #48]	@ (800084c <dataInit+0x104>)
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	440b      	add	r3, r1
 8000828:	3309      	adds	r3, #9
 800082a:	220f      	movs	r2, #15
 800082c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i ++)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3301      	adds	r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b03      	cmp	r3, #3
 8000838:	dd8c      	ble.n	8000754 <dataInit+0xc>
	}
	memset(remainingStuff, 50, sizeof(remainingStuff));
 800083a:	221e      	movs	r2, #30
 800083c:	2132      	movs	r1, #50	@ 0x32
 800083e:	4804      	ldr	r0, [pc, #16]	@ (8000850 <dataInit+0x108>)
 8000840:	f008 f95a 	bl	8008af8 <memset>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200008d4 	.word	0x200008d4
 8000850:	20000944 	.word	0x20000944

08000854 <updateUserTimer>:

void updateUserTimer (TimerHandle_t xTimer)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af02      	add	r7, sp, #8
 800085a:	6078      	str	r0, [r7, #4]
	//UART_Print("Timer Start!\r\n");
	uint8_t temp = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]
	lcd_clear();
 8000860:	f7ff fd10 	bl	8000284 <lcd_clear>
	switch (whatCourse)
 8000864:	4b8a      	ldr	r3, [pc, #552]	@ (8000a90 <updateUserTimer+0x23c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b03      	cmp	r3, #3
 800086a:	f000 849f 	beq.w	80011ac <updateUserTimer+0x958>
 800086e:	2b03      	cmp	r3, #3
 8000870:	f300 870e 	bgt.w	8001690 <updateUserTimer+0xe3c>
 8000874:	2b01      	cmp	r3, #1
 8000876:	d004      	beq.n	8000882 <updateUserTimer+0x2e>
 8000878:	2b02      	cmp	r3, #2
 800087a:	f000 823f 	beq.w	8000cfc <updateUserTimer+0x4a8>
 800087e:	f000 bf07 	b.w	8001690 <updateUserTimer+0xe3c>
	{
	case 1 :
		//UART_Print("SUB1 Course Timer Start!\r\n");
		switch (maxIndex1)
 8000882:	4b84      	ldr	r3, [pc, #528]	@ (8000a94 <updateUserTimer+0x240>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b03      	cmp	r3, #3
 8000888:	f200 820a 	bhi.w	8000ca0 <updateUserTimer+0x44c>
 800088c:	a201      	add	r2, pc, #4	@ (adr r2, 8000894 <updateUserTimer+0x40>)
 800088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000892:	bf00      	nop
 8000894:	080008a5 	.word	0x080008a5
 8000898:	08000997 	.word	0x08000997
 800089c:	08000aad 	.word	0x08000aad
 80008a0:	08000b9f 	.word	0x08000b9f
		{
		case 0 :
			if (arrCourseTime1[maxIndex1] > 0)
 80008a4:	4b7b      	ldr	r3, [pc, #492]	@ (8000a94 <updateUserTimer+0x240>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b7b      	ldr	r3, [pc, #492]	@ (8000a98 <updateUserTimer+0x244>)
 80008ac:	5c9b      	ldrb	r3, [r3, r2]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d01a      	beq.n	80008e8 <updateUserTimer+0x94>
			{
				temp = arrCourseTime1[maxIndex1];
 80008b2:	4b78      	ldr	r3, [pc, #480]	@ (8000a94 <updateUserTimer+0x240>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b77      	ldr	r3, [pc, #476]	@ (8000a98 <updateUserTimer+0x244>)
 80008ba:	5c9b      	ldrb	r3, [r3, r2]
 80008bc:	73fb      	strb	r3, [r7, #15]
				lcd_put_cur(0, 0);
 80008be:	2100      	movs	r1, #0
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff fcf6 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[0], timeStr1);
 80008c6:	4b74      	ldr	r3, [pc, #464]	@ (8000a98 <updateUserTimer+0x244>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	4974      	ldr	r1, [pc, #464]	@ (8000a9c <updateUserTimer+0x248>)
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 ff79 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr1);
 80008d2:	4872      	ldr	r0, [pc, #456]	@ (8000a9c <updateUserTimer+0x248>)
 80008d4:	f7ff fd49 	bl	800036a <lcd_send_string>
				arrCourseTime1[maxIndex1] --;
 80008d8:	4b6e      	ldr	r3, [pc, #440]	@ (8000a94 <updateUserTimer+0x240>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4a6e      	ldr	r2, [pc, #440]	@ (8000a98 <updateUserTimer+0x244>)
 80008de:	5cd2      	ldrb	r2, [r2, r3]
 80008e0:	3a01      	subs	r2, #1
 80008e2:	b2d1      	uxtb	r1, r2
 80008e4:	4a6c      	ldr	r2, [pc, #432]	@ (8000a98 <updateUserTimer+0x244>)
 80008e6:	54d1      	strb	r1, [r2, r3]
			}
			if (temp <= arrCourseTime1[1] && arrCourseTime1[1] > 0)
 80008e8:	4b6b      	ldr	r3, [pc, #428]	@ (8000a98 <updateUserTimer+0x244>)
 80008ea:	785b      	ldrb	r3, [r3, #1]
 80008ec:	7bfa      	ldrb	r2, [r7, #15]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d816      	bhi.n	8000920 <updateUserTimer+0xcc>
 80008f2:	4b69      	ldr	r3, [pc, #420]	@ (8000a98 <updateUserTimer+0x244>)
 80008f4:	785b      	ldrb	r3, [r3, #1]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d012      	beq.n	8000920 <updateUserTimer+0xcc>
			{
				lcd_put_cur(0, 8);
 80008fa:	2108      	movs	r1, #8
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fcd8 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[1], timeStr2);
 8000902:	4b65      	ldr	r3, [pc, #404]	@ (8000a98 <updateUserTimer+0x244>)
 8000904:	785b      	ldrb	r3, [r3, #1]
 8000906:	4966      	ldr	r1, [pc, #408]	@ (8000aa0 <updateUserTimer+0x24c>)
 8000908:	4618      	mov	r0, r3
 800090a:	f000 ff5b 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr2);
 800090e:	4864      	ldr	r0, [pc, #400]	@ (8000aa0 <updateUserTimer+0x24c>)
 8000910:	f7ff fd2b 	bl	800036a <lcd_send_string>
				arrCourseTime1[1] --;
 8000914:	4b60      	ldr	r3, [pc, #384]	@ (8000a98 <updateUserTimer+0x244>)
 8000916:	785b      	ldrb	r3, [r3, #1]
 8000918:	3b01      	subs	r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b5e      	ldr	r3, [pc, #376]	@ (8000a98 <updateUserTimer+0x244>)
 800091e:	705a      	strb	r2, [r3, #1]
			}
			if (temp <= arrCourseTime1[2] && arrCourseTime1[2] > 0)
 8000920:	4b5d      	ldr	r3, [pc, #372]	@ (8000a98 <updateUserTimer+0x244>)
 8000922:	789b      	ldrb	r3, [r3, #2]
 8000924:	7bfa      	ldrb	r2, [r7, #15]
 8000926:	429a      	cmp	r2, r3
 8000928:	d816      	bhi.n	8000958 <updateUserTimer+0x104>
 800092a:	4b5b      	ldr	r3, [pc, #364]	@ (8000a98 <updateUserTimer+0x244>)
 800092c:	789b      	ldrb	r3, [r3, #2]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d012      	beq.n	8000958 <updateUserTimer+0x104>
			{
				lcd_put_cur(1, 0);
 8000932:	2100      	movs	r1, #0
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff fcbc 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[2], timeStr3);
 800093a:	4b57      	ldr	r3, [pc, #348]	@ (8000a98 <updateUserTimer+0x244>)
 800093c:	789b      	ldrb	r3, [r3, #2]
 800093e:	4959      	ldr	r1, [pc, #356]	@ (8000aa4 <updateUserTimer+0x250>)
 8000940:	4618      	mov	r0, r3
 8000942:	f000 ff3f 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr3);
 8000946:	4857      	ldr	r0, [pc, #348]	@ (8000aa4 <updateUserTimer+0x250>)
 8000948:	f7ff fd0f 	bl	800036a <lcd_send_string>
				arrCourseTime1[2] --;
 800094c:	4b52      	ldr	r3, [pc, #328]	@ (8000a98 <updateUserTimer+0x244>)
 800094e:	789b      	ldrb	r3, [r3, #2]
 8000950:	3b01      	subs	r3, #1
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b50      	ldr	r3, [pc, #320]	@ (8000a98 <updateUserTimer+0x244>)
 8000956:	709a      	strb	r2, [r3, #2]
			}
			if (temp <= arrCourseTime1[3] && arrCourseTime1[3] > 0)
 8000958:	4b4f      	ldr	r3, [pc, #316]	@ (8000a98 <updateUserTimer+0x244>)
 800095a:	78db      	ldrb	r3, [r3, #3]
 800095c:	7bfa      	ldrb	r2, [r7, #15]
 800095e:	429a      	cmp	r2, r3
 8000960:	f200 8197 	bhi.w	8000c92 <updateUserTimer+0x43e>
 8000964:	4b4c      	ldr	r3, [pc, #304]	@ (8000a98 <updateUserTimer+0x244>)
 8000966:	78db      	ldrb	r3, [r3, #3]
 8000968:	2b00      	cmp	r3, #0
 800096a:	f000 8192 	beq.w	8000c92 <updateUserTimer+0x43e>
			{
				lcd_put_cur(1, 8);
 800096e:	2108      	movs	r1, #8
 8000970:	2001      	movs	r0, #1
 8000972:	f7ff fc9e 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[3], timeStr4);
 8000976:	4b48      	ldr	r3, [pc, #288]	@ (8000a98 <updateUserTimer+0x244>)
 8000978:	78db      	ldrb	r3, [r3, #3]
 800097a:	494b      	ldr	r1, [pc, #300]	@ (8000aa8 <updateUserTimer+0x254>)
 800097c:	4618      	mov	r0, r3
 800097e:	f000 ff21 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr4);
 8000982:	4849      	ldr	r0, [pc, #292]	@ (8000aa8 <updateUserTimer+0x254>)
 8000984:	f7ff fcf1 	bl	800036a <lcd_send_string>
				arrCourseTime1[3] --;
 8000988:	4b43      	ldr	r3, [pc, #268]	@ (8000a98 <updateUserTimer+0x244>)
 800098a:	78db      	ldrb	r3, [r3, #3]
 800098c:	3b01      	subs	r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b41      	ldr	r3, [pc, #260]	@ (8000a98 <updateUserTimer+0x244>)
 8000992:	70da      	strb	r2, [r3, #3]
			}
			break;
 8000994:	e17d      	b.n	8000c92 <updateUserTimer+0x43e>
		case 1 :
			if (arrCourseTime1[maxIndex1] > 0)
 8000996:	4b3f      	ldr	r3, [pc, #252]	@ (8000a94 <updateUserTimer+0x240>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a98 <updateUserTimer+0x244>)
 800099e:	5c9b      	ldrb	r3, [r3, r2]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d01d      	beq.n	80009e0 <updateUserTimer+0x18c>
			{
				temp = arrCourseTime1[maxIndex1];
 80009a4:	4b3b      	ldr	r3, [pc, #236]	@ (8000a94 <updateUserTimer+0x240>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000a98 <updateUserTimer+0x244>)
 80009ac:	5c9b      	ldrb	r3, [r3, r2]
 80009ae:	73fb      	strb	r3, [r7, #15]
				lcd_put_cur(0, 8);
 80009b0:	2108      	movs	r1, #8
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff fc7d 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[maxIndex1], timeStr2);
 80009b8:	4b36      	ldr	r3, [pc, #216]	@ (8000a94 <updateUserTimer+0x240>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b36      	ldr	r3, [pc, #216]	@ (8000a98 <updateUserTimer+0x244>)
 80009c0:	5c9b      	ldrb	r3, [r3, r2]
 80009c2:	4937      	ldr	r1, [pc, #220]	@ (8000aa0 <updateUserTimer+0x24c>)
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 fefd 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr2);
 80009ca:	4835      	ldr	r0, [pc, #212]	@ (8000aa0 <updateUserTimer+0x24c>)
 80009cc:	f7ff fccd 	bl	800036a <lcd_send_string>
				arrCourseTime1[maxIndex1] --;
 80009d0:	4b30      	ldr	r3, [pc, #192]	@ (8000a94 <updateUserTimer+0x240>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4a30      	ldr	r2, [pc, #192]	@ (8000a98 <updateUserTimer+0x244>)
 80009d6:	5cd2      	ldrb	r2, [r2, r3]
 80009d8:	3a01      	subs	r2, #1
 80009da:	b2d1      	uxtb	r1, r2
 80009dc:	4a2e      	ldr	r2, [pc, #184]	@ (8000a98 <updateUserTimer+0x244>)
 80009de:	54d1      	strb	r1, [r2, r3]
			}
			if (temp <= arrCourseTime1[0] && arrCourseTime1[0] > 0)
 80009e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a98 <updateUserTimer+0x244>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	7bfa      	ldrb	r2, [r7, #15]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d816      	bhi.n	8000a18 <updateUserTimer+0x1c4>
 80009ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000a98 <updateUserTimer+0x244>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d012      	beq.n	8000a18 <updateUserTimer+0x1c4>
			{
				lcd_put_cur(0, 0);
 80009f2:	2100      	movs	r1, #0
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff fc5c 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[0], timeStr1);
 80009fa:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <updateUserTimer+0x244>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	4927      	ldr	r1, [pc, #156]	@ (8000a9c <updateUserTimer+0x248>)
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fedf 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr1);
 8000a06:	4825      	ldr	r0, [pc, #148]	@ (8000a9c <updateUserTimer+0x248>)
 8000a08:	f7ff fcaf 	bl	800036a <lcd_send_string>
				arrCourseTime1[0] --;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	@ (8000a98 <updateUserTimer+0x244>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b20      	ldr	r3, [pc, #128]	@ (8000a98 <updateUserTimer+0x244>)
 8000a16:	701a      	strb	r2, [r3, #0]
			}
			if (temp <= arrCourseTime1[2] && arrCourseTime1[2] > 0)
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <updateUserTimer+0x244>)
 8000a1a:	789b      	ldrb	r3, [r3, #2]
 8000a1c:	7bfa      	ldrb	r2, [r7, #15]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d816      	bhi.n	8000a50 <updateUserTimer+0x1fc>
 8000a22:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <updateUserTimer+0x244>)
 8000a24:	789b      	ldrb	r3, [r3, #2]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d012      	beq.n	8000a50 <updateUserTimer+0x1fc>
			{
				lcd_put_cur(1, 0);
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f7ff fc40 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[2], timeStr3);
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <updateUserTimer+0x244>)
 8000a34:	789b      	ldrb	r3, [r3, #2]
 8000a36:	491b      	ldr	r1, [pc, #108]	@ (8000aa4 <updateUserTimer+0x250>)
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 fec3 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr3);
 8000a3e:	4819      	ldr	r0, [pc, #100]	@ (8000aa4 <updateUserTimer+0x250>)
 8000a40:	f7ff fc93 	bl	800036a <lcd_send_string>
				arrCourseTime1[2] --;
 8000a44:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <updateUserTimer+0x244>)
 8000a46:	789b      	ldrb	r3, [r3, #2]
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <updateUserTimer+0x244>)
 8000a4e:	709a      	strb	r2, [r3, #2]
			}
			if (temp <= arrCourseTime1[3] && arrCourseTime1[3] > 0)
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <updateUserTimer+0x244>)
 8000a52:	78db      	ldrb	r3, [r3, #3]
 8000a54:	7bfa      	ldrb	r2, [r7, #15]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	f200 811d 	bhi.w	8000c96 <updateUserTimer+0x442>
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <updateUserTimer+0x244>)
 8000a5e:	78db      	ldrb	r3, [r3, #3]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f000 8118 	beq.w	8000c96 <updateUserTimer+0x442>
			{
				lcd_put_cur(1, 8);
 8000a66:	2108      	movs	r1, #8
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff fc22 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[3], timeStr4);
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <updateUserTimer+0x244>)
 8000a70:	78db      	ldrb	r3, [r3, #3]
 8000a72:	490d      	ldr	r1, [pc, #52]	@ (8000aa8 <updateUserTimer+0x254>)
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fea5 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr4);
 8000a7a:	480b      	ldr	r0, [pc, #44]	@ (8000aa8 <updateUserTimer+0x254>)
 8000a7c:	f7ff fc75 	bl	800036a <lcd_send_string>
				arrCourseTime1[3] --;
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <updateUserTimer+0x244>)
 8000a82:	78db      	ldrb	r3, [r3, #3]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b03      	ldr	r3, [pc, #12]	@ (8000a98 <updateUserTimer+0x244>)
 8000a8a:	70da      	strb	r2, [r3, #3]
			}
			break;
 8000a8c:	e103      	b.n	8000c96 <updateUserTimer+0x442>
 8000a8e:	bf00      	nop
 8000a90:	2000090e 	.word	0x2000090e
 8000a94:	20000941 	.word	0x20000941
 8000a98:	20000934 	.word	0x20000934
 8000a9c:	20000910 	.word	0x20000910
 8000aa0:	20000918 	.word	0x20000918
 8000aa4:	20000920 	.word	0x20000920
 8000aa8:	20000928 	.word	0x20000928
		case 2 :
			if (arrCourseTime1[maxIndex1] > 0)
 8000aac:	4b9b      	ldr	r3, [pc, #620]	@ (8000d1c <updateUserTimer+0x4c8>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b9b      	ldr	r3, [pc, #620]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000ab4:	5c9b      	ldrb	r3, [r3, r2]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d01a      	beq.n	8000af0 <updateUserTimer+0x29c>
			{
				temp = arrCourseTime1[maxIndex1];
 8000aba:	4b98      	ldr	r3, [pc, #608]	@ (8000d1c <updateUserTimer+0x4c8>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b97      	ldr	r3, [pc, #604]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000ac2:	5c9b      	ldrb	r3, [r3, r2]
 8000ac4:	73fb      	strb	r3, [r7, #15]
				lcd_put_cur(1, 0);
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f7ff fbf2 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[2], timeStr3);
 8000ace:	4b94      	ldr	r3, [pc, #592]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000ad0:	789b      	ldrb	r3, [r3, #2]
 8000ad2:	4994      	ldr	r1, [pc, #592]	@ (8000d24 <updateUserTimer+0x4d0>)
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fe75 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr3);
 8000ada:	4892      	ldr	r0, [pc, #584]	@ (8000d24 <updateUserTimer+0x4d0>)
 8000adc:	f7ff fc45 	bl	800036a <lcd_send_string>
				arrCourseTime1[maxIndex1] --;
 8000ae0:	4b8e      	ldr	r3, [pc, #568]	@ (8000d1c <updateUserTimer+0x4c8>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4a8e      	ldr	r2, [pc, #568]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000ae6:	5cd2      	ldrb	r2, [r2, r3]
 8000ae8:	3a01      	subs	r2, #1
 8000aea:	b2d1      	uxtb	r1, r2
 8000aec:	4a8c      	ldr	r2, [pc, #560]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000aee:	54d1      	strb	r1, [r2, r3]
			}
			if (temp <= arrCourseTime1[0] && arrCourseTime1[0] > 0)
 8000af0:	4b8b      	ldr	r3, [pc, #556]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	7bfa      	ldrb	r2, [r7, #15]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d816      	bhi.n	8000b28 <updateUserTimer+0x2d4>
 8000afa:	4b89      	ldr	r3, [pc, #548]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d012      	beq.n	8000b28 <updateUserTimer+0x2d4>
			{
				lcd_put_cur(0, 0);
 8000b02:	2100      	movs	r1, #0
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff fbd4 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[0], timeStr1);
 8000b0a:	4b85      	ldr	r3, [pc, #532]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	4986      	ldr	r1, [pc, #536]	@ (8000d28 <updateUserTimer+0x4d4>)
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fe57 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr1);
 8000b16:	4884      	ldr	r0, [pc, #528]	@ (8000d28 <updateUserTimer+0x4d4>)
 8000b18:	f7ff fc27 	bl	800036a <lcd_send_string>
				arrCourseTime1[0] --;
 8000b1c:	4b80      	ldr	r3, [pc, #512]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b7e      	ldr	r3, [pc, #504]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000b26:	701a      	strb	r2, [r3, #0]
			}
			if (temp <= arrCourseTime1[1] && arrCourseTime1[1] > 0)
 8000b28:	4b7d      	ldr	r3, [pc, #500]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000b2a:	785b      	ldrb	r3, [r3, #1]
 8000b2c:	7bfa      	ldrb	r2, [r7, #15]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d816      	bhi.n	8000b60 <updateUserTimer+0x30c>
 8000b32:	4b7b      	ldr	r3, [pc, #492]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000b34:	785b      	ldrb	r3, [r3, #1]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d012      	beq.n	8000b60 <updateUserTimer+0x30c>
			{
				lcd_put_cur(0, 8);
 8000b3a:	2108      	movs	r1, #8
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff fbb8 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[1], timeStr2);
 8000b42:	4b77      	ldr	r3, [pc, #476]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000b44:	785b      	ldrb	r3, [r3, #1]
 8000b46:	4979      	ldr	r1, [pc, #484]	@ (8000d2c <updateUserTimer+0x4d8>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fe3b 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr2);
 8000b4e:	4877      	ldr	r0, [pc, #476]	@ (8000d2c <updateUserTimer+0x4d8>)
 8000b50:	f7ff fc0b 	bl	800036a <lcd_send_string>
				arrCourseTime1[1] --;
 8000b54:	4b72      	ldr	r3, [pc, #456]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000b56:	785b      	ldrb	r3, [r3, #1]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b70      	ldr	r3, [pc, #448]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000b5e:	705a      	strb	r2, [r3, #1]
			}
			if (temp <= arrCourseTime1[3] && arrCourseTime1[3] > 0)
 8000b60:	4b6f      	ldr	r3, [pc, #444]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000b62:	78db      	ldrb	r3, [r3, #3]
 8000b64:	7bfa      	ldrb	r2, [r7, #15]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	f200 8097 	bhi.w	8000c9a <updateUserTimer+0x446>
 8000b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000b6e:	78db      	ldrb	r3, [r3, #3]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f000 8092 	beq.w	8000c9a <updateUserTimer+0x446>
			{
				lcd_put_cur(1, 8);
 8000b76:	2108      	movs	r1, #8
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f7ff fb9a 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[3], timeStr4);
 8000b7e:	4b68      	ldr	r3, [pc, #416]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000b80:	78db      	ldrb	r3, [r3, #3]
 8000b82:	496b      	ldr	r1, [pc, #428]	@ (8000d30 <updateUserTimer+0x4dc>)
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fe1d 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr4);
 8000b8a:	4869      	ldr	r0, [pc, #420]	@ (8000d30 <updateUserTimer+0x4dc>)
 8000b8c:	f7ff fbed 	bl	800036a <lcd_send_string>
				arrCourseTime1[3] --;
 8000b90:	4b63      	ldr	r3, [pc, #396]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000b92:	78db      	ldrb	r3, [r3, #3]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b61      	ldr	r3, [pc, #388]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000b9a:	70da      	strb	r2, [r3, #3]
			}
			break;
 8000b9c:	e07d      	b.n	8000c9a <updateUserTimer+0x446>
		case 3 :
			if (arrCourseTime1[maxIndex1] > 0)
 8000b9e:	4b5f      	ldr	r3, [pc, #380]	@ (8000d1c <updateUserTimer+0x4c8>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4b5e      	ldr	r3, [pc, #376]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000ba6:	5c9b      	ldrb	r3, [r3, r2]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d01d      	beq.n	8000be8 <updateUserTimer+0x394>
			{
				temp = arrCourseTime1[maxIndex1];
 8000bac:	4b5b      	ldr	r3, [pc, #364]	@ (8000d1c <updateUserTimer+0x4c8>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b5b      	ldr	r3, [pc, #364]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000bb4:	5c9b      	ldrb	r3, [r3, r2]
 8000bb6:	73fb      	strb	r3, [r7, #15]
				lcd_put_cur(1, 8);
 8000bb8:	2108      	movs	r1, #8
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f7ff fb79 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[maxIndex1], timeStr4);
 8000bc0:	4b56      	ldr	r3, [pc, #344]	@ (8000d1c <updateUserTimer+0x4c8>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b56      	ldr	r3, [pc, #344]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000bc8:	5c9b      	ldrb	r3, [r3, r2]
 8000bca:	4959      	ldr	r1, [pc, #356]	@ (8000d30 <updateUserTimer+0x4dc>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fdf9 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr4);
 8000bd2:	4857      	ldr	r0, [pc, #348]	@ (8000d30 <updateUserTimer+0x4dc>)
 8000bd4:	f7ff fbc9 	bl	800036a <lcd_send_string>
				arrCourseTime1[maxIndex1] --;
 8000bd8:	4b50      	ldr	r3, [pc, #320]	@ (8000d1c <updateUserTimer+0x4c8>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4a50      	ldr	r2, [pc, #320]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000bde:	5cd2      	ldrb	r2, [r2, r3]
 8000be0:	3a01      	subs	r2, #1
 8000be2:	b2d1      	uxtb	r1, r2
 8000be4:	4a4e      	ldr	r2, [pc, #312]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000be6:	54d1      	strb	r1, [r2, r3]
			}
			if (temp <= arrCourseTime1[0] && arrCourseTime1[0] > 0)
 8000be8:	4b4d      	ldr	r3, [pc, #308]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	7bfa      	ldrb	r2, [r7, #15]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d816      	bhi.n	8000c20 <updateUserTimer+0x3cc>
 8000bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d012      	beq.n	8000c20 <updateUserTimer+0x3cc>
			{
				lcd_put_cur(0, 0);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f7ff fb58 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[0], timeStr1);
 8000c02:	4b47      	ldr	r3, [pc, #284]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4948      	ldr	r1, [pc, #288]	@ (8000d28 <updateUserTimer+0x4d4>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fddb 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr1);
 8000c0e:	4846      	ldr	r0, [pc, #280]	@ (8000d28 <updateUserTimer+0x4d4>)
 8000c10:	f7ff fbab 	bl	800036a <lcd_send_string>
				arrCourseTime1[0] --;
 8000c14:	4b42      	ldr	r3, [pc, #264]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b40      	ldr	r3, [pc, #256]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000c1e:	701a      	strb	r2, [r3, #0]
			}
			if (temp <= arrCourseTime1[1] && arrCourseTime1[1] > 0)
 8000c20:	4b3f      	ldr	r3, [pc, #252]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000c22:	785b      	ldrb	r3, [r3, #1]
 8000c24:	7bfa      	ldrb	r2, [r7, #15]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d816      	bhi.n	8000c58 <updateUserTimer+0x404>
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000c2c:	785b      	ldrb	r3, [r3, #1]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d012      	beq.n	8000c58 <updateUserTimer+0x404>
			{
				lcd_put_cur(0, 8);
 8000c32:	2108      	movs	r1, #8
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff fb3c 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[1], timeStr2);
 8000c3a:	4b39      	ldr	r3, [pc, #228]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000c3c:	785b      	ldrb	r3, [r3, #1]
 8000c3e:	493b      	ldr	r1, [pc, #236]	@ (8000d2c <updateUserTimer+0x4d8>)
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fdbf 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr2);
 8000c46:	4839      	ldr	r0, [pc, #228]	@ (8000d2c <updateUserTimer+0x4d8>)
 8000c48:	f7ff fb8f 	bl	800036a <lcd_send_string>
				arrCourseTime1[1] --;
 8000c4c:	4b34      	ldr	r3, [pc, #208]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000c4e:	785b      	ldrb	r3, [r3, #1]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b32      	ldr	r3, [pc, #200]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000c56:	705a      	strb	r2, [r3, #1]
			}
			if (temp <= arrCourseTime1[2] && arrCourseTime1[2] > 0)
 8000c58:	4b31      	ldr	r3, [pc, #196]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000c5a:	789b      	ldrb	r3, [r3, #2]
 8000c5c:	7bfa      	ldrb	r2, [r7, #15]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d81d      	bhi.n	8000c9e <updateUserTimer+0x44a>
 8000c62:	4b2f      	ldr	r3, [pc, #188]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000c64:	789b      	ldrb	r3, [r3, #2]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d019      	beq.n	8000c9e <updateUserTimer+0x44a>
			{
				lcd_put_cur(1, 0);
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff fb20 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime1[2], timeStr3);
 8000c72:	4b2b      	ldr	r3, [pc, #172]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000c74:	789b      	ldrb	r3, [r3, #2]
 8000c76:	492b      	ldr	r1, [pc, #172]	@ (8000d24 <updateUserTimer+0x4d0>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fda3 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr3);
 8000c7e:	4829      	ldr	r0, [pc, #164]	@ (8000d24 <updateUserTimer+0x4d0>)
 8000c80:	f7ff fb73 	bl	800036a <lcd_send_string>
				arrCourseTime1[2] --;
 8000c84:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000c86:	789b      	ldrb	r3, [r3, #2]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4b24      	ldr	r3, [pc, #144]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000c8e:	709a      	strb	r2, [r3, #2]
			}
			break;
 8000c90:	e005      	b.n	8000c9e <updateUserTimer+0x44a>
			break;
 8000c92:	bf00      	nop
 8000c94:	e004      	b.n	8000ca0 <updateUserTimer+0x44c>
			break;
 8000c96:	bf00      	nop
 8000c98:	e002      	b.n	8000ca0 <updateUserTimer+0x44c>
			break;
 8000c9a:	bf00      	nop
 8000c9c:	e000      	b.n	8000ca0 <updateUserTimer+0x44c>
			break;
 8000c9e:	bf00      	nop
		}
		if (arrCourseTime1[0] == 0 && arrCourseTime1[1] == 0 && arrCourseTime1[2] == 0 && arrCourseTime1[3] == 0)
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f040 856d 	bne.w	8001784 <updateUserTimer+0xf30>
 8000caa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000cac:	785b      	ldrb	r3, [r3, #1]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 8568 	bne.w	8001784 <updateUserTimer+0xf30>
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000cb6:	789b      	ldrb	r3, [r3, #2]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f040 8563 	bne.w	8001784 <updateUserTimer+0xf30>
 8000cbe:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <updateUserTimer+0x4cc>)
 8000cc0:	78db      	ldrb	r3, [r3, #3]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 855e 	bne.w	8001784 <updateUserTimer+0xf30>
		{
			lcd_clear();
 8000cc8:	f7ff fadc 	bl	8000284 <lcd_clear>
			lcd_send_string("Course Finish!");
 8000ccc:	4819      	ldr	r0, [pc, #100]	@ (8000d34 <updateUserTimer+0x4e0>)
 8000cce:	f7ff fb4c 	bl	800036a <lcd_send_string>
			buzzerSig = true;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <updateUserTimer+0x4e4>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(lcdSem);
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <updateUserTimer+0x4e8>)
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	f005 f963 	bl	8005fac <xQueueGenericSend>
			//UART_Print("S/W Timer lcdSem Give!\r\n");
			xTimerStop(userTimerHandler, 0);
 8000ce6:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <updateUserTimer+0x4ec>)
 8000ce8:	6818      	ldr	r0, [r3, #0]
 8000cea:	2300      	movs	r3, #0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2103      	movs	r1, #3
 8000cf4:	f007 f812 	bl	8007d1c <xTimerGenericCommand>
		}
		break;
 8000cf8:	f000 bd44 	b.w	8001784 <updateUserTimer+0xf30>
	case 2 :
		//UART_Print("Main Course Timer Start!\r\n");
		switch (maxIndex2)
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <updateUserTimer+0x4f0>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	f200 8222 	bhi.w	800114a <updateUserTimer+0x8f6>
 8000d06:	a201      	add	r2, pc, #4	@ (adr r2, 8000d0c <updateUserTimer+0x4b8>)
 8000d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0c:	08000d49 	.word	0x08000d49
 8000d10:	08000e41 	.word	0x08000e41
 8000d14:	08000f51 	.word	0x08000f51
 8000d18:	08001049 	.word	0x08001049
 8000d1c:	20000941 	.word	0x20000941
 8000d20:	20000934 	.word	0x20000934
 8000d24:	20000920 	.word	0x20000920
 8000d28:	20000910 	.word	0x20000910
 8000d2c:	20000918 	.word	0x20000918
 8000d30:	20000928 	.word	0x20000928
 8000d34:	08009510 	.word	0x08009510
 8000d38:	20000962 	.word	0x20000962
 8000d3c:	200008cc 	.word	0x200008cc
 8000d40:	200008d0 	.word	0x200008d0
 8000d44:	20000942 	.word	0x20000942
		{
		case 0 :
			if (arrCourseTime2[maxIndex2] > 0)
 8000d48:	4b7b      	ldr	r3, [pc, #492]	@ (8000f38 <updateUserTimer+0x6e4>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b7b      	ldr	r3, [pc, #492]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000d50:	5c9b      	ldrb	r3, [r3, r2]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d01d      	beq.n	8000d92 <updateUserTimer+0x53e>
			{
				temp = arrCourseTime2[maxIndex2];
 8000d56:	4b78      	ldr	r3, [pc, #480]	@ (8000f38 <updateUserTimer+0x6e4>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b77      	ldr	r3, [pc, #476]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000d5e:	5c9b      	ldrb	r3, [r3, r2]
 8000d60:	73fb      	strb	r3, [r7, #15]
				lcd_put_cur(0, 0);
 8000d62:	2100      	movs	r1, #0
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff faa4 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[maxIndex2], timeStr1);
 8000d6a:	4b73      	ldr	r3, [pc, #460]	@ (8000f38 <updateUserTimer+0x6e4>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b72      	ldr	r3, [pc, #456]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000d72:	5c9b      	ldrb	r3, [r3, r2]
 8000d74:	4972      	ldr	r1, [pc, #456]	@ (8000f40 <updateUserTimer+0x6ec>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fd24 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr1);
 8000d7c:	4870      	ldr	r0, [pc, #448]	@ (8000f40 <updateUserTimer+0x6ec>)
 8000d7e:	f7ff faf4 	bl	800036a <lcd_send_string>
				arrCourseTime2[maxIndex2] --;
 8000d82:	4b6d      	ldr	r3, [pc, #436]	@ (8000f38 <updateUserTimer+0x6e4>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	4a6d      	ldr	r2, [pc, #436]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000d88:	5cd2      	ldrb	r2, [r2, r3]
 8000d8a:	3a01      	subs	r2, #1
 8000d8c:	b2d1      	uxtb	r1, r2
 8000d8e:	4a6b      	ldr	r2, [pc, #428]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000d90:	54d1      	strb	r1, [r2, r3]
			}
			if (temp <= arrCourseTime2[1] && arrCourseTime2[1] > 0)
 8000d92:	4b6a      	ldr	r3, [pc, #424]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000d94:	785b      	ldrb	r3, [r3, #1]
 8000d96:	7bfa      	ldrb	r2, [r7, #15]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d816      	bhi.n	8000dca <updateUserTimer+0x576>
 8000d9c:	4b67      	ldr	r3, [pc, #412]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000d9e:	785b      	ldrb	r3, [r3, #1]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d012      	beq.n	8000dca <updateUserTimer+0x576>
			{
				lcd_put_cur(0, 8);
 8000da4:	2108      	movs	r1, #8
 8000da6:	2000      	movs	r0, #0
 8000da8:	f7ff fa83 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[1], timeStr2);
 8000dac:	4b63      	ldr	r3, [pc, #396]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000dae:	785b      	ldrb	r3, [r3, #1]
 8000db0:	4964      	ldr	r1, [pc, #400]	@ (8000f44 <updateUserTimer+0x6f0>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fd06 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr2);
 8000db8:	4862      	ldr	r0, [pc, #392]	@ (8000f44 <updateUserTimer+0x6f0>)
 8000dba:	f7ff fad6 	bl	800036a <lcd_send_string>
				arrCourseTime2[1] --;
 8000dbe:	4b5f      	ldr	r3, [pc, #380]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000dc0:	785b      	ldrb	r3, [r3, #1]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000dc8:	705a      	strb	r2, [r3, #1]
			}
			if (temp <= arrCourseTime2[2] && arrCourseTime2[2] > 0)
 8000dca:	4b5c      	ldr	r3, [pc, #368]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000dcc:	789b      	ldrb	r3, [r3, #2]
 8000dce:	7bfa      	ldrb	r2, [r7, #15]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d816      	bhi.n	8000e02 <updateUserTimer+0x5ae>
 8000dd4:	4b59      	ldr	r3, [pc, #356]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000dd6:	789b      	ldrb	r3, [r3, #2]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d012      	beq.n	8000e02 <updateUserTimer+0x5ae>
			{
				lcd_put_cur(1, 0);
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff fa67 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[2], timeStr3);
 8000de4:	4b55      	ldr	r3, [pc, #340]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000de6:	789b      	ldrb	r3, [r3, #2]
 8000de8:	4957      	ldr	r1, [pc, #348]	@ (8000f48 <updateUserTimer+0x6f4>)
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fcea 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr3);
 8000df0:	4855      	ldr	r0, [pc, #340]	@ (8000f48 <updateUserTimer+0x6f4>)
 8000df2:	f7ff faba 	bl	800036a <lcd_send_string>
				arrCourseTime2[2] --;
 8000df6:	4b51      	ldr	r3, [pc, #324]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000df8:	789b      	ldrb	r3, [r3, #2]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000e00:	709a      	strb	r2, [r3, #2]
			}
			if (temp <= arrCourseTime2[3] && arrCourseTime2[3] > 0)
 8000e02:	4b4e      	ldr	r3, [pc, #312]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000e04:	78db      	ldrb	r3, [r3, #3]
 8000e06:	7bfa      	ldrb	r2, [r7, #15]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f200 8197 	bhi.w	800113c <updateUserTimer+0x8e8>
 8000e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000e10:	78db      	ldrb	r3, [r3, #3]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 8192 	beq.w	800113c <updateUserTimer+0x8e8>
			{
				lcd_put_cur(1, 8);
 8000e18:	2108      	movs	r1, #8
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f7ff fa49 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[3], timeStr4);
 8000e20:	4b46      	ldr	r3, [pc, #280]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000e22:	78db      	ldrb	r3, [r3, #3]
 8000e24:	4949      	ldr	r1, [pc, #292]	@ (8000f4c <updateUserTimer+0x6f8>)
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fccc 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr4);
 8000e2c:	4847      	ldr	r0, [pc, #284]	@ (8000f4c <updateUserTimer+0x6f8>)
 8000e2e:	f7ff fa9c 	bl	800036a <lcd_send_string>
				arrCourseTime2[3] --;
 8000e32:	4b42      	ldr	r3, [pc, #264]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000e34:	78db      	ldrb	r3, [r3, #3]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b40      	ldr	r3, [pc, #256]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000e3c:	70da      	strb	r2, [r3, #3]
			}
			break;
 8000e3e:	e17d      	b.n	800113c <updateUserTimer+0x8e8>
		case 1 :
			if (arrCourseTime2[maxIndex2] > 0)
 8000e40:	4b3d      	ldr	r3, [pc, #244]	@ (8000f38 <updateUserTimer+0x6e4>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b3d      	ldr	r3, [pc, #244]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000e48:	5c9b      	ldrb	r3, [r3, r2]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d01d      	beq.n	8000e8a <updateUserTimer+0x636>
			{
				temp = arrCourseTime2[maxIndex2];
 8000e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f38 <updateUserTimer+0x6e4>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b39      	ldr	r3, [pc, #228]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000e56:	5c9b      	ldrb	r3, [r3, r2]
 8000e58:	73fb      	strb	r3, [r7, #15]
				lcd_put_cur(0, 8);
 8000e5a:	2108      	movs	r1, #8
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff fa28 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[maxIndex2], timeStr2);
 8000e62:	4b35      	ldr	r3, [pc, #212]	@ (8000f38 <updateUserTimer+0x6e4>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b34      	ldr	r3, [pc, #208]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000e6a:	5c9b      	ldrb	r3, [r3, r2]
 8000e6c:	4935      	ldr	r1, [pc, #212]	@ (8000f44 <updateUserTimer+0x6f0>)
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fca8 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr2);
 8000e74:	4833      	ldr	r0, [pc, #204]	@ (8000f44 <updateUserTimer+0x6f0>)
 8000e76:	f7ff fa78 	bl	800036a <lcd_send_string>
				arrCourseTime2[maxIndex2] --;
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f38 <updateUserTimer+0x6e4>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000e80:	5cd2      	ldrb	r2, [r2, r3]
 8000e82:	3a01      	subs	r2, #1
 8000e84:	b2d1      	uxtb	r1, r2
 8000e86:	4a2d      	ldr	r2, [pc, #180]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000e88:	54d1      	strb	r1, [r2, r3]
			}
			if (temp <= arrCourseTime2[0] && arrCourseTime2[0] > 0)
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d816      	bhi.n	8000ec2 <updateUserTimer+0x66e>
 8000e94:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d012      	beq.n	8000ec2 <updateUserTimer+0x66e>
			{
				lcd_put_cur(0, 0);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff fa07 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[0], timeStr1);
 8000ea4:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4925      	ldr	r1, [pc, #148]	@ (8000f40 <updateUserTimer+0x6ec>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fc8a 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr1);
 8000eb0:	4823      	ldr	r0, [pc, #140]	@ (8000f40 <updateUserTimer+0x6ec>)
 8000eb2:	f7ff fa5a 	bl	800036a <lcd_send_string>
				arrCourseTime2[0] --;
 8000eb6:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000ec0:	701a      	strb	r2, [r3, #0]
			}
			if (temp <= arrCourseTime2[2] && arrCourseTime2[2] > 0)
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000ec4:	789b      	ldrb	r3, [r3, #2]
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d816      	bhi.n	8000efa <updateUserTimer+0x6a6>
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000ece:	789b      	ldrb	r3, [r3, #2]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d012      	beq.n	8000efa <updateUserTimer+0x6a6>
			{
				lcd_put_cur(1, 0);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff f9eb 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[2], timeStr3);
 8000edc:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000ede:	789b      	ldrb	r3, [r3, #2]
 8000ee0:	4919      	ldr	r1, [pc, #100]	@ (8000f48 <updateUserTimer+0x6f4>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fc6e 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr3);
 8000ee8:	4817      	ldr	r0, [pc, #92]	@ (8000f48 <updateUserTimer+0x6f4>)
 8000eea:	f7ff fa3e 	bl	800036a <lcd_send_string>
				arrCourseTime2[2] --;
 8000eee:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000ef0:	789b      	ldrb	r3, [r3, #2]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000ef8:	709a      	strb	r2, [r3, #2]
			}
			if (temp <= arrCourseTime2[3] && arrCourseTime2[3] > 0)
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000efc:	78db      	ldrb	r3, [r3, #3]
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f200 811d 	bhi.w	8001140 <updateUserTimer+0x8ec>
 8000f06:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000f08:	78db      	ldrb	r3, [r3, #3]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 8118 	beq.w	8001140 <updateUserTimer+0x8ec>
			{
				lcd_put_cur(1, 8);
 8000f10:	2108      	movs	r1, #8
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff f9cd 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[3], timeStr4);
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000f1a:	78db      	ldrb	r3, [r3, #3]
 8000f1c:	490b      	ldr	r1, [pc, #44]	@ (8000f4c <updateUserTimer+0x6f8>)
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 fc50 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr4);
 8000f24:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <updateUserTimer+0x6f8>)
 8000f26:	f7ff fa20 	bl	800036a <lcd_send_string>
				arrCourseTime2[3] --;
 8000f2a:	4b04      	ldr	r3, [pc, #16]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000f2c:	78db      	ldrb	r3, [r3, #3]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4b02      	ldr	r3, [pc, #8]	@ (8000f3c <updateUserTimer+0x6e8>)
 8000f34:	70da      	strb	r2, [r3, #3]
			}
			break;
 8000f36:	e103      	b.n	8001140 <updateUserTimer+0x8ec>
 8000f38:	20000942 	.word	0x20000942
 8000f3c:	20000938 	.word	0x20000938
 8000f40:	20000910 	.word	0x20000910
 8000f44:	20000918 	.word	0x20000918
 8000f48:	20000920 	.word	0x20000920
 8000f4c:	20000928 	.word	0x20000928
		case 2 :
			if (arrCourseTime2[maxIndex2] > 0)
 8000f50:	4b9e      	ldr	r3, [pc, #632]	@ (80011cc <updateUserTimer+0x978>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b9e      	ldr	r3, [pc, #632]	@ (80011d0 <updateUserTimer+0x97c>)
 8000f58:	5c9b      	ldrb	r3, [r3, r2]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d01d      	beq.n	8000f9a <updateUserTimer+0x746>
			{
				temp = arrCourseTime2[maxIndex2];
 8000f5e:	4b9b      	ldr	r3, [pc, #620]	@ (80011cc <updateUserTimer+0x978>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b9a      	ldr	r3, [pc, #616]	@ (80011d0 <updateUserTimer+0x97c>)
 8000f66:	5c9b      	ldrb	r3, [r3, r2]
 8000f68:	73fb      	strb	r3, [r7, #15]
				lcd_put_cur(1, 0);
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff f9a0 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[maxIndex2], timeStr3);
 8000f72:	4b96      	ldr	r3, [pc, #600]	@ (80011cc <updateUserTimer+0x978>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	4b95      	ldr	r3, [pc, #596]	@ (80011d0 <updateUserTimer+0x97c>)
 8000f7a:	5c9b      	ldrb	r3, [r3, r2]
 8000f7c:	4995      	ldr	r1, [pc, #596]	@ (80011d4 <updateUserTimer+0x980>)
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fc20 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr3);
 8000f84:	4893      	ldr	r0, [pc, #588]	@ (80011d4 <updateUserTimer+0x980>)
 8000f86:	f7ff f9f0 	bl	800036a <lcd_send_string>
				arrCourseTime2[maxIndex2] --;
 8000f8a:	4b90      	ldr	r3, [pc, #576]	@ (80011cc <updateUserTimer+0x978>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	4a90      	ldr	r2, [pc, #576]	@ (80011d0 <updateUserTimer+0x97c>)
 8000f90:	5cd2      	ldrb	r2, [r2, r3]
 8000f92:	3a01      	subs	r2, #1
 8000f94:	b2d1      	uxtb	r1, r2
 8000f96:	4a8e      	ldr	r2, [pc, #568]	@ (80011d0 <updateUserTimer+0x97c>)
 8000f98:	54d1      	strb	r1, [r2, r3]
			}
			if (temp <= arrCourseTime2[0] && arrCourseTime2[0] > 0)
 8000f9a:	4b8d      	ldr	r3, [pc, #564]	@ (80011d0 <updateUserTimer+0x97c>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d816      	bhi.n	8000fd2 <updateUserTimer+0x77e>
 8000fa4:	4b8a      	ldr	r3, [pc, #552]	@ (80011d0 <updateUserTimer+0x97c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d012      	beq.n	8000fd2 <updateUserTimer+0x77e>
			{
				lcd_put_cur(0, 0);
 8000fac:	2100      	movs	r1, #0
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f7ff f97f 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[0], timeStr1);
 8000fb4:	4b86      	ldr	r3, [pc, #536]	@ (80011d0 <updateUserTimer+0x97c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4987      	ldr	r1, [pc, #540]	@ (80011d8 <updateUserTimer+0x984>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fc02 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr1);
 8000fc0:	4885      	ldr	r0, [pc, #532]	@ (80011d8 <updateUserTimer+0x984>)
 8000fc2:	f7ff f9d2 	bl	800036a <lcd_send_string>
				arrCourseTime2[0] --;
 8000fc6:	4b82      	ldr	r3, [pc, #520]	@ (80011d0 <updateUserTimer+0x97c>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b80      	ldr	r3, [pc, #512]	@ (80011d0 <updateUserTimer+0x97c>)
 8000fd0:	701a      	strb	r2, [r3, #0]
			}
			if (temp <= arrCourseTime2[1] && arrCourseTime2[1] > 0)
 8000fd2:	4b7f      	ldr	r3, [pc, #508]	@ (80011d0 <updateUserTimer+0x97c>)
 8000fd4:	785b      	ldrb	r3, [r3, #1]
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d816      	bhi.n	800100a <updateUserTimer+0x7b6>
 8000fdc:	4b7c      	ldr	r3, [pc, #496]	@ (80011d0 <updateUserTimer+0x97c>)
 8000fde:	785b      	ldrb	r3, [r3, #1]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d012      	beq.n	800100a <updateUserTimer+0x7b6>
			{
				lcd_put_cur(0, 8);
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f7ff f963 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[1], timeStr2);
 8000fec:	4b78      	ldr	r3, [pc, #480]	@ (80011d0 <updateUserTimer+0x97c>)
 8000fee:	785b      	ldrb	r3, [r3, #1]
 8000ff0:	497a      	ldr	r1, [pc, #488]	@ (80011dc <updateUserTimer+0x988>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fbe6 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr2);
 8000ff8:	4878      	ldr	r0, [pc, #480]	@ (80011dc <updateUserTimer+0x988>)
 8000ffa:	f7ff f9b6 	bl	800036a <lcd_send_string>
				arrCourseTime2[1] --;
 8000ffe:	4b74      	ldr	r3, [pc, #464]	@ (80011d0 <updateUserTimer+0x97c>)
 8001000:	785b      	ldrb	r3, [r3, #1]
 8001002:	3b01      	subs	r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b72      	ldr	r3, [pc, #456]	@ (80011d0 <updateUserTimer+0x97c>)
 8001008:	705a      	strb	r2, [r3, #1]
			}
			if (temp <= arrCourseTime2[3] && arrCourseTime2[3] > 0)
 800100a:	4b71      	ldr	r3, [pc, #452]	@ (80011d0 <updateUserTimer+0x97c>)
 800100c:	78db      	ldrb	r3, [r3, #3]
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	429a      	cmp	r2, r3
 8001012:	f200 8097 	bhi.w	8001144 <updateUserTimer+0x8f0>
 8001016:	4b6e      	ldr	r3, [pc, #440]	@ (80011d0 <updateUserTimer+0x97c>)
 8001018:	78db      	ldrb	r3, [r3, #3]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 8092 	beq.w	8001144 <updateUserTimer+0x8f0>
			{
				lcd_put_cur(1, 8);
 8001020:	2108      	movs	r1, #8
 8001022:	2001      	movs	r0, #1
 8001024:	f7ff f945 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[3], timeStr4);
 8001028:	4b69      	ldr	r3, [pc, #420]	@ (80011d0 <updateUserTimer+0x97c>)
 800102a:	78db      	ldrb	r3, [r3, #3]
 800102c:	496c      	ldr	r1, [pc, #432]	@ (80011e0 <updateUserTimer+0x98c>)
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fbc8 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr4);
 8001034:	486a      	ldr	r0, [pc, #424]	@ (80011e0 <updateUserTimer+0x98c>)
 8001036:	f7ff f998 	bl	800036a <lcd_send_string>
				arrCourseTime2[3] --;
 800103a:	4b65      	ldr	r3, [pc, #404]	@ (80011d0 <updateUserTimer+0x97c>)
 800103c:	78db      	ldrb	r3, [r3, #3]
 800103e:	3b01      	subs	r3, #1
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b63      	ldr	r3, [pc, #396]	@ (80011d0 <updateUserTimer+0x97c>)
 8001044:	70da      	strb	r2, [r3, #3]
			}
			break;
 8001046:	e07d      	b.n	8001144 <updateUserTimer+0x8f0>
		case 3 :
			if (arrCourseTime2[maxIndex2] > 0)
 8001048:	4b60      	ldr	r3, [pc, #384]	@ (80011cc <updateUserTimer+0x978>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b60      	ldr	r3, [pc, #384]	@ (80011d0 <updateUserTimer+0x97c>)
 8001050:	5c9b      	ldrb	r3, [r3, r2]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d01d      	beq.n	8001092 <updateUserTimer+0x83e>
			{
				temp = arrCourseTime2[maxIndex2];
 8001056:	4b5d      	ldr	r3, [pc, #372]	@ (80011cc <updateUserTimer+0x978>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	4b5c      	ldr	r3, [pc, #368]	@ (80011d0 <updateUserTimer+0x97c>)
 800105e:	5c9b      	ldrb	r3, [r3, r2]
 8001060:	73fb      	strb	r3, [r7, #15]
				lcd_put_cur(1, 8);
 8001062:	2108      	movs	r1, #8
 8001064:	2001      	movs	r0, #1
 8001066:	f7ff f924 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[maxIndex2], timeStr4);
 800106a:	4b58      	ldr	r3, [pc, #352]	@ (80011cc <updateUserTimer+0x978>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	4b57      	ldr	r3, [pc, #348]	@ (80011d0 <updateUserTimer+0x97c>)
 8001072:	5c9b      	ldrb	r3, [r3, r2]
 8001074:	495a      	ldr	r1, [pc, #360]	@ (80011e0 <updateUserTimer+0x98c>)
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fba4 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr4);
 800107c:	4858      	ldr	r0, [pc, #352]	@ (80011e0 <updateUserTimer+0x98c>)
 800107e:	f7ff f974 	bl	800036a <lcd_send_string>
				arrCourseTime2[maxIndex2] --;
 8001082:	4b52      	ldr	r3, [pc, #328]	@ (80011cc <updateUserTimer+0x978>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4a52      	ldr	r2, [pc, #328]	@ (80011d0 <updateUserTimer+0x97c>)
 8001088:	5cd2      	ldrb	r2, [r2, r3]
 800108a:	3a01      	subs	r2, #1
 800108c:	b2d1      	uxtb	r1, r2
 800108e:	4a50      	ldr	r2, [pc, #320]	@ (80011d0 <updateUserTimer+0x97c>)
 8001090:	54d1      	strb	r1, [r2, r3]
			}
			if (temp <= arrCourseTime2[0] && arrCourseTime2[0] > 0)
 8001092:	4b4f      	ldr	r3, [pc, #316]	@ (80011d0 <updateUserTimer+0x97c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	429a      	cmp	r2, r3
 800109a:	d816      	bhi.n	80010ca <updateUserTimer+0x876>
 800109c:	4b4c      	ldr	r3, [pc, #304]	@ (80011d0 <updateUserTimer+0x97c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d012      	beq.n	80010ca <updateUserTimer+0x876>
			{
				lcd_put_cur(0, 0);
 80010a4:	2100      	movs	r1, #0
 80010a6:	2000      	movs	r0, #0
 80010a8:	f7ff f903 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[0], timeStr1);
 80010ac:	4b48      	ldr	r3, [pc, #288]	@ (80011d0 <updateUserTimer+0x97c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4949      	ldr	r1, [pc, #292]	@ (80011d8 <updateUserTimer+0x984>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fb86 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr1);
 80010b8:	4847      	ldr	r0, [pc, #284]	@ (80011d8 <updateUserTimer+0x984>)
 80010ba:	f7ff f956 	bl	800036a <lcd_send_string>
				arrCourseTime2[0] --;
 80010be:	4b44      	ldr	r3, [pc, #272]	@ (80011d0 <updateUserTimer+0x97c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b42      	ldr	r3, [pc, #264]	@ (80011d0 <updateUserTimer+0x97c>)
 80010c8:	701a      	strb	r2, [r3, #0]
			}
			if (temp <= arrCourseTime2[1] && arrCourseTime2[1] > 0)
 80010ca:	4b41      	ldr	r3, [pc, #260]	@ (80011d0 <updateUserTimer+0x97c>)
 80010cc:	785b      	ldrb	r3, [r3, #1]
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d816      	bhi.n	8001102 <updateUserTimer+0x8ae>
 80010d4:	4b3e      	ldr	r3, [pc, #248]	@ (80011d0 <updateUserTimer+0x97c>)
 80010d6:	785b      	ldrb	r3, [r3, #1]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d012      	beq.n	8001102 <updateUserTimer+0x8ae>
			{
				lcd_put_cur(0, 8);
 80010dc:	2108      	movs	r1, #8
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff f8e7 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[1], timeStr2);
 80010e4:	4b3a      	ldr	r3, [pc, #232]	@ (80011d0 <updateUserTimer+0x97c>)
 80010e6:	785b      	ldrb	r3, [r3, #1]
 80010e8:	493c      	ldr	r1, [pc, #240]	@ (80011dc <updateUserTimer+0x988>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 fb6a 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr2);
 80010f0:	483a      	ldr	r0, [pc, #232]	@ (80011dc <updateUserTimer+0x988>)
 80010f2:	f7ff f93a 	bl	800036a <lcd_send_string>
				arrCourseTime2[1] --;
 80010f6:	4b36      	ldr	r3, [pc, #216]	@ (80011d0 <updateUserTimer+0x97c>)
 80010f8:	785b      	ldrb	r3, [r3, #1]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b34      	ldr	r3, [pc, #208]	@ (80011d0 <updateUserTimer+0x97c>)
 8001100:	705a      	strb	r2, [r3, #1]
			}
			if (temp <= arrCourseTime2[2] && arrCourseTime2[2] > 0)
 8001102:	4b33      	ldr	r3, [pc, #204]	@ (80011d0 <updateUserTimer+0x97c>)
 8001104:	789b      	ldrb	r3, [r3, #2]
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	429a      	cmp	r2, r3
 800110a:	d81d      	bhi.n	8001148 <updateUserTimer+0x8f4>
 800110c:	4b30      	ldr	r3, [pc, #192]	@ (80011d0 <updateUserTimer+0x97c>)
 800110e:	789b      	ldrb	r3, [r3, #2]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d019      	beq.n	8001148 <updateUserTimer+0x8f4>
			{
				lcd_put_cur(1, 0);
 8001114:	2100      	movs	r1, #0
 8001116:	2001      	movs	r0, #1
 8001118:	f7ff f8cb 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime2[2], timeStr3);
 800111c:	4b2c      	ldr	r3, [pc, #176]	@ (80011d0 <updateUserTimer+0x97c>)
 800111e:	789b      	ldrb	r3, [r3, #2]
 8001120:	492c      	ldr	r1, [pc, #176]	@ (80011d4 <updateUserTimer+0x980>)
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fb4e 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr3);
 8001128:	482a      	ldr	r0, [pc, #168]	@ (80011d4 <updateUserTimer+0x980>)
 800112a:	f7ff f91e 	bl	800036a <lcd_send_string>
				arrCourseTime2[2] --;
 800112e:	4b28      	ldr	r3, [pc, #160]	@ (80011d0 <updateUserTimer+0x97c>)
 8001130:	789b      	ldrb	r3, [r3, #2]
 8001132:	3b01      	subs	r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4b26      	ldr	r3, [pc, #152]	@ (80011d0 <updateUserTimer+0x97c>)
 8001138:	709a      	strb	r2, [r3, #2]
			}
			break;
 800113a:	e005      	b.n	8001148 <updateUserTimer+0x8f4>
			break;
 800113c:	bf00      	nop
 800113e:	e004      	b.n	800114a <updateUserTimer+0x8f6>
			break;
 8001140:	bf00      	nop
 8001142:	e002      	b.n	800114a <updateUserTimer+0x8f6>
			break;
 8001144:	bf00      	nop
 8001146:	e000      	b.n	800114a <updateUserTimer+0x8f6>
			break;
 8001148:	bf00      	nop
		}
		if (arrCourseTime2[0] == 0 && arrCourseTime2[1] == 0 && arrCourseTime2[2] == 0 && arrCourseTime2[3] == 0)
 800114a:	4b21      	ldr	r3, [pc, #132]	@ (80011d0 <updateUserTimer+0x97c>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f040 831a 	bne.w	8001788 <updateUserTimer+0xf34>
 8001154:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <updateUserTimer+0x97c>)
 8001156:	785b      	ldrb	r3, [r3, #1]
 8001158:	2b00      	cmp	r3, #0
 800115a:	f040 8315 	bne.w	8001788 <updateUserTimer+0xf34>
 800115e:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <updateUserTimer+0x97c>)
 8001160:	789b      	ldrb	r3, [r3, #2]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f040 8310 	bne.w	8001788 <updateUserTimer+0xf34>
 8001168:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <updateUserTimer+0x97c>)
 800116a:	78db      	ldrb	r3, [r3, #3]
 800116c:	2b00      	cmp	r3, #0
 800116e:	f040 830b 	bne.w	8001788 <updateUserTimer+0xf34>
		{
			lcd_clear();
 8001172:	f7ff f887 	bl	8000284 <lcd_clear>
			lcd_put_cur(0, 0);
 8001176:	2100      	movs	r1, #0
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff f89a 	bl	80002b2 <lcd_put_cur>
			lcd_send_string("Course Finish!");
 800117e:	4819      	ldr	r0, [pc, #100]	@ (80011e4 <updateUserTimer+0x990>)
 8001180:	f7ff f8f3 	bl	800036a <lcd_send_string>
			buzzerSig = true;
 8001184:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <updateUserTimer+0x994>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(lcdSem);
 800118a:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <updateUserTimer+0x998>)
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	f004 ff0a 	bl	8005fac <xQueueGenericSend>
			//UART_Print("S/W Timer lcdSem Give!\r\n");
			xTimerStop(userTimerHandler, 0);
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <updateUserTimer+0x99c>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	2300      	movs	r3, #0
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2300      	movs	r3, #0
 80011a2:	2200      	movs	r2, #0
 80011a4:	2103      	movs	r1, #3
 80011a6:	f006 fdb9 	bl	8007d1c <xTimerGenericCommand>
		}
		break;
 80011aa:	e2ed      	b.n	8001788 <updateUserTimer+0xf34>
	case 3 :
		//UART_Print("SUB2 Course Timer Start!");
		switch (maxIndex3)
 80011ac:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <updateUserTimer+0x9a0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	f200 8222 	bhi.w	80015fa <updateUserTimer+0xda6>
 80011b6:	a201      	add	r2, pc, #4	@ (adr r2, 80011bc <updateUserTimer+0x968>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	080011f9 	.word	0x080011f9
 80011c0:	080012f1 	.word	0x080012f1
 80011c4:	08001401 	.word	0x08001401
 80011c8:	080014f9 	.word	0x080014f9
 80011cc:	20000942 	.word	0x20000942
 80011d0:	20000938 	.word	0x20000938
 80011d4:	20000920 	.word	0x20000920
 80011d8:	20000910 	.word	0x20000910
 80011dc:	20000918 	.word	0x20000918
 80011e0:	20000928 	.word	0x20000928
 80011e4:	08009510 	.word	0x08009510
 80011e8:	20000962 	.word	0x20000962
 80011ec:	200008cc 	.word	0x200008cc
 80011f0:	200008d0 	.word	0x200008d0
 80011f4:	20000943 	.word	0x20000943
		{
		case 0 :
			if (arrCourseTime3[maxIndex3] > 0)
 80011f8:	4b7b      	ldr	r3, [pc, #492]	@ (80013e8 <updateUserTimer+0xb94>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b7b      	ldr	r3, [pc, #492]	@ (80013ec <updateUserTimer+0xb98>)
 8001200:	5c9b      	ldrb	r3, [r3, r2]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d01d      	beq.n	8001242 <updateUserTimer+0x9ee>
			{
				temp = arrCourseTime3[maxIndex3];
 8001206:	4b78      	ldr	r3, [pc, #480]	@ (80013e8 <updateUserTimer+0xb94>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	4b77      	ldr	r3, [pc, #476]	@ (80013ec <updateUserTimer+0xb98>)
 800120e:	5c9b      	ldrb	r3, [r3, r2]
 8001210:	73fb      	strb	r3, [r7, #15]
				lcd_put_cur(0, 0);
 8001212:	2100      	movs	r1, #0
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff f84c 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[maxIndex3], timeStr1);
 800121a:	4b73      	ldr	r3, [pc, #460]	@ (80013e8 <updateUserTimer+0xb94>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	4b72      	ldr	r3, [pc, #456]	@ (80013ec <updateUserTimer+0xb98>)
 8001222:	5c9b      	ldrb	r3, [r3, r2]
 8001224:	4972      	ldr	r1, [pc, #456]	@ (80013f0 <updateUserTimer+0xb9c>)
 8001226:	4618      	mov	r0, r3
 8001228:	f000 facc 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr1);
 800122c:	4870      	ldr	r0, [pc, #448]	@ (80013f0 <updateUserTimer+0xb9c>)
 800122e:	f7ff f89c 	bl	800036a <lcd_send_string>
				arrCourseTime3[maxIndex3] --;
 8001232:	4b6d      	ldr	r3, [pc, #436]	@ (80013e8 <updateUserTimer+0xb94>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	4a6d      	ldr	r2, [pc, #436]	@ (80013ec <updateUserTimer+0xb98>)
 8001238:	5cd2      	ldrb	r2, [r2, r3]
 800123a:	3a01      	subs	r2, #1
 800123c:	b2d1      	uxtb	r1, r2
 800123e:	4a6b      	ldr	r2, [pc, #428]	@ (80013ec <updateUserTimer+0xb98>)
 8001240:	54d1      	strb	r1, [r2, r3]
			}
			if (temp <= arrCourseTime3[1] && arrCourseTime3[1] > 0)
 8001242:	4b6a      	ldr	r3, [pc, #424]	@ (80013ec <updateUserTimer+0xb98>)
 8001244:	785b      	ldrb	r3, [r3, #1]
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	429a      	cmp	r2, r3
 800124a:	d816      	bhi.n	800127a <updateUserTimer+0xa26>
 800124c:	4b67      	ldr	r3, [pc, #412]	@ (80013ec <updateUserTimer+0xb98>)
 800124e:	785b      	ldrb	r3, [r3, #1]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d012      	beq.n	800127a <updateUserTimer+0xa26>
			{
				lcd_put_cur(0, 8);
 8001254:	2108      	movs	r1, #8
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff f82b 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[1], timeStr2);
 800125c:	4b63      	ldr	r3, [pc, #396]	@ (80013ec <updateUserTimer+0xb98>)
 800125e:	785b      	ldrb	r3, [r3, #1]
 8001260:	4964      	ldr	r1, [pc, #400]	@ (80013f4 <updateUserTimer+0xba0>)
 8001262:	4618      	mov	r0, r3
 8001264:	f000 faae 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr2);
 8001268:	4862      	ldr	r0, [pc, #392]	@ (80013f4 <updateUserTimer+0xba0>)
 800126a:	f7ff f87e 	bl	800036a <lcd_send_string>
				arrCourseTime3[1] --;
 800126e:	4b5f      	ldr	r3, [pc, #380]	@ (80013ec <updateUserTimer+0xb98>)
 8001270:	785b      	ldrb	r3, [r3, #1]
 8001272:	3b01      	subs	r3, #1
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b5d      	ldr	r3, [pc, #372]	@ (80013ec <updateUserTimer+0xb98>)
 8001278:	705a      	strb	r2, [r3, #1]
			}
			if (temp <= arrCourseTime3[2] && arrCourseTime3[2] > 0)
 800127a:	4b5c      	ldr	r3, [pc, #368]	@ (80013ec <updateUserTimer+0xb98>)
 800127c:	789b      	ldrb	r3, [r3, #2]
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	429a      	cmp	r2, r3
 8001282:	d816      	bhi.n	80012b2 <updateUserTimer+0xa5e>
 8001284:	4b59      	ldr	r3, [pc, #356]	@ (80013ec <updateUserTimer+0xb98>)
 8001286:	789b      	ldrb	r3, [r3, #2]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d012      	beq.n	80012b2 <updateUserTimer+0xa5e>
			{
				lcd_put_cur(1, 0);
 800128c:	2100      	movs	r1, #0
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff f80f 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[2], timeStr3);
 8001294:	4b55      	ldr	r3, [pc, #340]	@ (80013ec <updateUserTimer+0xb98>)
 8001296:	789b      	ldrb	r3, [r3, #2]
 8001298:	4957      	ldr	r1, [pc, #348]	@ (80013f8 <updateUserTimer+0xba4>)
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fa92 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr3);
 80012a0:	4855      	ldr	r0, [pc, #340]	@ (80013f8 <updateUserTimer+0xba4>)
 80012a2:	f7ff f862 	bl	800036a <lcd_send_string>
				arrCourseTime3[2] --;
 80012a6:	4b51      	ldr	r3, [pc, #324]	@ (80013ec <updateUserTimer+0xb98>)
 80012a8:	789b      	ldrb	r3, [r3, #2]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b4f      	ldr	r3, [pc, #316]	@ (80013ec <updateUserTimer+0xb98>)
 80012b0:	709a      	strb	r2, [r3, #2]
			}
			if (temp <= arrCourseTime3[3] && arrCourseTime3[3] > 0)
 80012b2:	4b4e      	ldr	r3, [pc, #312]	@ (80013ec <updateUserTimer+0xb98>)
 80012b4:	78db      	ldrb	r3, [r3, #3]
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	f200 8197 	bhi.w	80015ec <updateUserTimer+0xd98>
 80012be:	4b4b      	ldr	r3, [pc, #300]	@ (80013ec <updateUserTimer+0xb98>)
 80012c0:	78db      	ldrb	r3, [r3, #3]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8192 	beq.w	80015ec <updateUserTimer+0xd98>
			{
				lcd_put_cur(1, 8);
 80012c8:	2108      	movs	r1, #8
 80012ca:	2001      	movs	r0, #1
 80012cc:	f7fe fff1 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[3], timeStr4);
 80012d0:	4b46      	ldr	r3, [pc, #280]	@ (80013ec <updateUserTimer+0xb98>)
 80012d2:	78db      	ldrb	r3, [r3, #3]
 80012d4:	4949      	ldr	r1, [pc, #292]	@ (80013fc <updateUserTimer+0xba8>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 fa74 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr4);
 80012dc:	4847      	ldr	r0, [pc, #284]	@ (80013fc <updateUserTimer+0xba8>)
 80012de:	f7ff f844 	bl	800036a <lcd_send_string>
				arrCourseTime3[3] --;
 80012e2:	4b42      	ldr	r3, [pc, #264]	@ (80013ec <updateUserTimer+0xb98>)
 80012e4:	78db      	ldrb	r3, [r3, #3]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b40      	ldr	r3, [pc, #256]	@ (80013ec <updateUserTimer+0xb98>)
 80012ec:	70da      	strb	r2, [r3, #3]
			}
			break;
 80012ee:	e17d      	b.n	80015ec <updateUserTimer+0xd98>
		case 1 :
			if (arrCourseTime3[maxIndex3] > 0)
 80012f0:	4b3d      	ldr	r3, [pc, #244]	@ (80013e8 <updateUserTimer+0xb94>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b3d      	ldr	r3, [pc, #244]	@ (80013ec <updateUserTimer+0xb98>)
 80012f8:	5c9b      	ldrb	r3, [r3, r2]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d01d      	beq.n	800133a <updateUserTimer+0xae6>
			{
				temp = arrCourseTime3[maxIndex3];
 80012fe:	4b3a      	ldr	r3, [pc, #232]	@ (80013e8 <updateUserTimer+0xb94>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	4b39      	ldr	r3, [pc, #228]	@ (80013ec <updateUserTimer+0xb98>)
 8001306:	5c9b      	ldrb	r3, [r3, r2]
 8001308:	73fb      	strb	r3, [r7, #15]
				lcd_put_cur(0, 8);
 800130a:	2108      	movs	r1, #8
 800130c:	2000      	movs	r0, #0
 800130e:	f7fe ffd0 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[maxIndex3], timeStr2);
 8001312:	4b35      	ldr	r3, [pc, #212]	@ (80013e8 <updateUserTimer+0xb94>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <updateUserTimer+0xb98>)
 800131a:	5c9b      	ldrb	r3, [r3, r2]
 800131c:	4935      	ldr	r1, [pc, #212]	@ (80013f4 <updateUserTimer+0xba0>)
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fa50 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr2);
 8001324:	4833      	ldr	r0, [pc, #204]	@ (80013f4 <updateUserTimer+0xba0>)
 8001326:	f7ff f820 	bl	800036a <lcd_send_string>
				arrCourseTime3[maxIndex3] --;
 800132a:	4b2f      	ldr	r3, [pc, #188]	@ (80013e8 <updateUserTimer+0xb94>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4a2f      	ldr	r2, [pc, #188]	@ (80013ec <updateUserTimer+0xb98>)
 8001330:	5cd2      	ldrb	r2, [r2, r3]
 8001332:	3a01      	subs	r2, #1
 8001334:	b2d1      	uxtb	r1, r2
 8001336:	4a2d      	ldr	r2, [pc, #180]	@ (80013ec <updateUserTimer+0xb98>)
 8001338:	54d1      	strb	r1, [r2, r3]
			}
			if (temp <= arrCourseTime3[0] && arrCourseTime3[0] > 0)
 800133a:	4b2c      	ldr	r3, [pc, #176]	@ (80013ec <updateUserTimer+0xb98>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	429a      	cmp	r2, r3
 8001342:	d816      	bhi.n	8001372 <updateUserTimer+0xb1e>
 8001344:	4b29      	ldr	r3, [pc, #164]	@ (80013ec <updateUserTimer+0xb98>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d012      	beq.n	8001372 <updateUserTimer+0xb1e>
			{
				lcd_put_cur(0, 0);
 800134c:	2100      	movs	r1, #0
 800134e:	2000      	movs	r0, #0
 8001350:	f7fe ffaf 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[0], timeStr1);
 8001354:	4b25      	ldr	r3, [pc, #148]	@ (80013ec <updateUserTimer+0xb98>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4925      	ldr	r1, [pc, #148]	@ (80013f0 <updateUserTimer+0xb9c>)
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fa32 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr1);
 8001360:	4823      	ldr	r0, [pc, #140]	@ (80013f0 <updateUserTimer+0xb9c>)
 8001362:	f7ff f802 	bl	800036a <lcd_send_string>
				arrCourseTime3[0] --;
 8001366:	4b21      	ldr	r3, [pc, #132]	@ (80013ec <updateUserTimer+0xb98>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	3b01      	subs	r3, #1
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <updateUserTimer+0xb98>)
 8001370:	701a      	strb	r2, [r3, #0]
			}
			if (temp <= arrCourseTime3[2] && arrCourseTime3[2] > 0)
 8001372:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <updateUserTimer+0xb98>)
 8001374:	789b      	ldrb	r3, [r3, #2]
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	429a      	cmp	r2, r3
 800137a:	d816      	bhi.n	80013aa <updateUserTimer+0xb56>
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <updateUserTimer+0xb98>)
 800137e:	789b      	ldrb	r3, [r3, #2]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d012      	beq.n	80013aa <updateUserTimer+0xb56>
			{
				lcd_put_cur(1, 0);
 8001384:	2100      	movs	r1, #0
 8001386:	2001      	movs	r0, #1
 8001388:	f7fe ff93 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[2], timeStr3);
 800138c:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <updateUserTimer+0xb98>)
 800138e:	789b      	ldrb	r3, [r3, #2]
 8001390:	4919      	ldr	r1, [pc, #100]	@ (80013f8 <updateUserTimer+0xba4>)
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fa16 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr3);
 8001398:	4817      	ldr	r0, [pc, #92]	@ (80013f8 <updateUserTimer+0xba4>)
 800139a:	f7fe ffe6 	bl	800036a <lcd_send_string>
				arrCourseTime3[2] --;
 800139e:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <updateUserTimer+0xb98>)
 80013a0:	789b      	ldrb	r3, [r3, #2]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <updateUserTimer+0xb98>)
 80013a8:	709a      	strb	r2, [r3, #2]
			}
			if (temp <= arrCourseTime3[3] && arrCourseTime3[3] > 0)
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <updateUserTimer+0xb98>)
 80013ac:	78db      	ldrb	r3, [r3, #3]
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f200 811d 	bhi.w	80015f0 <updateUserTimer+0xd9c>
 80013b6:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <updateUserTimer+0xb98>)
 80013b8:	78db      	ldrb	r3, [r3, #3]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8118 	beq.w	80015f0 <updateUserTimer+0xd9c>
			{
				lcd_put_cur(1, 8);
 80013c0:	2108      	movs	r1, #8
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7fe ff75 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[3], timeStr4);
 80013c8:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <updateUserTimer+0xb98>)
 80013ca:	78db      	ldrb	r3, [r3, #3]
 80013cc:	490b      	ldr	r1, [pc, #44]	@ (80013fc <updateUserTimer+0xba8>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 f9f8 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr4);
 80013d4:	4809      	ldr	r0, [pc, #36]	@ (80013fc <updateUserTimer+0xba8>)
 80013d6:	f7fe ffc8 	bl	800036a <lcd_send_string>
				arrCourseTime3[3] --;
 80013da:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <updateUserTimer+0xb98>)
 80013dc:	78db      	ldrb	r3, [r3, #3]
 80013de:	3b01      	subs	r3, #1
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b02      	ldr	r3, [pc, #8]	@ (80013ec <updateUserTimer+0xb98>)
 80013e4:	70da      	strb	r2, [r3, #3]
			}
			break;
 80013e6:	e103      	b.n	80015f0 <updateUserTimer+0xd9c>
 80013e8:	20000943 	.word	0x20000943
 80013ec:	2000093c 	.word	0x2000093c
 80013f0:	20000910 	.word	0x20000910
 80013f4:	20000918 	.word	0x20000918
 80013f8:	20000920 	.word	0x20000920
 80013fc:	20000928 	.word	0x20000928
		case 2 :
			if (arrCourseTime3[maxIndex3] > 0)
 8001400:	4b98      	ldr	r3, [pc, #608]	@ (8001664 <updateUserTimer+0xe10>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b98      	ldr	r3, [pc, #608]	@ (8001668 <updateUserTimer+0xe14>)
 8001408:	5c9b      	ldrb	r3, [r3, r2]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01d      	beq.n	800144a <updateUserTimer+0xbf6>
			{
				temp = arrCourseTime3[maxIndex3];
 800140e:	4b95      	ldr	r3, [pc, #596]	@ (8001664 <updateUserTimer+0xe10>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4b94      	ldr	r3, [pc, #592]	@ (8001668 <updateUserTimer+0xe14>)
 8001416:	5c9b      	ldrb	r3, [r3, r2]
 8001418:	73fb      	strb	r3, [r7, #15]
				lcd_put_cur(1, 0);
 800141a:	2100      	movs	r1, #0
 800141c:	2001      	movs	r0, #1
 800141e:	f7fe ff48 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[maxIndex3], timeStr3);
 8001422:	4b90      	ldr	r3, [pc, #576]	@ (8001664 <updateUserTimer+0xe10>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	4b8f      	ldr	r3, [pc, #572]	@ (8001668 <updateUserTimer+0xe14>)
 800142a:	5c9b      	ldrb	r3, [r3, r2]
 800142c:	498f      	ldr	r1, [pc, #572]	@ (800166c <updateUserTimer+0xe18>)
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f9c8 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr3);
 8001434:	488d      	ldr	r0, [pc, #564]	@ (800166c <updateUserTimer+0xe18>)
 8001436:	f7fe ff98 	bl	800036a <lcd_send_string>
				arrCourseTime3[maxIndex3] --;
 800143a:	4b8a      	ldr	r3, [pc, #552]	@ (8001664 <updateUserTimer+0xe10>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	4a8a      	ldr	r2, [pc, #552]	@ (8001668 <updateUserTimer+0xe14>)
 8001440:	5cd2      	ldrb	r2, [r2, r3]
 8001442:	3a01      	subs	r2, #1
 8001444:	b2d1      	uxtb	r1, r2
 8001446:	4a88      	ldr	r2, [pc, #544]	@ (8001668 <updateUserTimer+0xe14>)
 8001448:	54d1      	strb	r1, [r2, r3]
			}
			if (temp <= arrCourseTime3[0] && arrCourseTime3[0] > 0)
 800144a:	4b87      	ldr	r3, [pc, #540]	@ (8001668 <updateUserTimer+0xe14>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	429a      	cmp	r2, r3
 8001452:	d816      	bhi.n	8001482 <updateUserTimer+0xc2e>
 8001454:	4b84      	ldr	r3, [pc, #528]	@ (8001668 <updateUserTimer+0xe14>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d012      	beq.n	8001482 <updateUserTimer+0xc2e>
			{
				lcd_put_cur(0, 0);
 800145c:	2100      	movs	r1, #0
 800145e:	2000      	movs	r0, #0
 8001460:	f7fe ff27 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[0], timeStr1);
 8001464:	4b80      	ldr	r3, [pc, #512]	@ (8001668 <updateUserTimer+0xe14>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4981      	ldr	r1, [pc, #516]	@ (8001670 <updateUserTimer+0xe1c>)
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f9aa 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr1);
 8001470:	487f      	ldr	r0, [pc, #508]	@ (8001670 <updateUserTimer+0xe1c>)
 8001472:	f7fe ff7a 	bl	800036a <lcd_send_string>
				arrCourseTime3[0] --;
 8001476:	4b7c      	ldr	r3, [pc, #496]	@ (8001668 <updateUserTimer+0xe14>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	3b01      	subs	r3, #1
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b7a      	ldr	r3, [pc, #488]	@ (8001668 <updateUserTimer+0xe14>)
 8001480:	701a      	strb	r2, [r3, #0]
			}
			if (temp <= arrCourseTime3[1] && arrCourseTime3[1] > 0)
 8001482:	4b79      	ldr	r3, [pc, #484]	@ (8001668 <updateUserTimer+0xe14>)
 8001484:	785b      	ldrb	r3, [r3, #1]
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	429a      	cmp	r2, r3
 800148a:	d816      	bhi.n	80014ba <updateUserTimer+0xc66>
 800148c:	4b76      	ldr	r3, [pc, #472]	@ (8001668 <updateUserTimer+0xe14>)
 800148e:	785b      	ldrb	r3, [r3, #1]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d012      	beq.n	80014ba <updateUserTimer+0xc66>
			{
				lcd_put_cur(0, 8);
 8001494:	2108      	movs	r1, #8
 8001496:	2000      	movs	r0, #0
 8001498:	f7fe ff0b 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[1], timeStr2);
 800149c:	4b72      	ldr	r3, [pc, #456]	@ (8001668 <updateUserTimer+0xe14>)
 800149e:	785b      	ldrb	r3, [r3, #1]
 80014a0:	4974      	ldr	r1, [pc, #464]	@ (8001674 <updateUserTimer+0xe20>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f98e 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr2);
 80014a8:	4872      	ldr	r0, [pc, #456]	@ (8001674 <updateUserTimer+0xe20>)
 80014aa:	f7fe ff5e 	bl	800036a <lcd_send_string>
				arrCourseTime3[1] --;
 80014ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001668 <updateUserTimer+0xe14>)
 80014b0:	785b      	ldrb	r3, [r3, #1]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001668 <updateUserTimer+0xe14>)
 80014b8:	705a      	strb	r2, [r3, #1]
			}
			if (temp <= arrCourseTime3[3] && arrCourseTime3[3] > 0)
 80014ba:	4b6b      	ldr	r3, [pc, #428]	@ (8001668 <updateUserTimer+0xe14>)
 80014bc:	78db      	ldrb	r3, [r3, #3]
 80014be:	7bfa      	ldrb	r2, [r7, #15]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	f200 8097 	bhi.w	80015f4 <updateUserTimer+0xda0>
 80014c6:	4b68      	ldr	r3, [pc, #416]	@ (8001668 <updateUserTimer+0xe14>)
 80014c8:	78db      	ldrb	r3, [r3, #3]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8092 	beq.w	80015f4 <updateUserTimer+0xda0>
			{
				lcd_put_cur(1, 8);
 80014d0:	2108      	movs	r1, #8
 80014d2:	2001      	movs	r0, #1
 80014d4:	f7fe feed 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[3], timeStr4);
 80014d8:	4b63      	ldr	r3, [pc, #396]	@ (8001668 <updateUserTimer+0xe14>)
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	4966      	ldr	r1, [pc, #408]	@ (8001678 <updateUserTimer+0xe24>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f970 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr4);
 80014e4:	4864      	ldr	r0, [pc, #400]	@ (8001678 <updateUserTimer+0xe24>)
 80014e6:	f7fe ff40 	bl	800036a <lcd_send_string>
				arrCourseTime3[3] --;
 80014ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001668 <updateUserTimer+0xe14>)
 80014ec:	78db      	ldrb	r3, [r3, #3]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001668 <updateUserTimer+0xe14>)
 80014f4:	70da      	strb	r2, [r3, #3]
			}
			break;
 80014f6:	e07d      	b.n	80015f4 <updateUserTimer+0xda0>
		case 3 :
			if (arrCourseTime3[maxIndex3] > 0)
 80014f8:	4b5a      	ldr	r3, [pc, #360]	@ (8001664 <updateUserTimer+0xe10>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001668 <updateUserTimer+0xe14>)
 8001500:	5c9b      	ldrb	r3, [r3, r2]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d01d      	beq.n	8001542 <updateUserTimer+0xcee>
			{
				temp = arrCourseTime3[maxIndex3];
 8001506:	4b57      	ldr	r3, [pc, #348]	@ (8001664 <updateUserTimer+0xe10>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	4b56      	ldr	r3, [pc, #344]	@ (8001668 <updateUserTimer+0xe14>)
 800150e:	5c9b      	ldrb	r3, [r3, r2]
 8001510:	73fb      	strb	r3, [r7, #15]
				lcd_put_cur(1, 8);
 8001512:	2108      	movs	r1, #8
 8001514:	2001      	movs	r0, #1
 8001516:	f7fe fecc 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[maxIndex3], timeStr4);
 800151a:	4b52      	ldr	r3, [pc, #328]	@ (8001664 <updateUserTimer+0xe10>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	4b51      	ldr	r3, [pc, #324]	@ (8001668 <updateUserTimer+0xe14>)
 8001522:	5c9b      	ldrb	r3, [r3, r2]
 8001524:	4954      	ldr	r1, [pc, #336]	@ (8001678 <updateUserTimer+0xe24>)
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f94c 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr4);
 800152c:	4852      	ldr	r0, [pc, #328]	@ (8001678 <updateUserTimer+0xe24>)
 800152e:	f7fe ff1c 	bl	800036a <lcd_send_string>
				arrCourseTime3[maxIndex3] --;
 8001532:	4b4c      	ldr	r3, [pc, #304]	@ (8001664 <updateUserTimer+0xe10>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	4a4c      	ldr	r2, [pc, #304]	@ (8001668 <updateUserTimer+0xe14>)
 8001538:	5cd2      	ldrb	r2, [r2, r3]
 800153a:	3a01      	subs	r2, #1
 800153c:	b2d1      	uxtb	r1, r2
 800153e:	4a4a      	ldr	r2, [pc, #296]	@ (8001668 <updateUserTimer+0xe14>)
 8001540:	54d1      	strb	r1, [r2, r3]
			}
			if (temp <= arrCourseTime3[0] && arrCourseTime3[0] > 0)
 8001542:	4b49      	ldr	r3, [pc, #292]	@ (8001668 <updateUserTimer+0xe14>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	429a      	cmp	r2, r3
 800154a:	d816      	bhi.n	800157a <updateUserTimer+0xd26>
 800154c:	4b46      	ldr	r3, [pc, #280]	@ (8001668 <updateUserTimer+0xe14>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d012      	beq.n	800157a <updateUserTimer+0xd26>
			{
				lcd_put_cur(0, 0);
 8001554:	2100      	movs	r1, #0
 8001556:	2000      	movs	r0, #0
 8001558:	f7fe feab 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[0], timeStr1);
 800155c:	4b42      	ldr	r3, [pc, #264]	@ (8001668 <updateUserTimer+0xe14>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4943      	ldr	r1, [pc, #268]	@ (8001670 <updateUserTimer+0xe1c>)
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f92e 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr1);
 8001568:	4841      	ldr	r0, [pc, #260]	@ (8001670 <updateUserTimer+0xe1c>)
 800156a:	f7fe fefe 	bl	800036a <lcd_send_string>
				arrCourseTime3[0] --;
 800156e:	4b3e      	ldr	r3, [pc, #248]	@ (8001668 <updateUserTimer+0xe14>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	3b01      	subs	r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4b3c      	ldr	r3, [pc, #240]	@ (8001668 <updateUserTimer+0xe14>)
 8001578:	701a      	strb	r2, [r3, #0]
			}
			if (temp <= arrCourseTime3[1] && arrCourseTime3[1] > 0)
 800157a:	4b3b      	ldr	r3, [pc, #236]	@ (8001668 <updateUserTimer+0xe14>)
 800157c:	785b      	ldrb	r3, [r3, #1]
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	429a      	cmp	r2, r3
 8001582:	d816      	bhi.n	80015b2 <updateUserTimer+0xd5e>
 8001584:	4b38      	ldr	r3, [pc, #224]	@ (8001668 <updateUserTimer+0xe14>)
 8001586:	785b      	ldrb	r3, [r3, #1]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d012      	beq.n	80015b2 <updateUserTimer+0xd5e>
			{
				lcd_put_cur(0, 8);
 800158c:	2108      	movs	r1, #8
 800158e:	2000      	movs	r0, #0
 8001590:	f7fe fe8f 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[1], timeStr2);
 8001594:	4b34      	ldr	r3, [pc, #208]	@ (8001668 <updateUserTimer+0xe14>)
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	4936      	ldr	r1, [pc, #216]	@ (8001674 <updateUserTimer+0xe20>)
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f912 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr2);
 80015a0:	4834      	ldr	r0, [pc, #208]	@ (8001674 <updateUserTimer+0xe20>)
 80015a2:	f7fe fee2 	bl	800036a <lcd_send_string>
				arrCourseTime3[1] --;
 80015a6:	4b30      	ldr	r3, [pc, #192]	@ (8001668 <updateUserTimer+0xe14>)
 80015a8:	785b      	ldrb	r3, [r3, #1]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001668 <updateUserTimer+0xe14>)
 80015b0:	705a      	strb	r2, [r3, #1]
			}
			if (temp <= arrCourseTime3[2] && arrCourseTime3[2] > 0)
 80015b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <updateUserTimer+0xe14>)
 80015b4:	789b      	ldrb	r3, [r3, #2]
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d81d      	bhi.n	80015f8 <updateUserTimer+0xda4>
 80015bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <updateUserTimer+0xe14>)
 80015be:	789b      	ldrb	r3, [r3, #2]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d019      	beq.n	80015f8 <updateUserTimer+0xda4>
			{
				lcd_put_cur(1, 0);
 80015c4:	2100      	movs	r1, #0
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7fe fe73 	bl	80002b2 <lcd_put_cur>
				formatTime(arrCourseTime3[2], timeStr3);
 80015cc:	4b26      	ldr	r3, [pc, #152]	@ (8001668 <updateUserTimer+0xe14>)
 80015ce:	789b      	ldrb	r3, [r3, #2]
 80015d0:	4926      	ldr	r1, [pc, #152]	@ (800166c <updateUserTimer+0xe18>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f8f6 	bl	80017c4 <formatTime>
				lcd_send_string(timeStr3);
 80015d8:	4824      	ldr	r0, [pc, #144]	@ (800166c <updateUserTimer+0xe18>)
 80015da:	f7fe fec6 	bl	800036a <lcd_send_string>
				arrCourseTime3[2] --;
 80015de:	4b22      	ldr	r3, [pc, #136]	@ (8001668 <updateUserTimer+0xe14>)
 80015e0:	789b      	ldrb	r3, [r3, #2]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b20      	ldr	r3, [pc, #128]	@ (8001668 <updateUserTimer+0xe14>)
 80015e8:	709a      	strb	r2, [r3, #2]
			}
			break;
 80015ea:	e005      	b.n	80015f8 <updateUserTimer+0xda4>
			break;
 80015ec:	bf00      	nop
 80015ee:	e004      	b.n	80015fa <updateUserTimer+0xda6>
			break;
 80015f0:	bf00      	nop
 80015f2:	e002      	b.n	80015fa <updateUserTimer+0xda6>
			break;
 80015f4:	bf00      	nop
 80015f6:	e000      	b.n	80015fa <updateUserTimer+0xda6>
			break;
 80015f8:	bf00      	nop
		}
		if (arrCourseTime3[0] == 0 && arrCourseTime3[1] == 0 && arrCourseTime3[2] == 0 && arrCourseTime3[3] == 0)
 80015fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <updateUserTimer+0xe14>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 80c4 	bne.w	800178c <updateUserTimer+0xf38>
 8001604:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <updateUserTimer+0xe14>)
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	2b00      	cmp	r3, #0
 800160a:	f040 80bf 	bne.w	800178c <updateUserTimer+0xf38>
 800160e:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <updateUserTimer+0xe14>)
 8001610:	789b      	ldrb	r3, [r3, #2]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 80ba 	bne.w	800178c <updateUserTimer+0xf38>
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <updateUserTimer+0xe14>)
 800161a:	78db      	ldrb	r3, [r3, #3]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 80b5 	bne.w	800178c <updateUserTimer+0xf38>
		{
			lcd_clear();
 8001622:	f7fe fe2f 	bl	8000284 <lcd_clear>
			lcd_put_cur(0, 0);
 8001626:	2100      	movs	r1, #0
 8001628:	2000      	movs	r0, #0
 800162a:	f7fe fe42 	bl	80002b2 <lcd_put_cur>
			lcd_send_string("Course Finish!");
 800162e:	4813      	ldr	r0, [pc, #76]	@ (800167c <updateUserTimer+0xe28>)
 8001630:	f7fe fe9b 	bl	800036a <lcd_send_string>
			buzzerSig = true;
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <updateUserTimer+0xe2c>)
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(lcdSem);
 800163a:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <updateUserTimer+0xe30>)
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	2300      	movs	r3, #0
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	f004 fcb2 	bl	8005fac <xQueueGenericSend>
			UART_Print("S/W Timer lcdSem Give!\r\n");
 8001648:	480f      	ldr	r0, [pc, #60]	@ (8001688 <updateUserTimer+0xe34>)
 800164a:	f7ff f867 	bl	800071c <UART_Print>
			xTimerStop(userTimerHandler, 0);
 800164e:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <updateUserTimer+0xe38>)
 8001650:	6818      	ldr	r0, [r3, #0]
 8001652:	2300      	movs	r3, #0
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	2200      	movs	r2, #0
 800165a:	2103      	movs	r1, #3
 800165c:	f006 fb5e 	bl	8007d1c <xTimerGenericCommand>
		}
		break;
 8001660:	e094      	b.n	800178c <updateUserTimer+0xf38>
 8001662:	bf00      	nop
 8001664:	20000943 	.word	0x20000943
 8001668:	2000093c 	.word	0x2000093c
 800166c:	20000920 	.word	0x20000920
 8001670:	20000910 	.word	0x20000910
 8001674:	20000918 	.word	0x20000918
 8001678:	20000928 	.word	0x20000928
 800167c:	08009510 	.word	0x08009510
 8001680:	20000962 	.word	0x20000962
 8001684:	200008cc 	.word	0x200008cc
 8001688:	08009520 	.word	0x08009520
 800168c:	200008d0 	.word	0x200008d0
	default :
		//UART_Print("Appetizer or Desert Course Timer Start!\r\n");
		lcd_clear();
 8001690:	f7fe fdf8 	bl	8000284 <lcd_clear>
		lcd_put_cur(0, 0);
 8001694:	2100      	movs	r1, #0
 8001696:	2000      	movs	r0, #0
 8001698:	f7fe fe0b 	bl	80002b2 <lcd_put_cur>
		formatTime(arrCourseTime[0], timeStr1);
 800169c:	4b3f      	ldr	r3, [pc, #252]	@ (800179c <updateUserTimer+0xf48>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	493f      	ldr	r1, [pc, #252]	@ (80017a0 <updateUserTimer+0xf4c>)
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f88e 	bl	80017c4 <formatTime>
		lcd_send_string(timeStr1);
 80016a8:	483d      	ldr	r0, [pc, #244]	@ (80017a0 <updateUserTimer+0xf4c>)
 80016aa:	f7fe fe5e 	bl	800036a <lcd_send_string>
		lcd_put_cur(0, 8);
 80016ae:	2108      	movs	r1, #8
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7fe fdfe 	bl	80002b2 <lcd_put_cur>
		formatTime(arrCourseTime[1], timeStr2);
 80016b6:	4b39      	ldr	r3, [pc, #228]	@ (800179c <updateUserTimer+0xf48>)
 80016b8:	785b      	ldrb	r3, [r3, #1]
 80016ba:	493a      	ldr	r1, [pc, #232]	@ (80017a4 <updateUserTimer+0xf50>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f881 	bl	80017c4 <formatTime>
		lcd_send_string(timeStr2);
 80016c2:	4838      	ldr	r0, [pc, #224]	@ (80017a4 <updateUserTimer+0xf50>)
 80016c4:	f7fe fe51 	bl	800036a <lcd_send_string>
		lcd_put_cur(1, 0);
 80016c8:	2100      	movs	r1, #0
 80016ca:	2001      	movs	r0, #1
 80016cc:	f7fe fdf1 	bl	80002b2 <lcd_put_cur>
		formatTime(arrCourseTime[2], timeStr3);
 80016d0:	4b32      	ldr	r3, [pc, #200]	@ (800179c <updateUserTimer+0xf48>)
 80016d2:	789b      	ldrb	r3, [r3, #2]
 80016d4:	4934      	ldr	r1, [pc, #208]	@ (80017a8 <updateUserTimer+0xf54>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f874 	bl	80017c4 <formatTime>
		lcd_send_string(timeStr3);
 80016dc:	4832      	ldr	r0, [pc, #200]	@ (80017a8 <updateUserTimer+0xf54>)
 80016de:	f7fe fe44 	bl	800036a <lcd_send_string>
		lcd_put_cur(1, 8);
 80016e2:	2108      	movs	r1, #8
 80016e4:	2001      	movs	r0, #1
 80016e6:	f7fe fde4 	bl	80002b2 <lcd_put_cur>
		formatTime(arrCourseTime[3], timeStr4);
 80016ea:	4b2c      	ldr	r3, [pc, #176]	@ (800179c <updateUserTimer+0xf48>)
 80016ec:	78db      	ldrb	r3, [r3, #3]
 80016ee:	492f      	ldr	r1, [pc, #188]	@ (80017ac <updateUserTimer+0xf58>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 f867 	bl	80017c4 <formatTime>
		lcd_send_string(timeStr4);
 80016f6:	482d      	ldr	r0, [pc, #180]	@ (80017ac <updateUserTimer+0xf58>)
 80016f8:	f7fe fe37 	bl	800036a <lcd_send_string>
		for (int i = 0; i < 4; i ++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	e00d      	b.n	800171e <updateUserTimer+0xeca>
			arrCourseTime[i]--;
 8001702:	4a26      	ldr	r2, [pc, #152]	@ (800179c <updateUserTimer+0xf48>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	3b01      	subs	r3, #1
 800170c:	b2d9      	uxtb	r1, r3
 800170e:	4a23      	ldr	r2, [pc, #140]	@ (800179c <updateUserTimer+0xf48>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4413      	add	r3, r2
 8001714:	460a      	mov	r2, r1
 8001716:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i ++)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	3301      	adds	r3, #1
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b03      	cmp	r3, #3
 8001722:	ddee      	ble.n	8001702 <updateUserTimer+0xeae>
		if (arrCourseTime[0] == 0 && arrCourseTime[1] == 0 && arrCourseTime[2] == 0 && arrCourseTime[3] == 0)
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <updateUserTimer+0xf48>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d131      	bne.n	8001790 <updateUserTimer+0xf3c>
 800172c:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <updateUserTimer+0xf48>)
 800172e:	785b      	ldrb	r3, [r3, #1]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d12d      	bne.n	8001790 <updateUserTimer+0xf3c>
 8001734:	4b19      	ldr	r3, [pc, #100]	@ (800179c <updateUserTimer+0xf48>)
 8001736:	789b      	ldrb	r3, [r3, #2]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d129      	bne.n	8001790 <updateUserTimer+0xf3c>
 800173c:	4b17      	ldr	r3, [pc, #92]	@ (800179c <updateUserTimer+0xf48>)
 800173e:	78db      	ldrb	r3, [r3, #3]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d125      	bne.n	8001790 <updateUserTimer+0xf3c>
		{
			lcd_clear();
 8001744:	f7fe fd9e 	bl	8000284 <lcd_clear>
			lcd_put_cur(0, 0);
 8001748:	2100      	movs	r1, #0
 800174a:	2000      	movs	r0, #0
 800174c:	f7fe fdb1 	bl	80002b2 <lcd_put_cur>
			lcd_send_string("Course Finish!");
 8001750:	4817      	ldr	r0, [pc, #92]	@ (80017b0 <updateUserTimer+0xf5c>)
 8001752:	f7fe fe0a 	bl	800036a <lcd_send_string>
			buzzerSig = true;
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <updateUserTimer+0xf60>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(lcdSem);
 800175c:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <updateUserTimer+0xf64>)
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	2300      	movs	r3, #0
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	f004 fc21 	bl	8005fac <xQueueGenericSend>
			UART_Print("S/W Timer lcdSem Give!\r\n");
 800176a:	4814      	ldr	r0, [pc, #80]	@ (80017bc <updateUserTimer+0xf68>)
 800176c:	f7fe ffd6 	bl	800071c <UART_Print>
			xTimerStop(userTimerHandler, 0);
 8001770:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <updateUserTimer+0xf6c>)
 8001772:	6818      	ldr	r0, [r3, #0]
 8001774:	2300      	movs	r3, #0
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2300      	movs	r3, #0
 800177a:	2200      	movs	r2, #0
 800177c:	2103      	movs	r1, #3
 800177e:	f006 facd 	bl	8007d1c <xTimerGenericCommand>
		}
		break;
 8001782:	e005      	b.n	8001790 <updateUserTimer+0xf3c>
		break;
 8001784:	bf00      	nop
 8001786:	e004      	b.n	8001792 <updateUserTimer+0xf3e>
		break;
 8001788:	bf00      	nop
 800178a:	e002      	b.n	8001792 <updateUserTimer+0xf3e>
		break;
 800178c:	bf00      	nop
 800178e:	e000      	b.n	8001792 <updateUserTimer+0xf3e>
		break;
 8001790:	bf00      	nop
	}
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000930 	.word	0x20000930
 80017a0:	20000910 	.word	0x20000910
 80017a4:	20000918 	.word	0x20000918
 80017a8:	20000920 	.word	0x20000920
 80017ac:	20000928 	.word	0x20000928
 80017b0:	08009510 	.word	0x08009510
 80017b4:	20000962 	.word	0x20000962
 80017b8:	200008cc 	.word	0x200008cc
 80017bc:	08009520 	.word	0x08009520
 80017c0:	200008d0 	.word	0x200008d0

080017c4 <formatTime>:

void formatTime(uint8_t time, char* str)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
	uint8_t minutes = (time / 60);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4a08      	ldr	r2, [pc, #32]	@ (80017f4 <formatTime+0x30>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	73fb      	strb	r3, [r7, #15]
	uint8_t seconds = (time / 1);
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	73bb      	strb	r3, [r7, #14]
	sprintf(str, "%02d:%02d", minutes, seconds);
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	7bbb      	ldrb	r3, [r7, #14]
 80017e4:	4904      	ldr	r1, [pc, #16]	@ (80017f8 <formatTime+0x34>)
 80017e6:	6838      	ldr	r0, [r7, #0]
 80017e8:	f007 f966 	bl	8008ab8 <siprintf>
}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	88888889 	.word	0x88888889
 80017f8:	0800953c 	.word	0x0800953c

080017fc <findMaxIndex>:

uint8_t findMaxIndex(uint8_t arr[], uint8_t size)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
    uint8_t maxIndex = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]
    for (int i = 1; i < size; i++)
 800180c:	2301      	movs	r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	e00e      	b.n	8001830 <findMaxIndex+0x34>
    {
        if (arr[i] > arr[maxIndex])
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	781a      	ldrb	r2, [r3, #0]
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	440b      	add	r3, r1
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d901      	bls.n	800182a <findMaxIndex+0x2e>
            maxIndex = i;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	73fb      	strb	r3, [r7, #15]
    for (int i = 1; i < size; i++)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	3301      	adds	r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	429a      	cmp	r2, r3
 8001836:	dbec      	blt.n	8001812 <findMaxIndex+0x16>
    }
    return maxIndex;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	if (hspi -> Instance == SPI1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a1d      	ldr	r2, [pc, #116]	@ (80018c8 <HAL_SPI_RxCpltCallback+0x84>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d133      	bne.n	80018be <HAL_SPI_RxCpltCallback+0x7a>
	{
		startSig = true;
 8001856:	4b1d      	ldr	r3, [pc, #116]	@ (80018cc <HAL_SPI_RxCpltCallback+0x88>)
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
		lcdState = true;
 800185c:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <HAL_SPI_RxCpltCallback+0x8c>)
 800185e:	2201      	movs	r2, #1
 8001860:	701a      	strb	r2, [r3, #0]
		//UART_Print("SPI rxBuffer Received!\r\n");
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
		for (int i = 0; i < 5; i ++)
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e00d      	b.n	8001888 <HAL_SPI_RxCpltCallback+0x44>
			rxBuffer[i] = rxBuffer[i] - '0';
 800186c:	4a19      	ldr	r2, [pc, #100]	@ (80018d4 <HAL_SPI_RxCpltCallback+0x90>)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	3b30      	subs	r3, #48	@ 0x30
 8001876:	b2d9      	uxtb	r1, r3
 8001878:	4a16      	ldr	r2, [pc, #88]	@ (80018d4 <HAL_SPI_RxCpltCallback+0x90>)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4413      	add	r3, r2
 800187e:	460a      	mov	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 5; i ++)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3301      	adds	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b04      	cmp	r3, #4
 800188c:	ddee      	ble.n	800186c <HAL_SPI_RxCpltCallback+0x28>
		HAL_SPI_Receive_IT(&hspi1, rxBuffer, sizeof(rxBuffer));
 800188e:	2205      	movs	r2, #5
 8001890:	4910      	ldr	r1, [pc, #64]	@ (80018d4 <HAL_SPI_RxCpltCallback+0x90>)
 8001892:	4811      	ldr	r0, [pc, #68]	@ (80018d8 <HAL_SPI_RxCpltCallback+0x94>)
 8001894:	f003 f842 	bl	800491c <HAL_SPI_Receive_IT>
		xSemaphoreGiveFromISR(spiSem, &xHigherPriorityTaskWoken);
 8001898:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <HAL_SPI_RxCpltCallback+0x98>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f107 0208 	add.w	r2, r7, #8
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f004 fd22 	bl	80062ec <xQueueGiveFromISR>
		//UART_Print("SPI_ISR spiSem Give!\r\n");
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_SPI_RxCpltCallback+0x7a>
 80018ae:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <HAL_SPI_RxCpltCallback+0x9c>)
 80018b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	f3bf 8f4f 	dsb	sy
 80018ba:	f3bf 8f6f 	isb	sy
	}
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40013000 	.word	0x40013000
 80018cc:	2000090d 	.word	0x2000090d
 80018d0:	20000963 	.word	0x20000963
 80018d4:	20000908 	.word	0x20000908
 80018d8:	20000814 	.word	0x20000814
 80018dc:	200008c4 	.word	0x200008c4
 80018e0:	e000ed04 	.word	0xe000ed04

080018e4 <copyTask>:

void copyTask(void *argument)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// UART_Print("copyTask excution!\r\n");
		if(xSemaphoreTake(spiSem, portMAX_DELAY) == pdTRUE)
 80018ec:	4b39      	ldr	r3, [pc, #228]	@ (80019d4 <copyTask+0xf0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018f4:	4618      	mov	r0, r3
 80018f6:	f004 fe6b 	bl	80065d0 <xQueueSemaphoreTake>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d163      	bne.n	80019c8 <copyTask+0xe4>
		{
			//UART_Print("copyTask spiSem Take!\r\n");
			memcpy(&whatCourse, &rxBuffer[0], sizeof(rxBuffer[0]));
 8001900:	4b35      	ldr	r3, [pc, #212]	@ (80019d8 <copyTask+0xf4>)
 8001902:	781a      	ldrb	r2, [r3, #0]
 8001904:	4b35      	ldr	r3, [pc, #212]	@ (80019dc <copyTask+0xf8>)
 8001906:	701a      	strb	r2, [r3, #0]
			switch (whatCourse)
 8001908:	4b34      	ldr	r3, [pc, #208]	@ (80019dc <copyTask+0xf8>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d03a      	beq.n	8001986 <copyTask+0xa2>
 8001910:	2b03      	cmp	r3, #3
 8001912:	dc52      	bgt.n	80019ba <copyTask+0xd6>
 8001914:	2b01      	cmp	r3, #1
 8001916:	d002      	beq.n	800191e <copyTask+0x3a>
 8001918:	2b02      	cmp	r3, #2
 800191a:	d01a      	beq.n	8001952 <copyTask+0x6e>
 800191c:	e04d      	b.n	80019ba <copyTask+0xd6>
				{
				case 1 :
					for (int i = 0; i < 4; i ++)
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e012      	b.n	800194a <copyTask+0x66>
						memcpy(&userData[i].changeCourse[0], &rxBuffer[i + 1], 1);
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	3308      	adds	r3, #8
 8001932:	4a2b      	ldr	r2, [pc, #172]	@ (80019e0 <copyTask+0xfc>)
 8001934:	4413      	add	r3, r2
 8001936:	3302      	adds	r3, #2
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	3201      	adds	r2, #1
 800193c:	4926      	ldr	r1, [pc, #152]	@ (80019d8 <copyTask+0xf4>)
 800193e:	440a      	add	r2, r1
 8001940:	7812      	ldrb	r2, [r2, #0]
 8001942:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 4; i ++)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3301      	adds	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b03      	cmp	r3, #3
 800194e:	dde9      	ble.n	8001924 <copyTask+0x40>
					break;
 8001950:	e033      	b.n	80019ba <copyTask+0xd6>
				case 2 :
					for (int i = 0; i < 4; i ++)
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	e012      	b.n	800197e <copyTask+0x9a>
						memcpy(&userData[i].changeCourse[1], &rxBuffer[i + 1], 1);
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	3309      	adds	r3, #9
 8001966:	4a1e      	ldr	r2, [pc, #120]	@ (80019e0 <copyTask+0xfc>)
 8001968:	4413      	add	r3, r2
 800196a:	3302      	adds	r3, #2
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	3201      	adds	r2, #1
 8001970:	4919      	ldr	r1, [pc, #100]	@ (80019d8 <copyTask+0xf4>)
 8001972:	440a      	add	r2, r1
 8001974:	7812      	ldrb	r2, [r2, #0]
 8001976:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 4; i ++)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	3301      	adds	r3, #1
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b03      	cmp	r3, #3
 8001982:	dde9      	ble.n	8001958 <copyTask+0x74>
					break;
 8001984:	e019      	b.n	80019ba <copyTask+0xd6>
				case 3 :
					for (int i = 0; i < 4; i ++)
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e012      	b.n	80019b2 <copyTask+0xce>
						memcpy(&userData[i].changeCourse[2], &rxBuffer[i + 1], 1);
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	330a      	adds	r3, #10
 800199a:	4a11      	ldr	r2, [pc, #68]	@ (80019e0 <copyTask+0xfc>)
 800199c:	4413      	add	r3, r2
 800199e:	3302      	adds	r3, #2
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	3201      	adds	r2, #1
 80019a4:	490c      	ldr	r1, [pc, #48]	@ (80019d8 <copyTask+0xf4>)
 80019a6:	440a      	add	r2, r1
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 4; i ++)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3301      	adds	r3, #1
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	dde9      	ble.n	800198c <copyTask+0xa8>
					break;
 80019b8:	bf00      	nop
				}
			xSemaphoreGive(cookSem);
 80019ba:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <copyTask+0x100>)
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	2300      	movs	r3, #0
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	f004 faf2 	bl	8005fac <xQueueGenericSend>
			//UART_Print("copyTask cookSem Give!\r\n");
		}
		vTaskDelay(500);
 80019c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019cc:	f005 fa44 	bl	8006e58 <vTaskDelay>
		if(xSemaphoreTake(spiSem, portMAX_DELAY) == pdTRUE)
 80019d0:	e78c      	b.n	80018ec <copyTask+0x8>
 80019d2:	bf00      	nop
 80019d4:	200008c4 	.word	0x200008c4
 80019d8:	20000908 	.word	0x20000908
 80019dc:	2000090e 	.word	0x2000090e
 80019e0:	200008d4 	.word	0x200008d4
 80019e4:	200008c8 	.word	0x200008c8

080019e8 <cookTask>:
	}
}

void cookTask(void *argument)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	@ 0x30
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if (startSig)
 80019f0:	4bb1      	ldr	r3, [pc, #708]	@ (8001cb8 <cookTask+0x2d0>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 82d0 	beq.w	8001f9c <cookTask+0x5b4>
		{
			// UART_Print("cookTask (startSig == true)\r\n");
			if (xSemaphoreTake(cookSem, portMAX_DELAY) == pdTRUE)
 80019fc:	4baf      	ldr	r3, [pc, #700]	@ (8001cbc <cookTask+0x2d4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a04:	4618      	mov	r0, r3
 8001a06:	f004 fde3 	bl	80065d0 <xQueueSemaphoreTake>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	f040 82c5 	bne.w	8001f9c <cookTask+0x5b4>
			{
				switch (whatCourse)
 8001a12:	4bab      	ldr	r3, [pc, #684]	@ (8001cc0 <cookTask+0x2d8>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	f200 82c0 	bhi.w	8001f9c <cookTask+0x5b4>
 8001a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a24 <cookTask+0x3c>)
 8001a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a22:	bf00      	nop
 8001a24:	08001a39 	.word	0x08001a39
 8001a28:	08001a95 	.word	0x08001a95
 8001a2c:	08001c2f 	.word	0x08001c2f
 8001a30:	08001ddb 	.word	0x08001ddb
 8001a34:	08001f47 	.word	0x08001f47
				{
				case 0 :
					for (int i = 0; i < 6; i ++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a3c:	e00d      	b.n	8001a5a <cookTask+0x72>
						remainingStuff[i] --;
 8001a3e:	4aa1      	ldr	r2, [pc, #644]	@ (8001cc4 <cookTask+0x2dc>)
 8001a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a42:	4413      	add	r3, r2
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b2d9      	uxtb	r1, r3
 8001a4a:	4a9e      	ldr	r2, [pc, #632]	@ (8001cc4 <cookTask+0x2dc>)
 8001a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a4e:	4413      	add	r3, r2
 8001a50:	460a      	mov	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 6; i ++)
 8001a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a56:	3301      	adds	r3, #1
 8001a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	ddee      	ble.n	8001a3e <cookTask+0x56>
					printRemainingStuff(Seaweed);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f001 f8e3 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Potato);
 8001a66:	2001      	movs	r0, #1
 8001a68:	f001 f8e0 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(SalmonRoe);
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f001 f8dd 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Deodeok);
 8001a72:	2003      	movs	r0, #3
 8001a74:	f001 f8da 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Radish);
 8001a78:	2004      	movs	r0, #4
 8001a7a:	f001 f8d7 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(RedCabbage);
 8001a7e:	2005      	movs	r0, #5
 8001a80:	f001 f8d4 	bl	8002c2c <printRemainingStuff>
					xSemaphoreGive(lcdSem);
 8001a84:	4b90      	ldr	r3, [pc, #576]	@ (8001cc8 <cookTask+0x2e0>)
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	f004 fa8d 	bl	8005fac <xQueueGenericSend>
					//UART_Print("cookTask lcdSem Give(whatCourse == 0)!\r\n");
				break;
 8001a92:	e283      	b.n	8001f9c <cookTask+0x5b4>
				case 1 :
					for (int i = 0; i < 4; i ++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a98:	e0a5      	b.n	8001be6 <cookTask+0x1fe>
					{
						userData[i].courseData[1][0] += userData[i].changeCourse[0];
 8001a9a:	498c      	ldr	r1, [pc, #560]	@ (8001ccc <cookTask+0x2e4>)
 8001a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3302      	adds	r3, #2
 8001aac:	7819      	ldrb	r1, [r3, #0]
 8001aae:	4887      	ldr	r0, [pc, #540]	@ (8001ccc <cookTask+0x2e4>)
 8001ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	4403      	add	r3, r0
 8001abe:	330a      	adds	r3, #10
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	440b      	add	r3, r1
 8001ac4:	b2d8      	uxtb	r0, r3
 8001ac6:	4981      	ldr	r1, [pc, #516]	@ (8001ccc <cookTask+0x2e4>)
 8001ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	4602      	mov	r2, r0
 8001ada:	701a      	strb	r2, [r3, #0]
						if (userData[i].courseData[1][0] == AlmondWithCavior)
 8001adc:	497b      	ldr	r1, [pc, #492]	@ (8001ccc <cookTask+0x2e4>)
 8001ade:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	3302      	adds	r3, #2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	d114      	bne.n	8001b1e <cookTask+0x136>
						{
							for (int j = 6; j < 10; j ++)
 8001af4:	2306      	movs	r3, #6
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af8:	e00d      	b.n	8001b16 <cookTask+0x12e>
								remainingStuff[j] --;
 8001afa:	4a72      	ldr	r2, [pc, #456]	@ (8001cc4 <cookTask+0x2dc>)
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	4413      	add	r3, r2
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b2d9      	uxtb	r1, r3
 8001b06:	4a6f      	ldr	r2, [pc, #444]	@ (8001cc4 <cookTask+0x2dc>)
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	4413      	add	r3, r2
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	701a      	strb	r2, [r3, #0]
							for (int j = 6; j < 10; j ++)
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	3301      	adds	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	2b09      	cmp	r3, #9
 8001b1a:	ddee      	ble.n	8001afa <cookTask+0x112>
 8001b1c:	e060      	b.n	8001be0 <cookTask+0x1f8>
						}
						else if (userData[i].courseData[1][0] == SnowCrabAndPickledChrysanthemum)
 8001b1e:	496b      	ldr	r1, [pc, #428]	@ (8001ccc <cookTask+0x2e4>)
 8001b20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3302      	adds	r3, #2
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b21      	cmp	r3, #33	@ 0x21
 8001b34:	d12b      	bne.n	8001b8e <cookTask+0x1a6>
						{
							userData[i].courseData[1][1] += 2;
 8001b36:	4965      	ldr	r1, [pc, #404]	@ (8001ccc <cookTask+0x2e4>)
 8001b38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	3303      	adds	r3, #3
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	b2d8      	uxtb	r0, r3
 8001b4e:	495f      	ldr	r1, [pc, #380]	@ (8001ccc <cookTask+0x2e4>)
 8001b50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b52:	4613      	mov	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3303      	adds	r3, #3
 8001b60:	4602      	mov	r2, r0
 8001b62:	701a      	strb	r2, [r3, #0]
							for (int k = 10; k < 13; k ++)
 8001b64:	230a      	movs	r3, #10
 8001b66:	623b      	str	r3, [r7, #32]
 8001b68:	e00d      	b.n	8001b86 <cookTask+0x19e>
								remainingStuff[k] --;
 8001b6a:	4a56      	ldr	r2, [pc, #344]	@ (8001cc4 <cookTask+0x2dc>)
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	4413      	add	r3, r2
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b2d9      	uxtb	r1, r3
 8001b76:	4a53      	ldr	r2, [pc, #332]	@ (8001cc4 <cookTask+0x2dc>)
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	701a      	strb	r2, [r3, #0]
							for (int k = 10; k < 13; k ++)
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	3301      	adds	r3, #1
 8001b84:	623b      	str	r3, [r7, #32]
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	2b0c      	cmp	r3, #12
 8001b8a:	ddee      	ble.n	8001b6a <cookTask+0x182>
 8001b8c:	e028      	b.n	8001be0 <cookTask+0x1f8>
						}
						else if (userData[i].courseData[1][0] == AblaloneTaco)
 8001b8e:	494f      	ldr	r1, [pc, #316]	@ (8001ccc <cookTask+0x2e4>)
 8001b90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b22      	cmp	r3, #34	@ 0x22
 8001ba4:	d11c      	bne.n	8001be0 <cookTask+0x1f8>
						{
							userData[i].courseData[1][1] -= 2;
 8001ba6:	4949      	ldr	r1, [pc, #292]	@ (8001ccc <cookTask+0x2e4>)
 8001ba8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3303      	adds	r3, #3
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	3b02      	subs	r3, #2
 8001bbc:	b2d8      	uxtb	r0, r3
 8001bbe:	4943      	ldr	r1, [pc, #268]	@ (8001ccc <cookTask+0x2e4>)
 8001bc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	3303      	adds	r3, #3
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	701a      	strb	r2, [r3, #0]
							remainingStuff[13] --;
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc4 <cookTask+0x2dc>)
 8001bd6:	7b5b      	ldrb	r3, [r3, #13]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	4b39      	ldr	r3, [pc, #228]	@ (8001cc4 <cookTask+0x2dc>)
 8001bde:	735a      	strb	r2, [r3, #13]
					for (int i = 0; i < 4; i ++)
 8001be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be2:	3301      	adds	r3, #1
 8001be4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	f77f af56 	ble.w	8001a9a <cookTask+0xb2>
						}
					}
					printRemainingStuff(Almond);
 8001bee:	2006      	movs	r0, #6
 8001bf0:	f001 f81c 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Cavior);
 8001bf4:	2007      	movs	r0, #7
 8001bf6:	f001 f819 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Tofu);
 8001bfa:	2008      	movs	r0, #8
 8001bfc:	f001 f816 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Egg);
 8001c00:	2009      	movs	r0, #9
 8001c02:	f001 f813 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Yuzu);
 8001c06:	200a      	movs	r0, #10
 8001c08:	f001 f810 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Snowcrab);
 8001c0c:	200b      	movs	r0, #11
 8001c0e:	f001 f80d 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Beansprouts);
 8001c12:	200c      	movs	r0, #12
 8001c14:	f001 f80a 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Ablalone);
 8001c18:	200d      	movs	r0, #13
 8001c1a:	f001 f807 	bl	8002c2c <printRemainingStuff>
					xSemaphoreGive(lcdSem);
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc8 <cookTask+0x2e0>)
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	f004 f9c0 	bl	8005fac <xQueueGenericSend>
					//UART_Print("cookTask lcdSem Give(whatCourse == 1)!\r\n");
					break;
 8001c2c:	e1b6      	b.n	8001f9c <cookTask+0x5b4>
				case 2 :
					for (int i = 0; i < 4; i ++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e0b1      	b.n	8001d98 <cookTask+0x3b0>
					{
						userData[i].courseData[2][0] += userData[i].changeCourse[1];
 8001c34:	4925      	ldr	r1, [pc, #148]	@ (8001ccc <cookTask+0x2e4>)
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	3304      	adds	r3, #4
 8001c46:	7819      	ldrb	r1, [r3, #0]
 8001c48:	4820      	ldr	r0, [pc, #128]	@ (8001ccc <cookTask+0x2e4>)
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	4403      	add	r3, r0
 8001c58:	330b      	adds	r3, #11
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	440b      	add	r3, r1
 8001c5e:	b2d8      	uxtb	r0, r3
 8001c60:	491a      	ldr	r1, [pc, #104]	@ (8001ccc <cookTask+0x2e4>)
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	3304      	adds	r3, #4
 8001c72:	4602      	mov	r2, r0
 8001c74:	701a      	strb	r2, [r3, #0]
						if (userData[i].courseData[2][0] == HearthOvenGrilledHanwoo)
 8001c76:	4915      	ldr	r1, [pc, #84]	@ (8001ccc <cookTask+0x2e4>)
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	3304      	adds	r3, #4
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b23      	cmp	r3, #35	@ 0x23
 8001c8c:	d120      	bne.n	8001cd0 <cookTask+0x2e8>
						{
							for(int j = 14; j < 17; j ++)
 8001c8e:	230e      	movs	r3, #14
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	e00d      	b.n	8001cb0 <cookTask+0x2c8>
								remainingStuff[j] --;
 8001c94:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc4 <cookTask+0x2dc>)
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	4413      	add	r3, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b2d9      	uxtb	r1, r3
 8001ca0:	4a08      	ldr	r2, [pc, #32]	@ (8001cc4 <cookTask+0x2dc>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	460a      	mov	r2, r1
 8001ca8:	701a      	strb	r2, [r3, #0]
							for(int j = 14; j < 17; j ++)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	3301      	adds	r3, #1
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2b10      	cmp	r3, #16
 8001cb4:	ddee      	ble.n	8001c94 <cookTask+0x2ac>
 8001cb6:	e06c      	b.n	8001d92 <cookTask+0x3aa>
 8001cb8:	2000090d 	.word	0x2000090d
 8001cbc:	200008c8 	.word	0x200008c8
 8001cc0:	2000090e 	.word	0x2000090e
 8001cc4:	20000944 	.word	0x20000944
 8001cc8:	200008cc 	.word	0x200008cc
 8001ccc:	200008d4 	.word	0x200008d4
						}
						else if (userData[i].courseData[2][0] == EmberToastedAcornNoodle)
 8001cd0:	49b5      	ldr	r1, [pc, #724]	@ (8001fa8 <cookTask+0x5c0>)
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b24      	cmp	r3, #36	@ 0x24
 8001ce6:	d12b      	bne.n	8001d40 <cookTask+0x358>
						{
							userData[i].courseData[2][1] -= 2;
 8001ce8:	49af      	ldr	r1, [pc, #700]	@ (8001fa8 <cookTask+0x5c0>)
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3305      	adds	r3, #5
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3b02      	subs	r3, #2
 8001cfe:	b2d8      	uxtb	r0, r3
 8001d00:	49a9      	ldr	r1, [pc, #676]	@ (8001fa8 <cookTask+0x5c0>)
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	3305      	adds	r3, #5
 8001d12:	4602      	mov	r2, r0
 8001d14:	701a      	strb	r2, [r3, #0]
							for (int k = 17; k < 20; k ++)
 8001d16:	2311      	movs	r3, #17
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	e00d      	b.n	8001d38 <cookTask+0x350>
								remainingStuff[k] --;
 8001d1c:	4aa3      	ldr	r2, [pc, #652]	@ (8001fac <cookTask+0x5c4>)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	4413      	add	r3, r2
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b2d9      	uxtb	r1, r3
 8001d28:	4aa0      	ldr	r2, [pc, #640]	@ (8001fac <cookTask+0x5c4>)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	460a      	mov	r2, r1
 8001d30:	701a      	strb	r2, [r3, #0]
							for (int k = 17; k < 20; k ++)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b13      	cmp	r3, #19
 8001d3c:	ddee      	ble.n	8001d1c <cookTask+0x334>
 8001d3e:	e028      	b.n	8001d92 <cookTask+0x3aa>
						}
						else if (userData[i].courseData[2][0] == BlackSesameSeaurchinNasturtium)
 8001d40:	4999      	ldr	r1, [pc, #612]	@ (8001fa8 <cookTask+0x5c0>)
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	440b      	add	r3, r1
 8001d50:	3304      	adds	r3, #4
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b25      	cmp	r3, #37	@ 0x25
 8001d56:	d11c      	bne.n	8001d92 <cookTask+0x3aa>
						{
							userData[i].courseData[2][1] -= 2;
 8001d58:	4993      	ldr	r1, [pc, #588]	@ (8001fa8 <cookTask+0x5c0>)
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	3305      	adds	r3, #5
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	3b02      	subs	r3, #2
 8001d6e:	b2d8      	uxtb	r0, r3
 8001d70:	498d      	ldr	r1, [pc, #564]	@ (8001fa8 <cookTask+0x5c0>)
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	440b      	add	r3, r1
 8001d80:	3305      	adds	r3, #5
 8001d82:	4602      	mov	r2, r0
 8001d84:	701a      	strb	r2, [r3, #0]
							remainingStuff[20] --;
 8001d86:	4b89      	ldr	r3, [pc, #548]	@ (8001fac <cookTask+0x5c4>)
 8001d88:	7d1b      	ldrb	r3, [r3, #20]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b87      	ldr	r3, [pc, #540]	@ (8001fac <cookTask+0x5c4>)
 8001d90:	751a      	strb	r2, [r3, #20]
					for (int i = 0; i < 4; i ++)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	f77f af4a 	ble.w	8001c34 <cookTask+0x24c>
						}
					}
					printRemainingStuff(KoreanBeef);
 8001da0:	200e      	movs	r0, #14
 8001da2:	f000 ff43 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Apple);
 8001da6:	200f      	movs	r0, #15
 8001da8:	f000 ff40 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Onion);
 8001dac:	2010      	movs	r0, #16
 8001dae:	f000 ff3d 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Acorn);
 8001db2:	2011      	movs	r0, #17
 8001db4:	f000 ff3a 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Truffle);
 8001db8:	2012      	movs	r0, #18
 8001dba:	f000 ff37 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Noddle);
 8001dbe:	2013      	movs	r0, #19
 8001dc0:	f000 ff34 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Sesame);
 8001dc4:	2014      	movs	r0, #20
 8001dc6:	f000 ff31 	bl	8002c2c <printRemainingStuff>
					xSemaphoreGive(lcdSem);
 8001dca:	4b79      	ldr	r3, [pc, #484]	@ (8001fb0 <cookTask+0x5c8>)
 8001dcc:	6818      	ldr	r0, [r3, #0]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	f004 f8ea 	bl	8005fac <xQueueGenericSend>
					//UART_Print("cookTask lcdSem Give(whatCourse == 2)!\r\n");
					break;
 8001dd8:	e0e0      	b.n	8001f9c <cookTask+0x5b4>
				case 3 :
					for (int i = 0; i < 4; i ++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	e097      	b.n	8001f10 <cookTask+0x528>
					{
						userData[i].courseData[3][0] += userData[i].changeCourse[2];
 8001de0:	4971      	ldr	r1, [pc, #452]	@ (8001fa8 <cookTask+0x5c0>)
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	3306      	adds	r3, #6
 8001df2:	7819      	ldrb	r1, [r3, #0]
 8001df4:	486c      	ldr	r0, [pc, #432]	@ (8001fa8 <cookTask+0x5c0>)
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	4403      	add	r3, r0
 8001e04:	330c      	adds	r3, #12
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	440b      	add	r3, r1
 8001e0a:	b2d8      	uxtb	r0, r3
 8001e0c:	4966      	ldr	r1, [pc, #408]	@ (8001fa8 <cookTask+0x5c0>)
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	3306      	adds	r3, #6
 8001e1e:	4602      	mov	r2, r0
 8001e20:	701a      	strb	r2, [r3, #0]
						if (userData[i].courseData[3][0] == BurdockTarteTatinWithSkinJuice)
 8001e22:	4961      	ldr	r1, [pc, #388]	@ (8001fa8 <cookTask+0x5c0>)
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4613      	mov	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	440b      	add	r3, r1
 8001e32:	3306      	adds	r3, #6
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b26      	cmp	r3, #38	@ 0x26
 8001e38:	d106      	bne.n	8001e48 <cookTask+0x460>
							remainingStuff[21] --;
 8001e3a:	4b5c      	ldr	r3, [pc, #368]	@ (8001fac <cookTask+0x5c4>)
 8001e3c:	7d5b      	ldrb	r3, [r3, #21]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b5a      	ldr	r3, [pc, #360]	@ (8001fac <cookTask+0x5c4>)
 8001e44:	755a      	strb	r2, [r3, #21]
 8001e46:	e060      	b.n	8001f0a <cookTask+0x522>
						else if (userData[i].courseData[3][0] == TilefishMustardBrassica)
 8001e48:	4957      	ldr	r1, [pc, #348]	@ (8001fa8 <cookTask+0x5c0>)
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	3306      	adds	r3, #6
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b27      	cmp	r3, #39	@ 0x27
 8001e5e:	d12b      	bne.n	8001eb8 <cookTask+0x4d0>
						{
							userData[i].courseData[3][1] += 2;
 8001e60:	4951      	ldr	r1, [pc, #324]	@ (8001fa8 <cookTask+0x5c0>)
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	3307      	adds	r3, #7
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	3302      	adds	r3, #2
 8001e76:	b2d8      	uxtb	r0, r3
 8001e78:	494b      	ldr	r1, [pc, #300]	@ (8001fa8 <cookTask+0x5c0>)
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	3307      	adds	r3, #7
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	701a      	strb	r2, [r3, #0]
							for (int j = 22; j < 25; j ++)
 8001e8e:	2316      	movs	r3, #22
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	e00d      	b.n	8001eb0 <cookTask+0x4c8>
								remainingStuff[j] --;
 8001e94:	4a45      	ldr	r2, [pc, #276]	@ (8001fac <cookTask+0x5c4>)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b2d9      	uxtb	r1, r3
 8001ea0:	4a42      	ldr	r2, [pc, #264]	@ (8001fac <cookTask+0x5c4>)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	460a      	mov	r2, r1
 8001ea8:	701a      	strb	r2, [r3, #0]
							for (int j = 22; j < 25; j ++)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3301      	adds	r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b18      	cmp	r3, #24
 8001eb4:	ddee      	ble.n	8001e94 <cookTask+0x4ac>
 8001eb6:	e028      	b.n	8001f0a <cookTask+0x522>
						}
						else if (userData[i].courseData[3][0] == fattyTuna)
 8001eb8:	493b      	ldr	r1, [pc, #236]	@ (8001fa8 <cookTask+0x5c0>)
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3306      	adds	r3, #6
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b28      	cmp	r3, #40	@ 0x28
 8001ece:	d11c      	bne.n	8001f0a <cookTask+0x522>
						{
							userData[i].courseData[3][1] -= 2;
 8001ed0:	4935      	ldr	r1, [pc, #212]	@ (8001fa8 <cookTask+0x5c0>)
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	3307      	adds	r3, #7
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	3b02      	subs	r3, #2
 8001ee6:	b2d8      	uxtb	r0, r3
 8001ee8:	492f      	ldr	r1, [pc, #188]	@ (8001fa8 <cookTask+0x5c0>)
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3307      	adds	r3, #7
 8001efa:	4602      	mov	r2, r0
 8001efc:	701a      	strb	r2, [r3, #0]
							remainingStuff[25] --;
 8001efe:	4b2b      	ldr	r3, [pc, #172]	@ (8001fac <cookTask+0x5c4>)
 8001f00:	7e5b      	ldrb	r3, [r3, #25]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4b29      	ldr	r3, [pc, #164]	@ (8001fac <cookTask+0x5c4>)
 8001f08:	765a      	strb	r2, [r3, #25]
					for (int i = 0; i < 4; i ++)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	f77f af64 	ble.w	8001de0 <cookTask+0x3f8>
						}
					}
					printRemainingStuff(Burdock);
 8001f18:	2015      	movs	r0, #21
 8001f1a:	f000 fe87 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Tilefish);
 8001f1e:	2016      	movs	r0, #22
 8001f20:	f000 fe84 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Mustard);
 8001f24:	2017      	movs	r0, #23
 8001f26:	f000 fe81 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Brassica);
 8001f2a:	2018      	movs	r0, #24
 8001f2c:	f000 fe7e 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Tuna);
 8001f30:	2019      	movs	r0, #25
 8001f32:	f000 fe7b 	bl	8002c2c <printRemainingStuff>
					xSemaphoreGive(lcdSem);
 8001f36:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb0 <cookTask+0x5c8>)
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	f004 f834 	bl	8005fac <xQueueGenericSend>
					//UART_Print("cookTask lcdSem Give(whatCourse == 3)!\r\n");
					break;
 8001f44:	e02a      	b.n	8001f9c <cookTask+0x5b4>
				case 4 :
					for (int i = 26; i < 30; i ++)
 8001f46:	231a      	movs	r3, #26
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	e00d      	b.n	8001f68 <cookTask+0x580>
						remainingStuff[i] --;
 8001f4c:	4a17      	ldr	r2, [pc, #92]	@ (8001fac <cookTask+0x5c4>)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	4413      	add	r3, r2
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b2d9      	uxtb	r1, r3
 8001f58:	4a14      	ldr	r2, [pc, #80]	@ (8001fac <cookTask+0x5c4>)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	460a      	mov	r2, r1
 8001f60:	701a      	strb	r2, [r3, #0]
					for (int i = 26; i < 30; i ++)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3301      	adds	r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b1d      	cmp	r3, #29
 8001f6c:	ddee      	ble.n	8001f4c <cookTask+0x564>
					printRemainingStuff(Tuna);
 8001f6e:	2019      	movs	r0, #25
 8001f70:	f000 fe5c 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Hibiscus);
 8001f74:	201a      	movs	r0, #26
 8001f76:	f000 fe59 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Peanut);
 8001f7a:	201b      	movs	r0, #27
 8001f7c:	f000 fe56 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(HoneyCookie);
 8001f80:	201c      	movs	r0, #28
 8001f82:	f000 fe53 	bl	8002c2c <printRemainingStuff>
					printRemainingStuff(Kombucha);
 8001f86:	201d      	movs	r0, #29
 8001f88:	f000 fe50 	bl	8002c2c <printRemainingStuff>
					xSemaphoreGive(lcdSem);
 8001f8c:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <cookTask+0x5c8>)
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	2300      	movs	r3, #0
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	f004 f809 	bl	8005fac <xQueueGenericSend>
					//UART_Print("cookTask lcdSem Give(whatCourse == 4)!\r\n");
				break;
 8001f9a:	bf00      	nop
				}
			}
		}
		vTaskDelay(500);
 8001f9c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fa0:	f004 ff5a 	bl	8006e58 <vTaskDelay>
		if (startSig)
 8001fa4:	e524      	b.n	80019f0 <cookTask+0x8>
 8001fa6:	bf00      	nop
 8001fa8:	200008d4 	.word	0x200008d4
 8001fac:	20000944 	.word	0x20000944
 8001fb0:	200008cc 	.word	0x200008cc

08001fb4 <lcdTask>:
	}
}

void lcdTask(void *argument)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b08b      	sub	sp, #44	@ 0x2c
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if (!startSig)
 8001fbc:	4bc4      	ldr	r3, [pc, #784]	@ (80022d0 <lcdTask+0x31c>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f083 0301 	eor.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d04c      	beq.n	8002066 <lcdTask+0xb2>
		{
			lcd_clear();
 8001fcc:	f7fe f95a 	bl	8000284 <lcd_clear>
			lcd_put_cur(0, 0);
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7fe f96d 	bl	80002b2 <lcd_put_cur>
			lcd_send_string("Seaweed");
 8001fd8:	48be      	ldr	r0, [pc, #760]	@ (80022d4 <lcdTask+0x320>)
 8001fda:	f7fe f9c6 	bl	800036a <lcd_send_string>
			vTaskDelay(1000);
 8001fde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fe2:	f004 ff39 	bl	8006e58 <vTaskDelay>
			lcd_clear();
 8001fe6:	f7fe f94d 	bl	8000284 <lcd_clear>
			lcd_put_cur(0, 0);
 8001fea:	2100      	movs	r1, #0
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7fe f960 	bl	80002b2 <lcd_put_cur>
			lcd_send_string("Potato");
 8001ff2:	48b9      	ldr	r0, [pc, #740]	@ (80022d8 <lcdTask+0x324>)
 8001ff4:	f7fe f9b9 	bl	800036a <lcd_send_string>
			vTaskDelay(1000);
 8001ff8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ffc:	f004 ff2c 	bl	8006e58 <vTaskDelay>
			lcd_clear();
 8002000:	f7fe f940 	bl	8000284 <lcd_clear>
			lcd_put_cur(0, 0);
 8002004:	2100      	movs	r1, #0
 8002006:	2000      	movs	r0, #0
 8002008:	f7fe f953 	bl	80002b2 <lcd_put_cur>
			lcd_send_string("SalmonRoe");
 800200c:	48b3      	ldr	r0, [pc, #716]	@ (80022dc <lcdTask+0x328>)
 800200e:	f7fe f9ac 	bl	800036a <lcd_send_string>
			vTaskDelay(1000);
 8002012:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002016:	f004 ff1f 	bl	8006e58 <vTaskDelay>
			lcd_clear();
 800201a:	f7fe f933 	bl	8000284 <lcd_clear>
			lcd_put_cur(0, 0);
 800201e:	2100      	movs	r1, #0
 8002020:	2000      	movs	r0, #0
 8002022:	f7fe f946 	bl	80002b2 <lcd_put_cur>
			lcd_send_string("Deodeok");
 8002026:	48ae      	ldr	r0, [pc, #696]	@ (80022e0 <lcdTask+0x32c>)
 8002028:	f7fe f99f 	bl	800036a <lcd_send_string>
			vTaskDelay(1000);
 800202c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002030:	f004 ff12 	bl	8006e58 <vTaskDelay>
			lcd_clear();
 8002034:	f7fe f926 	bl	8000284 <lcd_clear>
			lcd_put_cur(0, 0);
 8002038:	2100      	movs	r1, #0
 800203a:	2000      	movs	r0, #0
 800203c:	f7fe f939 	bl	80002b2 <lcd_put_cur>
			lcd_send_string("Radish");
 8002040:	48a8      	ldr	r0, [pc, #672]	@ (80022e4 <lcdTask+0x330>)
 8002042:	f7fe f992 	bl	800036a <lcd_send_string>
			vTaskDelay(1000);
 8002046:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800204a:	f004 ff05 	bl	8006e58 <vTaskDelay>
			lcd_put_cur(0, 0);
 800204e:	2100      	movs	r1, #0
 8002050:	2000      	movs	r0, #0
 8002052:	f7fe f92e 	bl	80002b2 <lcd_put_cur>
			lcd_send_string("RedCabbage");
 8002056:	48a4      	ldr	r0, [pc, #656]	@ (80022e8 <lcdTask+0x334>)
 8002058:	f7fe f987 	bl	800036a <lcd_send_string>
			vTaskDelay(1000);
 800205c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002060:	f004 fefa 	bl	8006e58 <vTaskDelay>
 8002064:	e28f      	b.n	8002586 <lcdTask+0x5d2>
		}
		else
		{
			switch (whatCourse)
 8002066:	4ba1      	ldr	r3, [pc, #644]	@ (80022ec <lcdTask+0x338>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b04      	cmp	r3, #4
 800206c:	f200 828b 	bhi.w	8002586 <lcdTask+0x5d2>
 8002070:	a201      	add	r2, pc, #4	@ (adr r2, 8002078 <lcdTask+0xc4>)
 8002072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002076:	bf00      	nop
 8002078:	0800208d 	.word	0x0800208d
 800207c:	08002195 	.word	0x08002195
 8002080:	080022a9 	.word	0x080022a9
 8002084:	0800241b 	.word	0x0800241b
 8002088:	080024f9 	.word	0x080024f9
			{
			case 0 :
				if (xSemaphoreTake(lcdSem, portMAX_DELAY) == pdTRUE)
 800208c:	4b98      	ldr	r3, [pc, #608]	@ (80022f0 <lcdTask+0x33c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002094:	4618      	mov	r0, r3
 8002096:	f004 fa9b 	bl	80065d0 <xQueueSemaphoreTake>
 800209a:	4603      	mov	r3, r0
 800209c:	2b01      	cmp	r3, #1
 800209e:	f040 8269 	bne.w	8002574 <lcdTask+0x5c0>
				{
					//UART_Print("lcdTask lcdSem Take(whatCourse == 0)!\r\n");
					if (lcdState)
 80020a2:	4b94      	ldr	r3, [pc, #592]	@ (80022f4 <lcdTask+0x340>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d02e      	beq.n	800210a <lcdTask+0x156>
					{
						for(int i = 0; i < 4; i ++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
 80020b0:	e010      	b.n	80020d4 <lcdTask+0x120>
							memcpy(&arrCourseTime[i], &userData[i].courseData[0][1], 1);
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	4a90      	ldr	r2, [pc, #576]	@ (80022f8 <lcdTask+0x344>)
 80020b6:	1899      	adds	r1, r3, r2
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	3301      	adds	r3, #1
 80020c6:	4a8d      	ldr	r2, [pc, #564]	@ (80022fc <lcdTask+0x348>)
 80020c8:	4413      	add	r3, r2
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	700b      	strb	r3, [r1, #0]
						for(int i = 0; i < 4; i ++)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3301      	adds	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	ddeb      	ble.n	80020b2 <lcdTask+0xfe>
						maxIndex = findMaxIndex(arrCourseTime, 4);
 80020da:	2104      	movs	r1, #4
 80020dc:	4886      	ldr	r0, [pc, #536]	@ (80022f8 <lcdTask+0x344>)
 80020de:	f7ff fb8d 	bl	80017fc <findMaxIndex>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b86      	ldr	r3, [pc, #536]	@ (8002300 <lcdTask+0x34c>)
 80020e8:	701a      	strb	r2, [r3, #0]
						lcdState = false;
 80020ea:	4b82      	ldr	r3, [pc, #520]	@ (80022f4 <lcdTask+0x340>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
						xTimerStart(userTimerHandler, 0);
 80020f0:	4b84      	ldr	r3, [pc, #528]	@ (8002304 <lcdTask+0x350>)
 80020f2:	681c      	ldr	r4, [r3, #0]
 80020f4:	f005 f802 	bl	80070fc <xTaskGetTickCount>
 80020f8:	4602      	mov	r2, r0
 80020fa:	2300      	movs	r3, #0
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2300      	movs	r3, #0
 8002100:	2101      	movs	r1, #1
 8002102:	4620      	mov	r0, r4
 8002104:	f005 fe0a 	bl	8007d1c <xTimerGenericCommand>
						vTaskDelay(1000);
						xSemaphoreGive(lcdSem);
						//UART_Print("lcdTask lcdSem Give (whatCourse == 0 && lcdState == false)!\r\n");
					}
				}
				break;
 8002108:	e234      	b.n	8002574 <lcdTask+0x5c0>
						lcd_clear();
 800210a:	f7fe f8bb 	bl	8000284 <lcd_clear>
						lcd_put_cur(0, 0);
 800210e:	2100      	movs	r1, #0
 8002110:	2000      	movs	r0, #0
 8002112:	f7fe f8ce 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Almond");
 8002116:	487c      	ldr	r0, [pc, #496]	@ (8002308 <lcdTask+0x354>)
 8002118:	f7fe f927 	bl	800036a <lcd_send_string>
						lcd_put_cur(0, 8);
 800211c:	2108      	movs	r1, #8
 800211e:	2000      	movs	r0, #0
 8002120:	f7fe f8c7 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Cavior");
 8002124:	4879      	ldr	r0, [pc, #484]	@ (800230c <lcdTask+0x358>)
 8002126:	f7fe f920 	bl	800036a <lcd_send_string>
						lcd_put_cur(1, 0);
 800212a:	2100      	movs	r1, #0
 800212c:	2001      	movs	r0, #1
 800212e:	f7fe f8c0 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Tofu");
 8002132:	4877      	ldr	r0, [pc, #476]	@ (8002310 <lcdTask+0x35c>)
 8002134:	f7fe f919 	bl	800036a <lcd_send_string>
						lcd_put_cur(1, 8);
 8002138:	2108      	movs	r1, #8
 800213a:	2001      	movs	r0, #1
 800213c:	f7fe f8b9 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Egg");
 8002140:	4874      	ldr	r0, [pc, #464]	@ (8002314 <lcdTask+0x360>)
 8002142:	f7fe f912 	bl	800036a <lcd_send_string>
						vTaskDelay(1000);
 8002146:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800214a:	f004 fe85 	bl	8006e58 <vTaskDelay>
						lcd_clear();
 800214e:	f7fe f899 	bl	8000284 <lcd_clear>
						lcd_put_cur(0, 0);
 8002152:	2100      	movs	r1, #0
 8002154:	2000      	movs	r0, #0
 8002156:	f7fe f8ac 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Yuzu");
 800215a:	486f      	ldr	r0, [pc, #444]	@ (8002318 <lcdTask+0x364>)
 800215c:	f7fe f905 	bl	800036a <lcd_send_string>
						lcd_put_cur(0, 8);
 8002160:	2108      	movs	r1, #8
 8002162:	2000      	movs	r0, #0
 8002164:	f7fe f8a5 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Snowcrab");
 8002168:	486c      	ldr	r0, [pc, #432]	@ (800231c <lcdTask+0x368>)
 800216a:	f7fe f8fe 	bl	800036a <lcd_send_string>
						lcd_put_cur(1, 0);
 800216e:	2100      	movs	r1, #0
 8002170:	2001      	movs	r0, #1
 8002172:	f7fe f89e 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Beansprouts");
 8002176:	486a      	ldr	r0, [pc, #424]	@ (8002320 <lcdTask+0x36c>)
 8002178:	f7fe f8f7 	bl	800036a <lcd_send_string>
						vTaskDelay(1000);
 800217c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002180:	f004 fe6a 	bl	8006e58 <vTaskDelay>
						xSemaphoreGive(lcdSem);
 8002184:	4b5a      	ldr	r3, [pc, #360]	@ (80022f0 <lcdTask+0x33c>)
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	2300      	movs	r3, #0
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	f003 ff0d 	bl	8005fac <xQueueGenericSend>
				break;
 8002192:	e1ef      	b.n	8002574 <lcdTask+0x5c0>
			case 1 :
				if (xSemaphoreTake(lcdSem, portMAX_DELAY) == pdTRUE)
 8002194:	4b56      	ldr	r3, [pc, #344]	@ (80022f0 <lcdTask+0x33c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800219c:	4618      	mov	r0, r3
 800219e:	f004 fa17 	bl	80065d0 <xQueueSemaphoreTake>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	f040 81e7 	bne.w	8002578 <lcdTask+0x5c4>
				{
					//UART_Print("lcdTask lcdSem Take(whatCourse == 1)!\r\n");
					if (lcdState)
 80021aa:	4b52      	ldr	r3, [pc, #328]	@ (80022f4 <lcdTask+0x340>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d02e      	beq.n	8002212 <lcdTask+0x25e>
					{
						for(int i = 0; i < 4; i ++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	e010      	b.n	80021dc <lcdTask+0x228>
							memcpy(&arrCourseTime1[i], &userData[i].courseData[1][1], 1);
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4a59      	ldr	r2, [pc, #356]	@ (8002324 <lcdTask+0x370>)
 80021be:	1899      	adds	r1, r3, r2
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	3303      	adds	r3, #3
 80021ce:	4a4b      	ldr	r2, [pc, #300]	@ (80022fc <lcdTask+0x348>)
 80021d0:	4413      	add	r3, r2
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	700b      	strb	r3, [r1, #0]
						for(int i = 0; i < 4; i ++)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	3301      	adds	r3, #1
 80021da:	61bb      	str	r3, [r7, #24]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	ddeb      	ble.n	80021ba <lcdTask+0x206>
						maxIndex1 = findMaxIndex(arrCourseTime1, 4);
 80021e2:	2104      	movs	r1, #4
 80021e4:	484f      	ldr	r0, [pc, #316]	@ (8002324 <lcdTask+0x370>)
 80021e6:	f7ff fb09 	bl	80017fc <findMaxIndex>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002328 <lcdTask+0x374>)
 80021f0:	701a      	strb	r2, [r3, #0]
						lcdState = false;
 80021f2:	4b40      	ldr	r3, [pc, #256]	@ (80022f4 <lcdTask+0x340>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
						xTimerStart(userTimerHandler, 0);
 80021f8:	4b42      	ldr	r3, [pc, #264]	@ (8002304 <lcdTask+0x350>)
 80021fa:	681c      	ldr	r4, [r3, #0]
 80021fc:	f004 ff7e 	bl	80070fc <xTaskGetTickCount>
 8002200:	4602      	mov	r2, r0
 8002202:	2300      	movs	r3, #0
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2300      	movs	r3, #0
 8002208:	2101      	movs	r1, #1
 800220a:	4620      	mov	r0, r4
 800220c:	f005 fd86 	bl	8007d1c <xTimerGenericCommand>
						vTaskDelay(1000);
						xSemaphoreGive(lcdSem);
						//UART_Print("lcdTask lcdSem Give (whatCourse == 1 && lcdState == false)!\r\n");
					}
				}
				break;
 8002210:	e1b2      	b.n	8002578 <lcdTask+0x5c4>
						lcd_clear();
 8002212:	f7fe f837 	bl	8000284 <lcd_clear>
						lcd_put_cur(0, 0);
 8002216:	2100      	movs	r1, #0
 8002218:	2000      	movs	r0, #0
 800221a:	f7fe f84a 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("KoreanBeef");
 800221e:	4843      	ldr	r0, [pc, #268]	@ (800232c <lcdTask+0x378>)
 8002220:	f7fe f8a3 	bl	800036a <lcd_send_string>
						lcd_put_cur(1, 0);
 8002224:	2100      	movs	r1, #0
 8002226:	2001      	movs	r0, #1
 8002228:	f7fe f843 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Apple");
 800222c:	4840      	ldr	r0, [pc, #256]	@ (8002330 <lcdTask+0x37c>)
 800222e:	f7fe f89c 	bl	800036a <lcd_send_string>
						lcd_put_cur(1, 8);
 8002232:	2108      	movs	r1, #8
 8002234:	2001      	movs	r0, #1
 8002236:	f7fe f83c 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Onion");
 800223a:	483e      	ldr	r0, [pc, #248]	@ (8002334 <lcdTask+0x380>)
 800223c:	f7fe f895 	bl	800036a <lcd_send_string>
						vTaskDelay(1000);
 8002240:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002244:	f004 fe08 	bl	8006e58 <vTaskDelay>
						lcd_clear();
 8002248:	f7fe f81c 	bl	8000284 <lcd_clear>
						lcd_put_cur(0, 0);
 800224c:	2100      	movs	r1, #0
 800224e:	2000      	movs	r0, #0
 8002250:	f7fe f82f 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Acorn");
 8002254:	4838      	ldr	r0, [pc, #224]	@ (8002338 <lcdTask+0x384>)
 8002256:	f7fe f888 	bl	800036a <lcd_send_string>
						lcd_put_cur(0, 8);
 800225a:	2108      	movs	r1, #8
 800225c:	2000      	movs	r0, #0
 800225e:	f7fe f828 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Truffle");
 8002262:	4836      	ldr	r0, [pc, #216]	@ (800233c <lcdTask+0x388>)
 8002264:	f7fe f881 	bl	800036a <lcd_send_string>
						lcd_put_cur(1, 0);
 8002268:	2100      	movs	r1, #0
 800226a:	2001      	movs	r0, #1
 800226c:	f7fe f821 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Noddle");
 8002270:	4833      	ldr	r0, [pc, #204]	@ (8002340 <lcdTask+0x38c>)
 8002272:	f7fe f87a 	bl	800036a <lcd_send_string>
						vTaskDelay(1000);
 8002276:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800227a:	f004 fded 	bl	8006e58 <vTaskDelay>
						lcd_clear();
 800227e:	f7fe f801 	bl	8000284 <lcd_clear>
						lcd_put_cur(0, 0);
 8002282:	2100      	movs	r1, #0
 8002284:	2000      	movs	r0, #0
 8002286:	f7fe f814 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Sesame");
 800228a:	482e      	ldr	r0, [pc, #184]	@ (8002344 <lcdTask+0x390>)
 800228c:	f7fe f86d 	bl	800036a <lcd_send_string>
						vTaskDelay(1000);
 8002290:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002294:	f004 fde0 	bl	8006e58 <vTaskDelay>
						xSemaphoreGive(lcdSem);
 8002298:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <lcdTask+0x33c>)
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	2300      	movs	r3, #0
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	f003 fe83 	bl	8005fac <xQueueGenericSend>
				break;
 80022a6:	e167      	b.n	8002578 <lcdTask+0x5c4>
			case 2 :
				if(xSemaphoreTake(lcdSem, portMAX_DELAY) == pdTRUE)
 80022a8:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <lcdTask+0x33c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022b0:	4618      	mov	r0, r3
 80022b2:	f004 f98d 	bl	80065d0 <xQueueSemaphoreTake>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	f040 815f 	bne.w	800257c <lcdTask+0x5c8>
				{
					//UART_Print("lcdTask lcdSem Take(whatCourse == 2)!\r\n");
					if (lcdState)
 80022be:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <lcdTask+0x340>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d06b      	beq.n	80023a0 <lcdTask+0x3ec>
					{
						for(int i = 0; i < 4; i ++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	e04d      	b.n	800236a <lcdTask+0x3b6>
 80022ce:	bf00      	nop
 80022d0:	2000090d 	.word	0x2000090d
 80022d4:	08009548 	.word	0x08009548
 80022d8:	08009550 	.word	0x08009550
 80022dc:	08009558 	.word	0x08009558
 80022e0:	08009564 	.word	0x08009564
 80022e4:	0800956c 	.word	0x0800956c
 80022e8:	08009574 	.word	0x08009574
 80022ec:	2000090e 	.word	0x2000090e
 80022f0:	200008cc 	.word	0x200008cc
 80022f4:	20000963 	.word	0x20000963
 80022f8:	20000930 	.word	0x20000930
 80022fc:	200008d4 	.word	0x200008d4
 8002300:	20000940 	.word	0x20000940
 8002304:	200008d0 	.word	0x200008d0
 8002308:	08009580 	.word	0x08009580
 800230c:	08009588 	.word	0x08009588
 8002310:	08009590 	.word	0x08009590
 8002314:	08009598 	.word	0x08009598
 8002318:	0800959c 	.word	0x0800959c
 800231c:	080095a4 	.word	0x080095a4
 8002320:	080095b0 	.word	0x080095b0
 8002324:	20000934 	.word	0x20000934
 8002328:	20000941 	.word	0x20000941
 800232c:	080095bc 	.word	0x080095bc
 8002330:	080095c8 	.word	0x080095c8
 8002334:	080095d0 	.word	0x080095d0
 8002338:	080095d8 	.word	0x080095d8
 800233c:	080095e0 	.word	0x080095e0
 8002340:	080095e8 	.word	0x080095e8
 8002344:	080095f0 	.word	0x080095f0
							memcpy(&arrCourseTime2[i], &userData[i].courseData[2][1], 1);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	4a91      	ldr	r2, [pc, #580]	@ (8002590 <lcdTask+0x5dc>)
 800234c:	1899      	adds	r1, r3, r2
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	3305      	adds	r3, #5
 800235c:	4a8d      	ldr	r2, [pc, #564]	@ (8002594 <lcdTask+0x5e0>)
 800235e:	4413      	add	r3, r2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	700b      	strb	r3, [r1, #0]
						for(int i = 0; i < 4; i ++)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3301      	adds	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b03      	cmp	r3, #3
 800236e:	ddeb      	ble.n	8002348 <lcdTask+0x394>
						maxIndex2 = findMaxIndex(arrCourseTime2, 4);
 8002370:	2104      	movs	r1, #4
 8002372:	4887      	ldr	r0, [pc, #540]	@ (8002590 <lcdTask+0x5dc>)
 8002374:	f7ff fa42 	bl	80017fc <findMaxIndex>
 8002378:	4603      	mov	r3, r0
 800237a:	461a      	mov	r2, r3
 800237c:	4b86      	ldr	r3, [pc, #536]	@ (8002598 <lcdTask+0x5e4>)
 800237e:	701a      	strb	r2, [r3, #0]
						lcdState = false;
 8002380:	4b86      	ldr	r3, [pc, #536]	@ (800259c <lcdTask+0x5e8>)
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
						xTimerStart(userTimerHandler, 0);
 8002386:	4b86      	ldr	r3, [pc, #536]	@ (80025a0 <lcdTask+0x5ec>)
 8002388:	681c      	ldr	r4, [r3, #0]
 800238a:	f004 feb7 	bl	80070fc <xTaskGetTickCount>
 800238e:	4602      	mov	r2, r0
 8002390:	2300      	movs	r3, #0
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2300      	movs	r3, #0
 8002396:	2101      	movs	r1, #1
 8002398:	4620      	mov	r0, r4
 800239a:	f005 fcbf 	bl	8007d1c <xTimerGenericCommand>
						vTaskDelay(1000);
						xSemaphoreGive(lcdSem);
						//UART_Print("lcdTask lcdSem Give (whatCourse == 2 && lcdState == false)!\r\n");
					}
				}
				break;
 800239e:	e0ed      	b.n	800257c <lcdTask+0x5c8>
						lcd_clear();
 80023a0:	f7fd ff70 	bl	8000284 <lcd_clear>
						lcd_put_cur(0, 0);
 80023a4:	2100      	movs	r1, #0
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7fd ff83 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Burdock");
 80023ac:	487d      	ldr	r0, [pc, #500]	@ (80025a4 <lcdTask+0x5f0>)
 80023ae:	f7fd ffdc 	bl	800036a <lcd_send_string>
						vTaskDelay(1000);
 80023b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023b6:	f004 fd4f 	bl	8006e58 <vTaskDelay>
						lcd_clear();
 80023ba:	f7fd ff63 	bl	8000284 <lcd_clear>
						lcd_put_cur(0, 0);
 80023be:	2100      	movs	r1, #0
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fd ff76 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Tilefish");
 80023c6:	4878      	ldr	r0, [pc, #480]	@ (80025a8 <lcdTask+0x5f4>)
 80023c8:	f7fd ffcf 	bl	800036a <lcd_send_string>
						lcd_put_cur(0, 8);
 80023cc:	2108      	movs	r1, #8
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7fd ff6f 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Mustard");
 80023d4:	4875      	ldr	r0, [pc, #468]	@ (80025ac <lcdTask+0x5f8>)
 80023d6:	f7fd ffc8 	bl	800036a <lcd_send_string>
						lcd_put_cur(1, 0);
 80023da:	2100      	movs	r1, #0
 80023dc:	2001      	movs	r0, #1
 80023de:	f7fd ff68 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Brassica");
 80023e2:	4873      	ldr	r0, [pc, #460]	@ (80025b0 <lcdTask+0x5fc>)
 80023e4:	f7fd ffc1 	bl	800036a <lcd_send_string>
						vTaskDelay(1000);
 80023e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023ec:	f004 fd34 	bl	8006e58 <vTaskDelay>
						lcd_clear();
 80023f0:	f7fd ff48 	bl	8000284 <lcd_clear>
						lcd_put_cur(0, 0);
 80023f4:	2100      	movs	r1, #0
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7fd ff5b 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Tuna");
 80023fc:	486d      	ldr	r0, [pc, #436]	@ (80025b4 <lcdTask+0x600>)
 80023fe:	f7fd ffb4 	bl	800036a <lcd_send_string>
						vTaskDelay(1000);
 8002402:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002406:	f004 fd27 	bl	8006e58 <vTaskDelay>
						xSemaphoreGive(lcdSem);
 800240a:	4b6b      	ldr	r3, [pc, #428]	@ (80025b8 <lcdTask+0x604>)
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	2300      	movs	r3, #0
 8002410:	2200      	movs	r2, #0
 8002412:	2100      	movs	r1, #0
 8002414:	f003 fdca 	bl	8005fac <xQueueGenericSend>
				break;
 8002418:	e0b0      	b.n	800257c <lcdTask+0x5c8>
			case 3 :
				if(xSemaphoreTake(lcdSem, portMAX_DELAY) == pdTRUE)
 800241a:	4b67      	ldr	r3, [pc, #412]	@ (80025b8 <lcdTask+0x604>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002422:	4618      	mov	r0, r3
 8002424:	f004 f8d4 	bl	80065d0 <xQueueSemaphoreTake>
 8002428:	4603      	mov	r3, r0
 800242a:	2b01      	cmp	r3, #1
 800242c:	f040 80a8 	bne.w	8002580 <lcdTask+0x5cc>
				{
					//UART_Print("lcdTask lcdSem Take(whatCourse == 3)!\r\n");
					if (lcdState)
 8002430:	4b5a      	ldr	r3, [pc, #360]	@ (800259c <lcdTask+0x5e8>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d02e      	beq.n	8002498 <lcdTask+0x4e4>
					{
						for(int i = 0; i < 4; i ++)
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	e010      	b.n	8002462 <lcdTask+0x4ae>
							memcpy(&arrCourseTime3[i], &userData[i].courseData[3][1], 1);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4a5e      	ldr	r2, [pc, #376]	@ (80025bc <lcdTask+0x608>)
 8002444:	1899      	adds	r1, r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	3307      	adds	r3, #7
 8002454:	4a4f      	ldr	r2, [pc, #316]	@ (8002594 <lcdTask+0x5e0>)
 8002456:	4413      	add	r3, r2
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	700b      	strb	r3, [r1, #0]
						for(int i = 0; i < 4; i ++)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	3301      	adds	r3, #1
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b03      	cmp	r3, #3
 8002466:	ddeb      	ble.n	8002440 <lcdTask+0x48c>
						maxIndex3 = findMaxIndex(arrCourseTime3, 4);
 8002468:	2104      	movs	r1, #4
 800246a:	4854      	ldr	r0, [pc, #336]	@ (80025bc <lcdTask+0x608>)
 800246c:	f7ff f9c6 	bl	80017fc <findMaxIndex>
 8002470:	4603      	mov	r3, r0
 8002472:	461a      	mov	r2, r3
 8002474:	4b52      	ldr	r3, [pc, #328]	@ (80025c0 <lcdTask+0x60c>)
 8002476:	701a      	strb	r2, [r3, #0]
						lcdState = false;
 8002478:	4b48      	ldr	r3, [pc, #288]	@ (800259c <lcdTask+0x5e8>)
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
						xTimerStart(userTimerHandler, 0);
 800247e:	4b48      	ldr	r3, [pc, #288]	@ (80025a0 <lcdTask+0x5ec>)
 8002480:	681c      	ldr	r4, [r3, #0]
 8002482:	f004 fe3b 	bl	80070fc <xTaskGetTickCount>
 8002486:	4602      	mov	r2, r0
 8002488:	2300      	movs	r3, #0
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2300      	movs	r3, #0
 800248e:	2101      	movs	r1, #1
 8002490:	4620      	mov	r0, r4
 8002492:	f005 fc43 	bl	8007d1c <xTimerGenericCommand>
						xSemaphoreGive(lcdSem);
						//UART_Print("lcdTask lcdSem Give (whatCourse == 3 && lcdState == false)!\r\n");
					}
				}

				break;
 8002496:	e073      	b.n	8002580 <lcdTask+0x5cc>
						lcd_clear();
 8002498:	f7fd fef4 	bl	8000284 <lcd_clear>
						lcd_put_cur(0, 0);
 800249c:	2100      	movs	r1, #0
 800249e:	2000      	movs	r0, #0
 80024a0:	f7fd ff07 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Hibiscus");
 80024a4:	4847      	ldr	r0, [pc, #284]	@ (80025c4 <lcdTask+0x610>)
 80024a6:	f7fd ff60 	bl	800036a <lcd_send_string>
						lcd_put_cur(1, 0);
 80024aa:	2100      	movs	r1, #0
 80024ac:	2001      	movs	r0, #1
 80024ae:	f7fd ff00 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Peanut");
 80024b2:	4845      	ldr	r0, [pc, #276]	@ (80025c8 <lcdTask+0x614>)
 80024b4:	f7fd ff59 	bl	800036a <lcd_send_string>
						vTaskDelay(1000);
 80024b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024bc:	f004 fccc 	bl	8006e58 <vTaskDelay>
						lcd_clear();
 80024c0:	f7fd fee0 	bl	8000284 <lcd_clear>
						lcd_put_cur(0, 0);
 80024c4:	2100      	movs	r1, #0
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7fd fef3 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("HoneyCookie");
 80024cc:	483f      	ldr	r0, [pc, #252]	@ (80025cc <lcdTask+0x618>)
 80024ce:	f7fd ff4c 	bl	800036a <lcd_send_string>
						lcd_put_cur(1, 0);
 80024d2:	2100      	movs	r1, #0
 80024d4:	2001      	movs	r0, #1
 80024d6:	f7fd feec 	bl	80002b2 <lcd_put_cur>
						lcd_send_string("Kombucha");
 80024da:	483d      	ldr	r0, [pc, #244]	@ (80025d0 <lcdTask+0x61c>)
 80024dc:	f7fd ff45 	bl	800036a <lcd_send_string>
						vTaskDelay(1000);
 80024e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024e4:	f004 fcb8 	bl	8006e58 <vTaskDelay>
						xSemaphoreGive(lcdSem);
 80024e8:	4b33      	ldr	r3, [pc, #204]	@ (80025b8 <lcdTask+0x604>)
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	2300      	movs	r3, #0
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	f003 fd5b 	bl	8005fac <xQueueGenericSend>
				break;
 80024f6:	e043      	b.n	8002580 <lcdTask+0x5cc>
			case 4 :
				if(xSemaphoreTake(lcdSem, portMAX_DELAY) == pdTRUE)
 80024f8:	4b2f      	ldr	r3, [pc, #188]	@ (80025b8 <lcdTask+0x604>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002500:	4618      	mov	r0, r3
 8002502:	f004 f865 	bl	80065d0 <xQueueSemaphoreTake>
 8002506:	4603      	mov	r3, r0
 8002508:	2b01      	cmp	r3, #1
 800250a:	d13b      	bne.n	8002584 <lcdTask+0x5d0>
				{
					if (lcdState)
 800250c:	4b23      	ldr	r3, [pc, #140]	@ (800259c <lcdTask+0x5e8>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d036      	beq.n	8002584 <lcdTask+0x5d0>
					{
						//UART_Print("lcdTask lcdSem Take(whatCourse == 4)!\r\n");
						for(int i = 0; i < 4; i ++)
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	e010      	b.n	800253e <lcdTask+0x58a>
							memcpy(&arrCourseTime[i], &userData[i].courseData[0][1], 1);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a2d      	ldr	r2, [pc, #180]	@ (80025d4 <lcdTask+0x620>)
 8002520:	1899      	adds	r1, r3, r2
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	3301      	adds	r3, #1
 8002530:	4a18      	ldr	r2, [pc, #96]	@ (8002594 <lcdTask+0x5e0>)
 8002532:	4413      	add	r3, r2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	700b      	strb	r3, [r1, #0]
						for(int i = 0; i < 4; i ++)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3301      	adds	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b03      	cmp	r3, #3
 8002542:	ddeb      	ble.n	800251c <lcdTask+0x568>
						maxIndex = findMaxIndex(arrCourseTime, 4);
 8002544:	2104      	movs	r1, #4
 8002546:	4823      	ldr	r0, [pc, #140]	@ (80025d4 <lcdTask+0x620>)
 8002548:	f7ff f958 	bl	80017fc <findMaxIndex>
 800254c:	4603      	mov	r3, r0
 800254e:	461a      	mov	r2, r3
 8002550:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <lcdTask+0x624>)
 8002552:	701a      	strb	r2, [r3, #0]
						lcdState = false;
 8002554:	4b11      	ldr	r3, [pc, #68]	@ (800259c <lcdTask+0x5e8>)
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
						xTimerStart(userTimerHandler, 0);
 800255a:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <lcdTask+0x5ec>)
 800255c:	681c      	ldr	r4, [r3, #0]
 800255e:	f004 fdcd 	bl	80070fc <xTaskGetTickCount>
 8002562:	4602      	mov	r2, r0
 8002564:	2300      	movs	r3, #0
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2300      	movs	r3, #0
 800256a:	2101      	movs	r1, #1
 800256c:	4620      	mov	r0, r4
 800256e:	f005 fbd5 	bl	8007d1c <xTimerGenericCommand>
					}
				}
				break;
 8002572:	e007      	b.n	8002584 <lcdTask+0x5d0>
				break;
 8002574:	bf00      	nop
 8002576:	e006      	b.n	8002586 <lcdTask+0x5d2>
				break;
 8002578:	bf00      	nop
 800257a:	e004      	b.n	8002586 <lcdTask+0x5d2>
				break;
 800257c:	bf00      	nop
 800257e:	e002      	b.n	8002586 <lcdTask+0x5d2>
				break;
 8002580:	bf00      	nop
 8002582:	e000      	b.n	8002586 <lcdTask+0x5d2>
				break;
 8002584:	bf00      	nop
			}
		}
		vTaskDelay(500);
 8002586:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800258a:	f004 fc65 	bl	8006e58 <vTaskDelay>
		if (!startSig)
 800258e:	e515      	b.n	8001fbc <lcdTask+0x8>
 8002590:	20000938 	.word	0x20000938
 8002594:	200008d4 	.word	0x200008d4
 8002598:	20000942 	.word	0x20000942
 800259c:	20000963 	.word	0x20000963
 80025a0:	200008d0 	.word	0x200008d0
 80025a4:	080095f8 	.word	0x080095f8
 80025a8:	08009600 	.word	0x08009600
 80025ac:	0800960c 	.word	0x0800960c
 80025b0:	08009614 	.word	0x08009614
 80025b4:	08009620 	.word	0x08009620
 80025b8:	200008cc 	.word	0x200008cc
 80025bc:	2000093c 	.word	0x2000093c
 80025c0:	20000943 	.word	0x20000943
 80025c4:	08009628 	.word	0x08009628
 80025c8:	08009634 	.word	0x08009634
 80025cc:	0800963c 	.word	0x0800963c
 80025d0:	08009648 	.word	0x08009648
 80025d4:	20000930 	.word	0x20000930
 80025d8:	20000940 	.word	0x20000940

080025dc <buzzerTask>:
	}
}

void buzzerTask(void *argument)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// UART_Print("buzzerTask execution!\r\n");
		if (buzzerSig)
 80025e4:	4b39      	ldr	r3, [pc, #228]	@ (80026cc <buzzerTask+0xf0>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d068      	beq.n	80026c0 <buzzerTask+0xe4>
		{
			txData = 0x31;
 80025ee:	4b38      	ldr	r3, [pc, #224]	@ (80026d0 <buzzerTask+0xf4>)
 80025f0:	2231      	movs	r2, #49	@ 0x31
 80025f2:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit(&hspi1, &txData, sizeof(txData), HAL_MAX_DELAY);
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025f8:	2201      	movs	r2, #1
 80025fa:	4935      	ldr	r1, [pc, #212]	@ (80026d0 <buzzerTask+0xf4>)
 80025fc:	4835      	ldr	r0, [pc, #212]	@ (80026d4 <buzzerTask+0xf8>)
 80025fe:	f002 f849 	bl	8004694 <HAL_SPI_Transmit>
			//UART_Print("SPI txData transmit to master!\r\n");
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002602:	2201      	movs	r2, #1
 8002604:	2110      	movs	r1, #16
 8002606:	4834      	ldr	r0, [pc, #208]	@ (80026d8 <buzzerTask+0xfc>)
 8002608:	f000 fecc 	bl	80033a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800260c:	2201      	movs	r2, #1
 800260e:	2120      	movs	r1, #32
 8002610:	4831      	ldr	r0, [pc, #196]	@ (80026d8 <buzzerTask+0xfc>)
 8002612:	f000 fec7 	bl	80033a4 <HAL_GPIO_WritePin>
			vTaskDelay(500);
 8002616:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800261a:	f004 fc1d 	bl	8006e58 <vTaskDelay>
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800261e:	2200      	movs	r2, #0
 8002620:	2110      	movs	r1, #16
 8002622:	482d      	ldr	r0, [pc, #180]	@ (80026d8 <buzzerTask+0xfc>)
 8002624:	f000 febe 	bl	80033a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002628:	2200      	movs	r2, #0
 800262a:	2120      	movs	r1, #32
 800262c:	482a      	ldr	r0, [pc, #168]	@ (80026d8 <buzzerTask+0xfc>)
 800262e:	f000 feb9 	bl	80033a4 <HAL_GPIO_WritePin>
			vTaskDelay(500);
 8002632:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002636:	f004 fc0f 	bl	8006e58 <vTaskDelay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800263a:	2201      	movs	r2, #1
 800263c:	2120      	movs	r1, #32
 800263e:	4826      	ldr	r0, [pc, #152]	@ (80026d8 <buzzerTask+0xfc>)
 8002640:	f000 feb0 	bl	80033a4 <HAL_GPIO_WritePin>
			vTaskDelay(500);
 8002644:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002648:	f004 fc06 	bl	8006e58 <vTaskDelay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800264c:	2200      	movs	r2, #0
 800264e:	2120      	movs	r1, #32
 8002650:	4821      	ldr	r0, [pc, #132]	@ (80026d8 <buzzerTask+0xfc>)
 8002652:	f000 fea7 	bl	80033a4 <HAL_GPIO_WritePin>
			vTaskDelay(500);
 8002656:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800265a:	f004 fbfd 	bl	8006e58 <vTaskDelay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800265e:	2201      	movs	r2, #1
 8002660:	2120      	movs	r1, #32
 8002662:	481d      	ldr	r0, [pc, #116]	@ (80026d8 <buzzerTask+0xfc>)
 8002664:	f000 fe9e 	bl	80033a4 <HAL_GPIO_WritePin>
			vTaskDelay(500);
 8002668:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800266c:	f004 fbf4 	bl	8006e58 <vTaskDelay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002670:	2200      	movs	r2, #0
 8002672:	2120      	movs	r1, #32
 8002674:	4818      	ldr	r0, [pc, #96]	@ (80026d8 <buzzerTask+0xfc>)
 8002676:	f000 fe95 	bl	80033a4 <HAL_GPIO_WritePin>
			vTaskDelay(500);
 800267a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800267e:	f004 fbeb 	bl	8006e58 <vTaskDelay>
			txData = 0x30;
 8002682:	4b13      	ldr	r3, [pc, #76]	@ (80026d0 <buzzerTask+0xf4>)
 8002684:	2230      	movs	r2, #48	@ 0x30
 8002686:	701a      	strb	r2, [r3, #0]
			if (whatCourse >= 4)
 8002688:	4b14      	ldr	r3, [pc, #80]	@ (80026dc <buzzerTask+0x100>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d907      	bls.n	80026a0 <buzzerTask+0xc4>
			{
				whatCourse = 0;
 8002690:	4b12      	ldr	r3, [pc, #72]	@ (80026dc <buzzerTask+0x100>)
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
				startSig = false;
 8002696:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <buzzerTask+0x104>)
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
				dataInit();
 800269c:	f7fe f854 	bl	8000748 <dataInit>
			}
			buzzerSig = !buzzerSig;
 80026a0:	4b0a      	ldr	r3, [pc, #40]	@ (80026cc <buzzerTask+0xf0>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	bf14      	ite	ne
 80026aa:	2301      	movne	r3, #1
 80026ac:	2300      	moveq	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f083 0301 	eor.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <buzzerTask+0xf0>)
 80026be:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelay(500);
 80026c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026c4:	f004 fbc8 	bl	8006e58 <vTaskDelay>
		if (buzzerSig)
 80026c8:	e78c      	b.n	80025e4 <buzzerTask+0x8>
 80026ca:	bf00      	nop
 80026cc:	20000962 	.word	0x20000962
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000814 	.word	0x20000814
 80026d8:	40010c00 	.word	0x40010c00
 80026dc:	2000090e 	.word	0x2000090e
 80026e0:	2000090d 	.word	0x2000090d

080026e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f4:	d101      	bne.n	80026fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026f6:	f000 fb39 	bl	8002d6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002706:	b672      	cpsid	i
}
 8002708:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800270a:	bf00      	nop
 800270c:	e7fd      	b.n	800270a <Error_Handler+0x8>
	...

08002710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002716:	4b18      	ldr	r3, [pc, #96]	@ (8002778 <HAL_MspInit+0x68>)
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	4a17      	ldr	r2, [pc, #92]	@ (8002778 <HAL_MspInit+0x68>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6193      	str	r3, [r2, #24]
 8002722:	4b15      	ldr	r3, [pc, #84]	@ (8002778 <HAL_MspInit+0x68>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <HAL_MspInit+0x68>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4a11      	ldr	r2, [pc, #68]	@ (8002778 <HAL_MspInit+0x68>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002738:	61d3      	str	r3, [r2, #28]
 800273a:	4b0f      	ldr	r3, [pc, #60]	@ (8002778 <HAL_MspInit+0x68>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	210f      	movs	r1, #15
 800274a:	f06f 0001 	mvn.w	r0, #1
 800274e:	f000 fc02 	bl	8002f56 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002752:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <HAL_MspInit+0x6c>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	4a04      	ldr	r2, [pc, #16]	@ (800277c <HAL_MspInit+0x6c>)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	40010000 	.word	0x40010000

08002780 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0310 	add.w	r3, r7, #16
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a15      	ldr	r2, [pc, #84]	@ (80027f0 <HAL_I2C_MspInit+0x70>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d123      	bne.n	80027e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a0:	4b14      	ldr	r3, [pc, #80]	@ (80027f4 <HAL_I2C_MspInit+0x74>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4a13      	ldr	r2, [pc, #76]	@ (80027f4 <HAL_I2C_MspInit+0x74>)
 80027a6:	f043 0308 	orr.w	r3, r3, #8
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4b11      	ldr	r3, [pc, #68]	@ (80027f4 <HAL_I2C_MspInit+0x74>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027b8:	23c0      	movs	r3, #192	@ 0xc0
 80027ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027bc:	2312      	movs	r3, #18
 80027be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027c0:	2303      	movs	r3, #3
 80027c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	4619      	mov	r1, r3
 80027ca:	480b      	ldr	r0, [pc, #44]	@ (80027f8 <HAL_I2C_MspInit+0x78>)
 80027cc:	f000 fc66 	bl	800309c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027d0:	4b08      	ldr	r3, [pc, #32]	@ (80027f4 <HAL_I2C_MspInit+0x74>)
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	4a07      	ldr	r2, [pc, #28]	@ (80027f4 <HAL_I2C_MspInit+0x74>)
 80027d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027da:	61d3      	str	r3, [r2, #28]
 80027dc:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <HAL_I2C_MspInit+0x74>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80027e8:	bf00      	nop
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40005400 	.word	0x40005400
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40010c00 	.word	0x40010c00

080027fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0310 	add.w	r3, r7, #16
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1f      	ldr	r2, [pc, #124]	@ (8002894 <HAL_SPI_MspInit+0x98>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d137      	bne.n	800288c <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800281c:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_SPI_MspInit+0x9c>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	4a1d      	ldr	r2, [pc, #116]	@ (8002898 <HAL_SPI_MspInit+0x9c>)
 8002822:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002826:	6193      	str	r3, [r2, #24]
 8002828:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <HAL_SPI_MspInit+0x9c>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002834:	4b18      	ldr	r3, [pc, #96]	@ (8002898 <HAL_SPI_MspInit+0x9c>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a17      	ldr	r2, [pc, #92]	@ (8002898 <HAL_SPI_MspInit+0x9c>)
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b15      	ldr	r3, [pc, #84]	@ (8002898 <HAL_SPI_MspInit+0x9c>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800284c:	23a0      	movs	r3, #160	@ 0xa0
 800284e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	4619      	mov	r1, r3
 800285e:	480f      	ldr	r0, [pc, #60]	@ (800289c <HAL_SPI_MspInit+0xa0>)
 8002860:	f000 fc1c 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002864:	2340      	movs	r3, #64	@ 0x40
 8002866:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800286c:	2303      	movs	r3, #3
 800286e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002870:	f107 0310 	add.w	r3, r7, #16
 8002874:	4619      	mov	r1, r3
 8002876:	4809      	ldr	r0, [pc, #36]	@ (800289c <HAL_SPI_MspInit+0xa0>)
 8002878:	f000 fc10 	bl	800309c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	2105      	movs	r1, #5
 8002880:	2023      	movs	r0, #35	@ 0x23
 8002882:	f000 fb68 	bl	8002f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002886:	2023      	movs	r0, #35	@ 0x23
 8002888:	f000 fb81 	bl	8002f8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800288c:	bf00      	nop
 800288e:	3720      	adds	r7, #32
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40013000 	.word	0x40013000
 8002898:	40021000 	.word	0x40021000
 800289c:	40010800 	.word	0x40010800

080028a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a15      	ldr	r2, [pc, #84]	@ (8002910 <HAL_UART_MspInit+0x70>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d123      	bne.n	8002908 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028c0:	4b14      	ldr	r3, [pc, #80]	@ (8002914 <HAL_UART_MspInit+0x74>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	4a13      	ldr	r2, [pc, #76]	@ (8002914 <HAL_UART_MspInit+0x74>)
 80028c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ca:	61d3      	str	r3, [r2, #28]
 80028cc:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <HAL_UART_MspInit+0x74>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002914 <HAL_UART_MspInit+0x74>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <HAL_UART_MspInit+0x74>)
 80028de:	f043 0304 	orr.w	r3, r3, #4
 80028e2:	6193      	str	r3, [r2, #24]
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_UART_MspInit+0x74>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028f0:	230c      	movs	r3, #12
 80028f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2302      	movs	r3, #2
 80028fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	4619      	mov	r1, r3
 8002902:	4805      	ldr	r0, [pc, #20]	@ (8002918 <HAL_UART_MspInit+0x78>)
 8002904:	f000 fbca 	bl	800309c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002908:	bf00      	nop
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40004400 	.word	0x40004400
 8002914:	40021000 	.word	0x40021000
 8002918:	40010800 	.word	0x40010800

0800291c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08e      	sub	sp, #56	@ 0x38
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002932:	4b34      	ldr	r3, [pc, #208]	@ (8002a04 <HAL_InitTick+0xe8>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	4a33      	ldr	r2, [pc, #204]	@ (8002a04 <HAL_InitTick+0xe8>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	61d3      	str	r3, [r2, #28]
 800293e:	4b31      	ldr	r3, [pc, #196]	@ (8002a04 <HAL_InitTick+0xe8>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800294a:	f107 0210 	add.w	r2, r7, #16
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f001 fdcb 	bl	80044f0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800295e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002964:	f001 fd9c 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 8002968:	6378      	str	r0, [r7, #52]	@ 0x34
 800296a:	e004      	b.n	8002976 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800296c:	f001 fd98 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 8002970:	4603      	mov	r3, r0
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002978:	4a23      	ldr	r2, [pc, #140]	@ (8002a08 <HAL_InitTick+0xec>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	0c9b      	lsrs	r3, r3, #18
 8002980:	3b01      	subs	r3, #1
 8002982:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002984:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <HAL_InitTick+0xf0>)
 8002986:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800298a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800298c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a0c <HAL_InitTick+0xf0>)
 800298e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002992:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002994:	4a1d      	ldr	r2, [pc, #116]	@ (8002a0c <HAL_InitTick+0xf0>)
 8002996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002998:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800299a:	4b1c      	ldr	r3, [pc, #112]	@ (8002a0c <HAL_InitTick+0xf0>)
 800299c:	2200      	movs	r2, #0
 800299e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a0c <HAL_InitTick+0xf0>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a6:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <HAL_InitTick+0xf0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80029ac:	4817      	ldr	r0, [pc, #92]	@ (8002a0c <HAL_InitTick+0xf0>)
 80029ae:	f002 fca8 	bl	8005302 <HAL_TIM_Base_Init>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80029b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d11b      	bne.n	80029f8 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80029c0:	4812      	ldr	r0, [pc, #72]	@ (8002a0c <HAL_InitTick+0xf0>)
 80029c2:	f002 fcf7 	bl	80053b4 <HAL_TIM_Base_Start_IT>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80029cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d111      	bne.n	80029f8 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029d4:	201c      	movs	r0, #28
 80029d6:	f000 fada 	bl	8002f8e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b0f      	cmp	r3, #15
 80029de:	d808      	bhi.n	80029f2 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80029e0:	2200      	movs	r2, #0
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	201c      	movs	r0, #28
 80029e6:	f000 fab6 	bl	8002f56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029ea:	4a09      	ldr	r2, [pc, #36]	@ (8002a10 <HAL_InitTick+0xf4>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	e002      	b.n	80029f8 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80029f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3738      	adds	r7, #56	@ 0x38
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40021000 	.word	0x40021000
 8002a08:	431bde83 	.word	0x431bde83
 8002a0c:	20000964 	.word	0x20000964
 8002a10:	20000008 	.word	0x20000008

08002a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a18:	bf00      	nop
 8002a1a:	e7fd      	b.n	8002a18 <NMI_Handler+0x4>

08002a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <HardFault_Handler+0x4>

08002a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <MemManage_Handler+0x4>

08002a2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <BusFault_Handler+0x4>

08002a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <UsageFault_Handler+0x4>

08002a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a4c:	4802      	ldr	r0, [pc, #8]	@ (8002a58 <TIM2_IRQHandler+0x10>)
 8002a4e:	f002 fd03 	bl	8005458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000964 	.word	0x20000964

08002a5c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a60:	4802      	ldr	r0, [pc, #8]	@ (8002a6c <SPI1_IRQHandler+0x10>)
 8002a62:	f002 f881 	bl	8004b68 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000814 	.word	0x20000814

08002a70 <stuffToString>:
#include "stuffManage.h"

extern UART_HandleTypeDef huart2;

const char* stuffToString(stuff index)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
	switch (index)
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	2b1d      	cmp	r3, #29
 8002a7e:	d87b      	bhi.n	8002b78 <stuffToString+0x108>
 8002a80:	a201      	add	r2, pc, #4	@ (adr r2, 8002a88 <stuffToString+0x18>)
 8002a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	08002b01 	.word	0x08002b01
 8002a8c:	08002b05 	.word	0x08002b05
 8002a90:	08002b09 	.word	0x08002b09
 8002a94:	08002b0d 	.word	0x08002b0d
 8002a98:	08002b11 	.word	0x08002b11
 8002a9c:	08002b15 	.word	0x08002b15
 8002aa0:	08002b19 	.word	0x08002b19
 8002aa4:	08002b1d 	.word	0x08002b1d
 8002aa8:	08002b21 	.word	0x08002b21
 8002aac:	08002b25 	.word	0x08002b25
 8002ab0:	08002b29 	.word	0x08002b29
 8002ab4:	08002b2d 	.word	0x08002b2d
 8002ab8:	08002b31 	.word	0x08002b31
 8002abc:	08002b35 	.word	0x08002b35
 8002ac0:	08002b39 	.word	0x08002b39
 8002ac4:	08002b3d 	.word	0x08002b3d
 8002ac8:	08002b41 	.word	0x08002b41
 8002acc:	08002b45 	.word	0x08002b45
 8002ad0:	08002b49 	.word	0x08002b49
 8002ad4:	08002b4d 	.word	0x08002b4d
 8002ad8:	08002b51 	.word	0x08002b51
 8002adc:	08002b55 	.word	0x08002b55
 8002ae0:	08002b59 	.word	0x08002b59
 8002ae4:	08002b5d 	.word	0x08002b5d
 8002ae8:	08002b61 	.word	0x08002b61
 8002aec:	08002b65 	.word	0x08002b65
 8002af0:	08002b69 	.word	0x08002b69
 8002af4:	08002b6d 	.word	0x08002b6d
 8002af8:	08002b71 	.word	0x08002b71
 8002afc:	08002b75 	.word	0x08002b75
	{
	case Seaweed : return "Seaweed";
 8002b00:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <stuffToString+0x114>)
 8002b02:	e03a      	b.n	8002b7a <stuffToString+0x10a>
	case Potato : return "Potato";
 8002b04:	4b20      	ldr	r3, [pc, #128]	@ (8002b88 <stuffToString+0x118>)
 8002b06:	e038      	b.n	8002b7a <stuffToString+0x10a>
	case SalmonRoe : return "SalmonRoe";
 8002b08:	4b20      	ldr	r3, [pc, #128]	@ (8002b8c <stuffToString+0x11c>)
 8002b0a:	e036      	b.n	8002b7a <stuffToString+0x10a>
	case Deodeok : return "Deodeok";
 8002b0c:	4b20      	ldr	r3, [pc, #128]	@ (8002b90 <stuffToString+0x120>)
 8002b0e:	e034      	b.n	8002b7a <stuffToString+0x10a>
	case Radish : return "Radish";
 8002b10:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <stuffToString+0x124>)
 8002b12:	e032      	b.n	8002b7a <stuffToString+0x10a>
	case RedCabbage : return "RedCabbage";
 8002b14:	4b20      	ldr	r3, [pc, #128]	@ (8002b98 <stuffToString+0x128>)
 8002b16:	e030      	b.n	8002b7a <stuffToString+0x10a>
	case Almond : return "Almond";
 8002b18:	4b20      	ldr	r3, [pc, #128]	@ (8002b9c <stuffToString+0x12c>)
 8002b1a:	e02e      	b.n	8002b7a <stuffToString+0x10a>
	case Cavior : return "Cavior";
 8002b1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ba0 <stuffToString+0x130>)
 8002b1e:	e02c      	b.n	8002b7a <stuffToString+0x10a>
	case Tofu : return "Tofu";
 8002b20:	4b20      	ldr	r3, [pc, #128]	@ (8002ba4 <stuffToString+0x134>)
 8002b22:	e02a      	b.n	8002b7a <stuffToString+0x10a>
	case Egg : return "Egg";
 8002b24:	4b20      	ldr	r3, [pc, #128]	@ (8002ba8 <stuffToString+0x138>)
 8002b26:	e028      	b.n	8002b7a <stuffToString+0x10a>
	case Yuzu : return "Yuzu";
 8002b28:	4b20      	ldr	r3, [pc, #128]	@ (8002bac <stuffToString+0x13c>)
 8002b2a:	e026      	b.n	8002b7a <stuffToString+0x10a>
	case Snowcrab : return "Snowcrab";
 8002b2c:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <stuffToString+0x140>)
 8002b2e:	e024      	b.n	8002b7a <stuffToString+0x10a>
	case Beansprouts : return "Beansprouts";
 8002b30:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <stuffToString+0x144>)
 8002b32:	e022      	b.n	8002b7a <stuffToString+0x10a>
	case Ablalone : return "Ablalone";
 8002b34:	4b20      	ldr	r3, [pc, #128]	@ (8002bb8 <stuffToString+0x148>)
 8002b36:	e020      	b.n	8002b7a <stuffToString+0x10a>
	case KoreanBeef : return "KoreanBeef";
 8002b38:	4b20      	ldr	r3, [pc, #128]	@ (8002bbc <stuffToString+0x14c>)
 8002b3a:	e01e      	b.n	8002b7a <stuffToString+0x10a>
	case Apple : return "Apple";
 8002b3c:	4b20      	ldr	r3, [pc, #128]	@ (8002bc0 <stuffToString+0x150>)
 8002b3e:	e01c      	b.n	8002b7a <stuffToString+0x10a>
	case Onion : return "Onion";
 8002b40:	4b20      	ldr	r3, [pc, #128]	@ (8002bc4 <stuffToString+0x154>)
 8002b42:	e01a      	b.n	8002b7a <stuffToString+0x10a>
	case Acorn : return "Acorn";
 8002b44:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <stuffToString+0x158>)
 8002b46:	e018      	b.n	8002b7a <stuffToString+0x10a>
	case Truffle : return "Truffle";
 8002b48:	4b20      	ldr	r3, [pc, #128]	@ (8002bcc <stuffToString+0x15c>)
 8002b4a:	e016      	b.n	8002b7a <stuffToString+0x10a>
	case Noddle : return "Noddle";
 8002b4c:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <stuffToString+0x160>)
 8002b4e:	e014      	b.n	8002b7a <stuffToString+0x10a>
	case Sesame : return "Sesame";
 8002b50:	4b20      	ldr	r3, [pc, #128]	@ (8002bd4 <stuffToString+0x164>)
 8002b52:	e012      	b.n	8002b7a <stuffToString+0x10a>
	case Burdock : return "Burdock";
 8002b54:	4b20      	ldr	r3, [pc, #128]	@ (8002bd8 <stuffToString+0x168>)
 8002b56:	e010      	b.n	8002b7a <stuffToString+0x10a>
	case Tilefish : return "Tilefish";
 8002b58:	4b20      	ldr	r3, [pc, #128]	@ (8002bdc <stuffToString+0x16c>)
 8002b5a:	e00e      	b.n	8002b7a <stuffToString+0x10a>
	case Mustard : return "Mustard";
 8002b5c:	4b20      	ldr	r3, [pc, #128]	@ (8002be0 <stuffToString+0x170>)
 8002b5e:	e00c      	b.n	8002b7a <stuffToString+0x10a>
	case Brassica : return "Brassica";
 8002b60:	4b20      	ldr	r3, [pc, #128]	@ (8002be4 <stuffToString+0x174>)
 8002b62:	e00a      	b.n	8002b7a <stuffToString+0x10a>
	case Tuna : return "Tuna";
 8002b64:	4b20      	ldr	r3, [pc, #128]	@ (8002be8 <stuffToString+0x178>)
 8002b66:	e008      	b.n	8002b7a <stuffToString+0x10a>
	case Hibiscus : return "Hibiscus";
 8002b68:	4b20      	ldr	r3, [pc, #128]	@ (8002bec <stuffToString+0x17c>)
 8002b6a:	e006      	b.n	8002b7a <stuffToString+0x10a>
	case Peanut : return "Peanut";
 8002b6c:	4b20      	ldr	r3, [pc, #128]	@ (8002bf0 <stuffToString+0x180>)
 8002b6e:	e004      	b.n	8002b7a <stuffToString+0x10a>
	case HoneyCookie : return "HoneyCookie";
 8002b70:	4b20      	ldr	r3, [pc, #128]	@ (8002bf4 <stuffToString+0x184>)
 8002b72:	e002      	b.n	8002b7a <stuffToString+0x10a>
	case Kombucha : return "Kombucha";
 8002b74:	4b20      	ldr	r3, [pc, #128]	@ (8002bf8 <stuffToString+0x188>)
 8002b76:	e000      	b.n	8002b7a <stuffToString+0x10a>
	default : return "Invalid Stuff";
 8002b78:	4b20      	ldr	r3, [pc, #128]	@ (8002bfc <stuffToString+0x18c>)
	}
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	08009654 	.word	0x08009654
 8002b88:	0800965c 	.word	0x0800965c
 8002b8c:	08009664 	.word	0x08009664
 8002b90:	08009670 	.word	0x08009670
 8002b94:	08009678 	.word	0x08009678
 8002b98:	08009680 	.word	0x08009680
 8002b9c:	0800968c 	.word	0x0800968c
 8002ba0:	08009694 	.word	0x08009694
 8002ba4:	0800969c 	.word	0x0800969c
 8002ba8:	080096a4 	.word	0x080096a4
 8002bac:	080096a8 	.word	0x080096a8
 8002bb0:	080096b0 	.word	0x080096b0
 8002bb4:	080096bc 	.word	0x080096bc
 8002bb8:	080096c8 	.word	0x080096c8
 8002bbc:	080096d4 	.word	0x080096d4
 8002bc0:	080096e0 	.word	0x080096e0
 8002bc4:	080096e8 	.word	0x080096e8
 8002bc8:	080096f0 	.word	0x080096f0
 8002bcc:	080096f8 	.word	0x080096f8
 8002bd0:	08009700 	.word	0x08009700
 8002bd4:	08009708 	.word	0x08009708
 8002bd8:	08009710 	.word	0x08009710
 8002bdc:	08009718 	.word	0x08009718
 8002be0:	08009724 	.word	0x08009724
 8002be4:	0800972c 	.word	0x0800972c
 8002be8:	08009738 	.word	0x08009738
 8002bec:	08009740 	.word	0x08009740
 8002bf0:	0800974c 	.word	0x0800974c
 8002bf4:	08009754 	.word	0x08009754
 8002bf8:	08009760 	.word	0x08009760
 8002bfc:	0800976c 	.word	0x0800976c

08002c00 <transmitString>:

void transmitString(const char* message)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 1000);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7fd faa1 	bl	8000150 <strlen>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4803      	ldr	r0, [pc, #12]	@ (8002c28 <transmitString+0x28>)
 8002c1a:	f002 fe01 	bl	8005820 <HAL_UART_Transmit>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	2000086c 	.word	0x2000086c

08002c2c <printRemainingStuff>:


void printRemainingStuff(stuff index)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b090      	sub	sp, #64	@ 0x40
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
	if (index <= Kombucha)
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	2b1d      	cmp	r3, #29
 8002c3a:	d812      	bhi.n	8002c62 <printRemainingStuff+0x36>
	{
		char message[50];
		sprintf(message, "remaining %s : %d\r\n", stuffToString(index), remainingStuff[index]);
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ff16 	bl	8002a70 <stuffToString>
 8002c44:	4602      	mov	r2, r0
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	4909      	ldr	r1, [pc, #36]	@ (8002c70 <printRemainingStuff+0x44>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	f107 000c 	add.w	r0, r7, #12
 8002c50:	4908      	ldr	r1, [pc, #32]	@ (8002c74 <printRemainingStuff+0x48>)
 8002c52:	f005 ff31 	bl	8008ab8 <siprintf>
		transmitString(message);
 8002c56:	f107 030c 	add.w	r3, r7, #12
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ffd0 	bl	8002c00 <transmitString>
	}
	else
	{
		transmitString("Invalid stuff\r\n");
	}
}
 8002c60:	e002      	b.n	8002c68 <printRemainingStuff+0x3c>
		transmitString("Invalid stuff\r\n");
 8002c62:	4805      	ldr	r0, [pc, #20]	@ (8002c78 <printRemainingStuff+0x4c>)
 8002c64:	f7ff ffcc 	bl	8002c00 <transmitString>
}
 8002c68:	bf00      	nop
 8002c6a:	3740      	adds	r7, #64	@ 0x40
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	20000944 	.word	0x20000944
 8002c74:	0800977c 	.word	0x0800977c
 8002c78:	08009790 	.word	0x08009790

08002c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c84:	4a14      	ldr	r2, [pc, #80]	@ (8002cd8 <_sbrk+0x5c>)
 8002c86:	4b15      	ldr	r3, [pc, #84]	@ (8002cdc <_sbrk+0x60>)
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c90:	4b13      	ldr	r3, [pc, #76]	@ (8002ce0 <_sbrk+0x64>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c98:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <_sbrk+0x64>)
 8002c9a:	4a12      	ldr	r2, [pc, #72]	@ (8002ce4 <_sbrk+0x68>)
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <_sbrk+0x64>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d207      	bcs.n	8002cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cac:	f005 ff82 	bl	8008bb4 <__errno>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cba:	e009      	b.n	8002cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cbc:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <_sbrk+0x64>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cc2:	4b07      	ldr	r3, [pc, #28]	@ (8002ce0 <_sbrk+0x64>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	4a05      	ldr	r2, [pc, #20]	@ (8002ce0 <_sbrk+0x64>)
 8002ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cce:	68fb      	ldr	r3, [r7, #12]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20005000 	.word	0x20005000
 8002cdc:	00000400 	.word	0x00000400
 8002ce0:	200009ac 	.word	0x200009ac
 8002ce4:	20001d90 	.word	0x20001d90

08002ce8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cf4:	f7ff fff8 	bl	8002ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cf8:	480b      	ldr	r0, [pc, #44]	@ (8002d28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002cfa:	490c      	ldr	r1, [pc, #48]	@ (8002d2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8002d30 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d00:	e002      	b.n	8002d08 <LoopCopyDataInit>

08002d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d06:	3304      	adds	r3, #4

08002d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d0c:	d3f9      	bcc.n	8002d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0e:	4a09      	ldr	r2, [pc, #36]	@ (8002d34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d10:	4c09      	ldr	r4, [pc, #36]	@ (8002d38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d14:	e001      	b.n	8002d1a <LoopFillZerobss>

08002d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d18:	3204      	adds	r2, #4

08002d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d1c:	d3fb      	bcc.n	8002d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d1e:	f005 ff4f 	bl	8008bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d22:	f7fd fb37 	bl	8000394 <main>
  bx lr
 8002d26:	4770      	bx	lr
  ldr r0, =_sdata
 8002d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d2c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002d30:	08009828 	.word	0x08009828
  ldr r2, =_sbss
 8002d34:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002d38:	20001d8c 	.word	0x20001d8c

08002d3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d3c:	e7fe      	b.n	8002d3c <ADC1_2_IRQHandler>
	...

08002d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d44:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <HAL_Init+0x28>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a07      	ldr	r2, [pc, #28]	@ (8002d68 <HAL_Init+0x28>)
 8002d4a:	f043 0310 	orr.w	r3, r3, #16
 8002d4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d50:	2003      	movs	r0, #3
 8002d52:	f000 f8f5 	bl	8002f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d56:	200f      	movs	r0, #15
 8002d58:	f7ff fde0 	bl	800291c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d5c:	f7ff fcd8 	bl	8002710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40022000 	.word	0x40022000

08002d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d70:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <HAL_IncTick+0x1c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <HAL_IncTick+0x20>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a03      	ldr	r2, [pc, #12]	@ (8002d8c <HAL_IncTick+0x20>)
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	2000000c 	.word	0x2000000c
 8002d8c:	200009b0 	.word	0x200009b0

08002d90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return uwTick;
 8002d94:	4b02      	ldr	r3, [pc, #8]	@ (8002da0 <HAL_GetTick+0x10>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	200009b0 	.word	0x200009b0

08002da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dac:	f7ff fff0 	bl	8002d90 <HAL_GetTick>
 8002db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dbc:	d005      	beq.n	8002dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002de8 <HAL_Delay+0x44>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dca:	bf00      	nop
 8002dcc:	f7ff ffe0 	bl	8002d90 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d8f7      	bhi.n	8002dcc <HAL_Delay+0x28>
  {
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	2000000c 	.word	0x2000000c

08002dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <__NVIC_SetPriorityGrouping+0x44>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1e:	4a04      	ldr	r2, [pc, #16]	@ (8002e30 <__NVIC_SetPriorityGrouping+0x44>)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	60d3      	str	r3, [r2, #12]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e38:	4b04      	ldr	r3, [pc, #16]	@ (8002e4c <__NVIC_GetPriorityGrouping+0x18>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	f003 0307 	and.w	r3, r3, #7
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	db0b      	blt.n	8002e7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	f003 021f 	and.w	r2, r3, #31
 8002e68:	4906      	ldr	r1, [pc, #24]	@ (8002e84 <__NVIC_EnableIRQ+0x34>)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	2001      	movs	r0, #1
 8002e72:	fa00 f202 	lsl.w	r2, r0, r2
 8002e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	e000e100 	.word	0xe000e100

08002e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	6039      	str	r1, [r7, #0]
 8002e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db0a      	blt.n	8002eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	490c      	ldr	r1, [pc, #48]	@ (8002ed4 <__NVIC_SetPriority+0x4c>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb0:	e00a      	b.n	8002ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4908      	ldr	r1, [pc, #32]	@ (8002ed8 <__NVIC_SetPriority+0x50>)
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	3b04      	subs	r3, #4
 8002ec0:	0112      	lsls	r2, r2, #4
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	761a      	strb	r2, [r3, #24]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000e100 	.word	0xe000e100
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	@ 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f1c3 0307 	rsb	r3, r3, #7
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	bf28      	it	cs
 8002efa:	2304      	movcs	r3, #4
 8002efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d902      	bls.n	8002f0c <NVIC_EncodePriority+0x30>
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3b03      	subs	r3, #3
 8002f0a:	e000      	b.n	8002f0e <NVIC_EncodePriority+0x32>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	401a      	ands	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	43d9      	mvns	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	4313      	orrs	r3, r2
         );
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3724      	adds	r7, #36	@ 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff4f 	bl	8002dec <__NVIC_SetPriorityGrouping>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f68:	f7ff ff64 	bl	8002e34 <__NVIC_GetPriorityGrouping>
 8002f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f7ff ffb2 	bl	8002edc <NVIC_EncodePriority>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff81 	bl	8002e88 <__NVIC_SetPriority>
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff57 	bl	8002e50 <__NVIC_EnableIRQ>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d005      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	e051      	b.n	8003074 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 020e 	bic.w	r2, r2, #14
 8002fde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a22      	ldr	r2, [pc, #136]	@ (8003080 <HAL_DMA_Abort_IT+0xd4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d029      	beq.n	800304e <HAL_DMA_Abort_IT+0xa2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a21      	ldr	r2, [pc, #132]	@ (8003084 <HAL_DMA_Abort_IT+0xd8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <HAL_DMA_Abort_IT+0x9e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1f      	ldr	r2, [pc, #124]	@ (8003088 <HAL_DMA_Abort_IT+0xdc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01a      	beq.n	8003044 <HAL_DMA_Abort_IT+0x98>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1e      	ldr	r2, [pc, #120]	@ (800308c <HAL_DMA_Abort_IT+0xe0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d012      	beq.n	800303e <HAL_DMA_Abort_IT+0x92>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1c      	ldr	r2, [pc, #112]	@ (8003090 <HAL_DMA_Abort_IT+0xe4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00a      	beq.n	8003038 <HAL_DMA_Abort_IT+0x8c>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1b      	ldr	r2, [pc, #108]	@ (8003094 <HAL_DMA_Abort_IT+0xe8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d102      	bne.n	8003032 <HAL_DMA_Abort_IT+0x86>
 800302c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003030:	e00e      	b.n	8003050 <HAL_DMA_Abort_IT+0xa4>
 8003032:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003036:	e00b      	b.n	8003050 <HAL_DMA_Abort_IT+0xa4>
 8003038:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800303c:	e008      	b.n	8003050 <HAL_DMA_Abort_IT+0xa4>
 800303e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003042:	e005      	b.n	8003050 <HAL_DMA_Abort_IT+0xa4>
 8003044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003048:	e002      	b.n	8003050 <HAL_DMA_Abort_IT+0xa4>
 800304a:	2310      	movs	r3, #16
 800304c:	e000      	b.n	8003050 <HAL_DMA_Abort_IT+0xa4>
 800304e:	2301      	movs	r3, #1
 8003050:	4a11      	ldr	r2, [pc, #68]	@ (8003098 <HAL_DMA_Abort_IT+0xec>)
 8003052:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
    } 
  }
  return status;
 8003074:	7bfb      	ldrb	r3, [r7, #15]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40020008 	.word	0x40020008
 8003084:	4002001c 	.word	0x4002001c
 8003088:	40020030 	.word	0x40020030
 800308c:	40020044 	.word	0x40020044
 8003090:	40020058 	.word	0x40020058
 8003094:	4002006c 	.word	0x4002006c
 8003098:	40020000 	.word	0x40020000

0800309c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800309c:	b480      	push	{r7}
 800309e:	b08b      	sub	sp, #44	@ 0x2c
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030a6:	2300      	movs	r3, #0
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030aa:	2300      	movs	r3, #0
 80030ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ae:	e169      	b.n	8003384 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030b0:	2201      	movs	r2, #1
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	f040 8158 	bne.w	800337e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4a9a      	ldr	r2, [pc, #616]	@ (800333c <HAL_GPIO_Init+0x2a0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d05e      	beq.n	8003196 <HAL_GPIO_Init+0xfa>
 80030d8:	4a98      	ldr	r2, [pc, #608]	@ (800333c <HAL_GPIO_Init+0x2a0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d875      	bhi.n	80031ca <HAL_GPIO_Init+0x12e>
 80030de:	4a98      	ldr	r2, [pc, #608]	@ (8003340 <HAL_GPIO_Init+0x2a4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d058      	beq.n	8003196 <HAL_GPIO_Init+0xfa>
 80030e4:	4a96      	ldr	r2, [pc, #600]	@ (8003340 <HAL_GPIO_Init+0x2a4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d86f      	bhi.n	80031ca <HAL_GPIO_Init+0x12e>
 80030ea:	4a96      	ldr	r2, [pc, #600]	@ (8003344 <HAL_GPIO_Init+0x2a8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d052      	beq.n	8003196 <HAL_GPIO_Init+0xfa>
 80030f0:	4a94      	ldr	r2, [pc, #592]	@ (8003344 <HAL_GPIO_Init+0x2a8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d869      	bhi.n	80031ca <HAL_GPIO_Init+0x12e>
 80030f6:	4a94      	ldr	r2, [pc, #592]	@ (8003348 <HAL_GPIO_Init+0x2ac>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d04c      	beq.n	8003196 <HAL_GPIO_Init+0xfa>
 80030fc:	4a92      	ldr	r2, [pc, #584]	@ (8003348 <HAL_GPIO_Init+0x2ac>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d863      	bhi.n	80031ca <HAL_GPIO_Init+0x12e>
 8003102:	4a92      	ldr	r2, [pc, #584]	@ (800334c <HAL_GPIO_Init+0x2b0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d046      	beq.n	8003196 <HAL_GPIO_Init+0xfa>
 8003108:	4a90      	ldr	r2, [pc, #576]	@ (800334c <HAL_GPIO_Init+0x2b0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d85d      	bhi.n	80031ca <HAL_GPIO_Init+0x12e>
 800310e:	2b12      	cmp	r3, #18
 8003110:	d82a      	bhi.n	8003168 <HAL_GPIO_Init+0xcc>
 8003112:	2b12      	cmp	r3, #18
 8003114:	d859      	bhi.n	80031ca <HAL_GPIO_Init+0x12e>
 8003116:	a201      	add	r2, pc, #4	@ (adr r2, 800311c <HAL_GPIO_Init+0x80>)
 8003118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311c:	08003197 	.word	0x08003197
 8003120:	08003171 	.word	0x08003171
 8003124:	08003183 	.word	0x08003183
 8003128:	080031c5 	.word	0x080031c5
 800312c:	080031cb 	.word	0x080031cb
 8003130:	080031cb 	.word	0x080031cb
 8003134:	080031cb 	.word	0x080031cb
 8003138:	080031cb 	.word	0x080031cb
 800313c:	080031cb 	.word	0x080031cb
 8003140:	080031cb 	.word	0x080031cb
 8003144:	080031cb 	.word	0x080031cb
 8003148:	080031cb 	.word	0x080031cb
 800314c:	080031cb 	.word	0x080031cb
 8003150:	080031cb 	.word	0x080031cb
 8003154:	080031cb 	.word	0x080031cb
 8003158:	080031cb 	.word	0x080031cb
 800315c:	080031cb 	.word	0x080031cb
 8003160:	08003179 	.word	0x08003179
 8003164:	0800318d 	.word	0x0800318d
 8003168:	4a79      	ldr	r2, [pc, #484]	@ (8003350 <HAL_GPIO_Init+0x2b4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d013      	beq.n	8003196 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800316e:	e02c      	b.n	80031ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	623b      	str	r3, [r7, #32]
          break;
 8003176:	e029      	b.n	80031cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	3304      	adds	r3, #4
 800317e:	623b      	str	r3, [r7, #32]
          break;
 8003180:	e024      	b.n	80031cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	3308      	adds	r3, #8
 8003188:	623b      	str	r3, [r7, #32]
          break;
 800318a:	e01f      	b.n	80031cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	330c      	adds	r3, #12
 8003192:	623b      	str	r3, [r7, #32]
          break;
 8003194:	e01a      	b.n	80031cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800319e:	2304      	movs	r3, #4
 80031a0:	623b      	str	r3, [r7, #32]
          break;
 80031a2:	e013      	b.n	80031cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031ac:	2308      	movs	r3, #8
 80031ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	611a      	str	r2, [r3, #16]
          break;
 80031b6:	e009      	b.n	80031cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031b8:	2308      	movs	r3, #8
 80031ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	615a      	str	r2, [r3, #20]
          break;
 80031c2:	e003      	b.n	80031cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031c4:	2300      	movs	r3, #0
 80031c6:	623b      	str	r3, [r7, #32]
          break;
 80031c8:	e000      	b.n	80031cc <HAL_GPIO_Init+0x130>
          break;
 80031ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2bff      	cmp	r3, #255	@ 0xff
 80031d0:	d801      	bhi.n	80031d6 <HAL_GPIO_Init+0x13a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	e001      	b.n	80031da <HAL_GPIO_Init+0x13e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2bff      	cmp	r3, #255	@ 0xff
 80031e0:	d802      	bhi.n	80031e8 <HAL_GPIO_Init+0x14c>
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	e002      	b.n	80031ee <HAL_GPIO_Init+0x152>
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	3b08      	subs	r3, #8
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	210f      	movs	r1, #15
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	401a      	ands	r2, r3
 8003200:	6a39      	ldr	r1, [r7, #32]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	fa01 f303 	lsl.w	r3, r1, r3
 8003208:	431a      	orrs	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 80b1 	beq.w	800337e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800321c:	4b4d      	ldr	r3, [pc, #308]	@ (8003354 <HAL_GPIO_Init+0x2b8>)
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4a4c      	ldr	r2, [pc, #304]	@ (8003354 <HAL_GPIO_Init+0x2b8>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6193      	str	r3, [r2, #24]
 8003228:	4b4a      	ldr	r3, [pc, #296]	@ (8003354 <HAL_GPIO_Init+0x2b8>)
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003234:	4a48      	ldr	r2, [pc, #288]	@ (8003358 <HAL_GPIO_Init+0x2bc>)
 8003236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	3302      	adds	r3, #2
 800323c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003240:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	220f      	movs	r2, #15
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4013      	ands	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a40      	ldr	r2, [pc, #256]	@ (800335c <HAL_GPIO_Init+0x2c0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d013      	beq.n	8003288 <HAL_GPIO_Init+0x1ec>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3f      	ldr	r2, [pc, #252]	@ (8003360 <HAL_GPIO_Init+0x2c4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00d      	beq.n	8003284 <HAL_GPIO_Init+0x1e8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a3e      	ldr	r2, [pc, #248]	@ (8003364 <HAL_GPIO_Init+0x2c8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d007      	beq.n	8003280 <HAL_GPIO_Init+0x1e4>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a3d      	ldr	r2, [pc, #244]	@ (8003368 <HAL_GPIO_Init+0x2cc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d101      	bne.n	800327c <HAL_GPIO_Init+0x1e0>
 8003278:	2303      	movs	r3, #3
 800327a:	e006      	b.n	800328a <HAL_GPIO_Init+0x1ee>
 800327c:	2304      	movs	r3, #4
 800327e:	e004      	b.n	800328a <HAL_GPIO_Init+0x1ee>
 8003280:	2302      	movs	r3, #2
 8003282:	e002      	b.n	800328a <HAL_GPIO_Init+0x1ee>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <HAL_GPIO_Init+0x1ee>
 8003288:	2300      	movs	r3, #0
 800328a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328c:	f002 0203 	and.w	r2, r2, #3
 8003290:	0092      	lsls	r2, r2, #2
 8003292:	4093      	lsls	r3, r2
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800329a:	492f      	ldr	r1, [pc, #188]	@ (8003358 <HAL_GPIO_Init+0x2bc>)
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	3302      	adds	r3, #2
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d006      	beq.n	80032c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032b4:	4b2d      	ldr	r3, [pc, #180]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	492c      	ldr	r1, [pc, #176]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]
 80032c0:	e006      	b.n	80032d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032c2:	4b2a      	ldr	r3, [pc, #168]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	4928      	ldr	r1, [pc, #160]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d006      	beq.n	80032ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032dc:	4b23      	ldr	r3, [pc, #140]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	4922      	ldr	r1, [pc, #136]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60cb      	str	r3, [r1, #12]
 80032e8:	e006      	b.n	80032f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032ea:	4b20      	ldr	r3, [pc, #128]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	491e      	ldr	r1, [pc, #120]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d006      	beq.n	8003312 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003304:	4b19      	ldr	r3, [pc, #100]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4918      	ldr	r1, [pc, #96]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003312:	4b16      	ldr	r3, [pc, #88]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	43db      	mvns	r3, r3
 800331a:	4914      	ldr	r1, [pc, #80]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 800331c:	4013      	ands	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d021      	beq.n	8003370 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800332c:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	490e      	ldr	r1, [pc, #56]	@ (800336c <HAL_GPIO_Init+0x2d0>)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
 8003338:	e021      	b.n	800337e <HAL_GPIO_Init+0x2e2>
 800333a:	bf00      	nop
 800333c:	10320000 	.word	0x10320000
 8003340:	10310000 	.word	0x10310000
 8003344:	10220000 	.word	0x10220000
 8003348:	10210000 	.word	0x10210000
 800334c:	10120000 	.word	0x10120000
 8003350:	10110000 	.word	0x10110000
 8003354:	40021000 	.word	0x40021000
 8003358:	40010000 	.word	0x40010000
 800335c:	40010800 	.word	0x40010800
 8003360:	40010c00 	.word	0x40010c00
 8003364:	40011000 	.word	0x40011000
 8003368:	40011400 	.word	0x40011400
 800336c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003370:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <HAL_GPIO_Init+0x304>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	43db      	mvns	r3, r3
 8003378:	4909      	ldr	r1, [pc, #36]	@ (80033a0 <HAL_GPIO_Init+0x304>)
 800337a:	4013      	ands	r3, r2
 800337c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	3301      	adds	r3, #1
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	fa22 f303 	lsr.w	r3, r2, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	f47f ae8e 	bne.w	80030b0 <HAL_GPIO_Init+0x14>
  }
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	372c      	adds	r7, #44	@ 0x2c
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	40010400 	.word	0x40010400

080033a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]
 80033b0:	4613      	mov	r3, r2
 80033b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033b4:	787b      	ldrb	r3, [r7, #1]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033c0:	e003      	b.n	80033ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033c2:	887b      	ldrh	r3, [r7, #2]
 80033c4:	041a      	lsls	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	611a      	str	r2, [r3, #16]
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e12b      	b.n	800363e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff f9c0 	bl	8002780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2224      	movs	r2, #36	@ 0x24
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003426:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003436:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003438:	f001 f832 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 800343c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4a81      	ldr	r2, [pc, #516]	@ (8003648 <HAL_I2C_Init+0x274>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d807      	bhi.n	8003458 <HAL_I2C_Init+0x84>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4a80      	ldr	r2, [pc, #512]	@ (800364c <HAL_I2C_Init+0x278>)
 800344c:	4293      	cmp	r3, r2
 800344e:	bf94      	ite	ls
 8003450:	2301      	movls	r3, #1
 8003452:	2300      	movhi	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	e006      	b.n	8003466 <HAL_I2C_Init+0x92>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a7d      	ldr	r2, [pc, #500]	@ (8003650 <HAL_I2C_Init+0x27c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	bf94      	ite	ls
 8003460:	2301      	movls	r3, #1
 8003462:	2300      	movhi	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0e7      	b.n	800363e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a78      	ldr	r2, [pc, #480]	@ (8003654 <HAL_I2C_Init+0x280>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	0c9b      	lsrs	r3, r3, #18
 8003478:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4a6a      	ldr	r2, [pc, #424]	@ (8003648 <HAL_I2C_Init+0x274>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d802      	bhi.n	80034a8 <HAL_I2C_Init+0xd4>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	3301      	adds	r3, #1
 80034a6:	e009      	b.n	80034bc <HAL_I2C_Init+0xe8>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034ae:	fb02 f303 	mul.w	r3, r2, r3
 80034b2:	4a69      	ldr	r2, [pc, #420]	@ (8003658 <HAL_I2C_Init+0x284>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	099b      	lsrs	r3, r3, #6
 80034ba:	3301      	adds	r3, #1
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	495c      	ldr	r1, [pc, #368]	@ (8003648 <HAL_I2C_Init+0x274>)
 80034d8:	428b      	cmp	r3, r1
 80034da:	d819      	bhi.n	8003510 <HAL_I2C_Init+0x13c>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e59      	subs	r1, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ea:	1c59      	adds	r1, r3, #1
 80034ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034f0:	400b      	ands	r3, r1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_I2C_Init+0x138>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1e59      	subs	r1, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fbb1 f3f3 	udiv	r3, r1, r3
 8003504:	3301      	adds	r3, #1
 8003506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350a:	e051      	b.n	80035b0 <HAL_I2C_Init+0x1dc>
 800350c:	2304      	movs	r3, #4
 800350e:	e04f      	b.n	80035b0 <HAL_I2C_Init+0x1dc>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d111      	bne.n	800353c <HAL_I2C_Init+0x168>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1e58      	subs	r0, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	440b      	add	r3, r1
 8003526:	fbb0 f3f3 	udiv	r3, r0, r3
 800352a:	3301      	adds	r3, #1
 800352c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e012      	b.n	8003562 <HAL_I2C_Init+0x18e>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1e58      	subs	r0, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	0099      	lsls	r1, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003552:	3301      	adds	r3, #1
 8003554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Init+0x196>
 8003566:	2301      	movs	r3, #1
 8003568:	e022      	b.n	80035b0 <HAL_I2C_Init+0x1dc>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10e      	bne.n	8003590 <HAL_I2C_Init+0x1bc>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1e58      	subs	r0, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	460b      	mov	r3, r1
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	440b      	add	r3, r1
 8003580:	fbb0 f3f3 	udiv	r3, r0, r3
 8003584:	3301      	adds	r3, #1
 8003586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800358e:	e00f      	b.n	80035b0 <HAL_I2C_Init+0x1dc>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1e58      	subs	r0, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	0099      	lsls	r1, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a6:	3301      	adds	r3, #1
 80035a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	6809      	ldr	r1, [r1, #0]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69da      	ldr	r2, [r3, #28]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6911      	ldr	r1, [r2, #16]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68d2      	ldr	r2, [r2, #12]
 80035ea:	4311      	orrs	r1, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	000186a0 	.word	0x000186a0
 800364c:	001e847f 	.word	0x001e847f
 8003650:	003d08ff 	.word	0x003d08ff
 8003654:	431bde83 	.word	0x431bde83
 8003658:	10624dd3 	.word	0x10624dd3

0800365c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	461a      	mov	r2, r3
 8003668:	460b      	mov	r3, r1
 800366a:	817b      	strh	r3, [r7, #10]
 800366c:	4613      	mov	r3, r2
 800366e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003670:	f7ff fb8e 	bl	8002d90 <HAL_GetTick>
 8003674:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b20      	cmp	r3, #32
 8003680:	f040 80e0 	bne.w	8003844 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	2319      	movs	r3, #25
 800368a:	2201      	movs	r2, #1
 800368c:	4970      	ldr	r1, [pc, #448]	@ (8003850 <HAL_I2C_Master_Transmit+0x1f4>)
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f964 	bl	800395c <I2C_WaitOnFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
 800369c:	e0d3      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_I2C_Master_Transmit+0x50>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e0cc      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d007      	beq.n	80036d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2221      	movs	r2, #33	@ 0x21
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2210      	movs	r2, #16
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	893a      	ldrh	r2, [r7, #8]
 8003702:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a50      	ldr	r2, [pc, #320]	@ (8003854 <HAL_I2C_Master_Transmit+0x1f8>)
 8003712:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003714:	8979      	ldrh	r1, [r7, #10]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	6a3a      	ldr	r2, [r7, #32]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f89c 	bl	8003858 <I2C_MasterRequestWrite>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e08d      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003740:	e066      	b.n	8003810 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	6a39      	ldr	r1, [r7, #32]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 fa22 	bl	8003b90 <I2C_WaitOnTXEFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00d      	beq.n	800376e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	2b04      	cmp	r3, #4
 8003758:	d107      	bne.n	800376a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003768:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e06b      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	781a      	ldrb	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d11b      	bne.n	80037e4 <HAL_I2C_Master_Transmit+0x188>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d017      	beq.n	80037e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	6a39      	ldr	r1, [r7, #32]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fa19 	bl	8003c20 <I2C_WaitOnBTFFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d107      	bne.n	800380c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800380a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e01a      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003814:	2b00      	cmp	r3, #0
 8003816:	d194      	bne.n	8003742 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003844:	2302      	movs	r3, #2
  }
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	00100002 	.word	0x00100002
 8003854:	ffff0000 	.word	0xffff0000

08003858 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	460b      	mov	r3, r1
 8003866:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d006      	beq.n	8003882 <I2C_MasterRequestWrite+0x2a>
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d003      	beq.n	8003882 <I2C_MasterRequestWrite+0x2a>
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003880:	d108      	bne.n	8003894 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e00b      	b.n	80038ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003898:	2b12      	cmp	r3, #18
 800389a:	d107      	bne.n	80038ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f84f 	bl	800395c <I2C_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00d      	beq.n	80038e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038d2:	d103      	bne.n	80038dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e035      	b.n	800394c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038e8:	d108      	bne.n	80038fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038ea:	897b      	ldrh	r3, [r7, #10]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038f8:	611a      	str	r2, [r3, #16]
 80038fa:	e01b      	b.n	8003934 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038fc:	897b      	ldrh	r3, [r7, #10]
 80038fe:	11db      	asrs	r3, r3, #7
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f003 0306 	and.w	r3, r3, #6
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f063 030f 	orn	r3, r3, #15
 800390c:	b2da      	uxtb	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	490e      	ldr	r1, [pc, #56]	@ (8003954 <I2C_MasterRequestWrite+0xfc>)
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f898 	bl	8003a50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e010      	b.n	800394c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800392a:	897b      	ldrh	r3, [r7, #10]
 800392c:	b2da      	uxtb	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	4907      	ldr	r1, [pc, #28]	@ (8003958 <I2C_MasterRequestWrite+0x100>)
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f888 	bl	8003a50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	00010008 	.word	0x00010008
 8003958:	00010002 	.word	0x00010002

0800395c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	4613      	mov	r3, r2
 800396a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800396c:	e048      	b.n	8003a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003974:	d044      	beq.n	8003a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003976:	f7ff fa0b 	bl	8002d90 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d302      	bcc.n	800398c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d139      	bne.n	8003a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	0c1b      	lsrs	r3, r3, #16
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10d      	bne.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	43da      	mvns	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4013      	ands	r3, r2
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	e00c      	b.n	80039cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	43da      	mvns	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4013      	ands	r3, r2
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d116      	bne.n	8003a00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	f043 0220 	orr.w	r2, r3, #32
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e023      	b.n	8003a48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	0c1b      	lsrs	r3, r3, #16
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d10d      	bne.n	8003a26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	43da      	mvns	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4013      	ands	r3, r2
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	e00c      	b.n	8003a40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	43da      	mvns	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4013      	ands	r3, r2
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d093      	beq.n	800396e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a5e:	e071      	b.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a6e:	d123      	bne.n	8003ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa4:	f043 0204 	orr.w	r2, r3, #4
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e067      	b.n	8003b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003abe:	d041      	beq.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac0:	f7ff f966 	bl	8002d90 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d302      	bcc.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d136      	bne.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d10c      	bne.n	8003afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4013      	ands	r3, r2
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	bf14      	ite	ne
 8003af2:	2301      	movne	r3, #1
 8003af4:	2300      	moveq	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	e00b      	b.n	8003b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	43da      	mvns	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	4013      	ands	r3, r2
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d016      	beq.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	f043 0220 	orr.w	r2, r3, #32
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e021      	b.n	8003b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	0c1b      	lsrs	r3, r3, #16
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d10c      	bne.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	43da      	mvns	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e00b      	b.n	8003b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4013      	ands	r3, r2
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bf14      	ite	ne
 8003b7a:	2301      	movne	r3, #1
 8003b7c:	2300      	moveq	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f47f af6d 	bne.w	8003a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b9c:	e034      	b.n	8003c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f886 	bl	8003cb0 <I2C_IsAcknowledgeFailed>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e034      	b.n	8003c18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bb4:	d028      	beq.n	8003c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb6:	f7ff f8eb 	bl	8002d90 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d302      	bcc.n	8003bcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d11d      	bne.n	8003c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd6:	2b80      	cmp	r3, #128	@ 0x80
 8003bd8:	d016      	beq.n	8003c08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	f043 0220 	orr.w	r2, r3, #32
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e007      	b.n	8003c18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c12:	2b80      	cmp	r3, #128	@ 0x80
 8003c14:	d1c3      	bne.n	8003b9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c2c:	e034      	b.n	8003c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f83e 	bl	8003cb0 <I2C_IsAcknowledgeFailed>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e034      	b.n	8003ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c44:	d028      	beq.n	8003c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c46:	f7ff f8a3 	bl	8002d90 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d302      	bcc.n	8003c5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d11d      	bne.n	8003c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d016      	beq.n	8003c98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e007      	b.n	8003ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d1c3      	bne.n	8003c2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc6:	d11b      	bne.n	8003d00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cec:	f043 0204 	orr.w	r2, r3, #4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e272      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 8087 	beq.w	8003e3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d2c:	4b92      	ldr	r3, [pc, #584]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d00c      	beq.n	8003d52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d38:	4b8f      	ldr	r3, [pc, #572]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d112      	bne.n	8003d6a <HAL_RCC_OscConfig+0x5e>
 8003d44:	4b8c      	ldr	r3, [pc, #560]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d50:	d10b      	bne.n	8003d6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d52:	4b89      	ldr	r3, [pc, #548]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d06c      	beq.n	8003e38 <HAL_RCC_OscConfig+0x12c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d168      	bne.n	8003e38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e24c      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x76>
 8003d74:	4b80      	ldr	r3, [pc, #512]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a7f      	ldr	r2, [pc, #508]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	e02e      	b.n	8003de0 <HAL_RCC_OscConfig+0xd4>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x98>
 8003d8a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a7a      	ldr	r2, [pc, #488]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b78      	ldr	r3, [pc, #480]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a77      	ldr	r2, [pc, #476]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e01d      	b.n	8003de0 <HAL_RCC_OscConfig+0xd4>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0xbc>
 8003dae:	4b72      	ldr	r3, [pc, #456]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a71      	ldr	r2, [pc, #452]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b6f      	ldr	r3, [pc, #444]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a6e      	ldr	r2, [pc, #440]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e00b      	b.n	8003de0 <HAL_RCC_OscConfig+0xd4>
 8003dc8:	4b6b      	ldr	r3, [pc, #428]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a6a      	ldr	r2, [pc, #424]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	4b68      	ldr	r3, [pc, #416]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a67      	ldr	r2, [pc, #412]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d013      	beq.n	8003e10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fe ffd2 	bl	8002d90 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df0:	f7fe ffce 	bl	8002d90 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	@ 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e200      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e02:	4b5d      	ldr	r3, [pc, #372]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0xe4>
 8003e0e:	e014      	b.n	8003e3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fe ffbe 	bl	8002d90 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e18:	f7fe ffba 	bl	8002d90 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b64      	cmp	r3, #100	@ 0x64
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e1ec      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2a:	4b53      	ldr	r3, [pc, #332]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x10c>
 8003e36:	e000      	b.n	8003e3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d063      	beq.n	8003f0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e46:	4b4c      	ldr	r3, [pc, #304]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e52:	4b49      	ldr	r3, [pc, #292]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d11c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x18c>
 8003e5e:	4b46      	ldr	r3, [pc, #280]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d116      	bne.n	8003e98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6a:	4b43      	ldr	r3, [pc, #268]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_RCC_OscConfig+0x176>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d001      	beq.n	8003e82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e1c0      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e82:	4b3d      	ldr	r3, [pc, #244]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4939      	ldr	r1, [pc, #228]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e96:	e03a      	b.n	8003f0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d020      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea0:	4b36      	ldr	r3, [pc, #216]	@ (8003f7c <HAL_RCC_OscConfig+0x270>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea6:	f7fe ff73 	bl	8002d90 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eae:	f7fe ff6f 	bl	8002d90 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e1a1      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4927      	ldr	r1, [pc, #156]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	600b      	str	r3, [r1, #0]
 8003ee0:	e015      	b.n	8003f0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ee2:	4b26      	ldr	r3, [pc, #152]	@ (8003f7c <HAL_RCC_OscConfig+0x270>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fe ff52 	bl	8002d90 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef0:	f7fe ff4e 	bl	8002d90 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e180      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f02:	4b1d      	ldr	r3, [pc, #116]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d03a      	beq.n	8003f90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d019      	beq.n	8003f56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f22:	4b17      	ldr	r3, [pc, #92]	@ (8003f80 <HAL_RCC_OscConfig+0x274>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f28:	f7fe ff32 	bl	8002d90 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f30:	f7fe ff2e 	bl	8002d90 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e160      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <HAL_RCC_OscConfig+0x26c>)
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f4e:	2001      	movs	r0, #1
 8003f50:	f000 fafe 	bl	8004550 <RCC_Delay>
 8003f54:	e01c      	b.n	8003f90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f56:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <HAL_RCC_OscConfig+0x274>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5c:	f7fe ff18 	bl	8002d90 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f62:	e00f      	b.n	8003f84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f64:	f7fe ff14 	bl	8002d90 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d908      	bls.n	8003f84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e146      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	42420000 	.word	0x42420000
 8003f80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f84:	4b92      	ldr	r3, [pc, #584]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e9      	bne.n	8003f64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80a6 	beq.w	80040ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa2:	4b8b      	ldr	r3, [pc, #556]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10d      	bne.n	8003fca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fae:	4b88      	ldr	r3, [pc, #544]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	4a87      	ldr	r2, [pc, #540]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8003fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fb8:	61d3      	str	r3, [r2, #28]
 8003fba:	4b85      	ldr	r3, [pc, #532]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fca:	4b82      	ldr	r3, [pc, #520]	@ (80041d4 <HAL_RCC_OscConfig+0x4c8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d118      	bne.n	8004008 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80041d4 <HAL_RCC_OscConfig+0x4c8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a7e      	ldr	r2, [pc, #504]	@ (80041d4 <HAL_RCC_OscConfig+0x4c8>)
 8003fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fe2:	f7fe fed5 	bl	8002d90 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fea:	f7fe fed1 	bl	8002d90 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b64      	cmp	r3, #100	@ 0x64
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e103      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffc:	4b75      	ldr	r3, [pc, #468]	@ (80041d4 <HAL_RCC_OscConfig+0x4c8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d106      	bne.n	800401e <HAL_RCC_OscConfig+0x312>
 8004010:	4b6f      	ldr	r3, [pc, #444]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	4a6e      	ldr	r2, [pc, #440]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6213      	str	r3, [r2, #32]
 800401c:	e02d      	b.n	800407a <HAL_RCC_OscConfig+0x36e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10c      	bne.n	8004040 <HAL_RCC_OscConfig+0x334>
 8004026:	4b6a      	ldr	r3, [pc, #424]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	4a69      	ldr	r2, [pc, #420]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	6213      	str	r3, [r2, #32]
 8004032:	4b67      	ldr	r3, [pc, #412]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	4a66      	ldr	r2, [pc, #408]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004038:	f023 0304 	bic.w	r3, r3, #4
 800403c:	6213      	str	r3, [r2, #32]
 800403e:	e01c      	b.n	800407a <HAL_RCC_OscConfig+0x36e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b05      	cmp	r3, #5
 8004046:	d10c      	bne.n	8004062 <HAL_RCC_OscConfig+0x356>
 8004048:	4b61      	ldr	r3, [pc, #388]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4a60      	ldr	r2, [pc, #384]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 800404e:	f043 0304 	orr.w	r3, r3, #4
 8004052:	6213      	str	r3, [r2, #32]
 8004054:	4b5e      	ldr	r3, [pc, #376]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	4a5d      	ldr	r2, [pc, #372]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	6213      	str	r3, [r2, #32]
 8004060:	e00b      	b.n	800407a <HAL_RCC_OscConfig+0x36e>
 8004062:	4b5b      	ldr	r3, [pc, #364]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	4a5a      	ldr	r2, [pc, #360]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	6213      	str	r3, [r2, #32]
 800406e:	4b58      	ldr	r3, [pc, #352]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	4a57      	ldr	r2, [pc, #348]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004074:	f023 0304 	bic.w	r3, r3, #4
 8004078:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d015      	beq.n	80040ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004082:	f7fe fe85 	bl	8002d90 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004088:	e00a      	b.n	80040a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408a:	f7fe fe81 	bl	8002d90 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004098:	4293      	cmp	r3, r2
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e0b1      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a0:	4b4b      	ldr	r3, [pc, #300]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0ee      	beq.n	800408a <HAL_RCC_OscConfig+0x37e>
 80040ac:	e014      	b.n	80040d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ae:	f7fe fe6f 	bl	8002d90 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b4:	e00a      	b.n	80040cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b6:	f7fe fe6b 	bl	8002d90 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e09b      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040cc:	4b40      	ldr	r3, [pc, #256]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ee      	bne.n	80040b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d105      	bne.n	80040ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040de:	4b3c      	ldr	r3, [pc, #240]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4a3b      	ldr	r2, [pc, #236]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 80040e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8087 	beq.w	8004202 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f4:	4b36      	ldr	r3, [pc, #216]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d061      	beq.n	80041c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d146      	bne.n	8004196 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004108:	4b33      	ldr	r3, [pc, #204]	@ (80041d8 <HAL_RCC_OscConfig+0x4cc>)
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410e:	f7fe fe3f 	bl	8002d90 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004116:	f7fe fe3b 	bl	8002d90 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e06d      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004128:	4b29      	ldr	r3, [pc, #164]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f0      	bne.n	8004116 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800413c:	d108      	bne.n	8004150 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800413e:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	4921      	ldr	r1, [pc, #132]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 800414c:	4313      	orrs	r3, r2
 800414e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004150:	4b1f      	ldr	r3, [pc, #124]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a19      	ldr	r1, [r3, #32]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	430b      	orrs	r3, r1
 8004162:	491b      	ldr	r1, [pc, #108]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	4313      	orrs	r3, r2
 8004166:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004168:	4b1b      	ldr	r3, [pc, #108]	@ (80041d8 <HAL_RCC_OscConfig+0x4cc>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416e:	f7fe fe0f 	bl	8002d90 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004176:	f7fe fe0b 	bl	8002d90 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e03d      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004188:	4b11      	ldr	r3, [pc, #68]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x46a>
 8004194:	e035      	b.n	8004202 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004196:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <HAL_RCC_OscConfig+0x4cc>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419c:	f7fe fdf8 	bl	8002d90 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fe fdf4 	bl	8002d90 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e026      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041b6:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x498>
 80041c2:	e01e      	b.n	8004202 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d107      	bne.n	80041dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e019      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40007000 	.word	0x40007000
 80041d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041dc:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <HAL_RCC_OscConfig+0x500>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d106      	bne.n	80041fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d001      	beq.n	8004202 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40021000 	.word	0x40021000

08004210 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0d0      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004224:	4b6a      	ldr	r3, [pc, #424]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d910      	bls.n	8004254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b67      	ldr	r3, [pc, #412]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 0207 	bic.w	r2, r3, #7
 800423a:	4965      	ldr	r1, [pc, #404]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b63      	ldr	r3, [pc, #396]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0b8      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d020      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800426c:	4b59      	ldr	r3, [pc, #356]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a58      	ldr	r2, [pc, #352]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004272:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004276:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004284:	4b53      	ldr	r3, [pc, #332]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4a52      	ldr	r2, [pc, #328]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 800428a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800428e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004290:	4b50      	ldr	r3, [pc, #320]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	494d      	ldr	r1, [pc, #308]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d040      	beq.n	8004330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b6:	4b47      	ldr	r3, [pc, #284]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d115      	bne.n	80042ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e07f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d107      	bne.n	80042de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ce:	4b41      	ldr	r3, [pc, #260]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e073      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042de:	4b3d      	ldr	r3, [pc, #244]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e06b      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ee:	4b39      	ldr	r3, [pc, #228]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f023 0203 	bic.w	r2, r3, #3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	4936      	ldr	r1, [pc, #216]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004300:	f7fe fd46 	bl	8002d90 <HAL_GetTick>
 8004304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	e00a      	b.n	800431e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004308:	f7fe fd42 	bl	8002d90 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e053      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431e:	4b2d      	ldr	r3, [pc, #180]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 020c 	and.w	r2, r3, #12
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	429a      	cmp	r2, r3
 800432e:	d1eb      	bne.n	8004308 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004330:	4b27      	ldr	r3, [pc, #156]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d210      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433e:	4b24      	ldr	r3, [pc, #144]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 0207 	bic.w	r2, r3, #7
 8004346:	4922      	ldr	r1, [pc, #136]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	4313      	orrs	r3, r2
 800434c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800434e:	4b20      	ldr	r3, [pc, #128]	@ (80043d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d001      	beq.n	8004360 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e032      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800436c:	4b19      	ldr	r3, [pc, #100]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4916      	ldr	r1, [pc, #88]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 800437a:	4313      	orrs	r3, r2
 800437c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800438a:	4b12      	ldr	r3, [pc, #72]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	490e      	ldr	r1, [pc, #56]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800439e:	f000 f821 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80043a2:	4602      	mov	r2, r0
 80043a4:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <HAL_RCC_ClockConfig+0x1c4>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	490a      	ldr	r1, [pc, #40]	@ (80043d8 <HAL_RCC_ClockConfig+0x1c8>)
 80043b0:	5ccb      	ldrb	r3, [r1, r3]
 80043b2:	fa22 f303 	lsr.w	r3, r2, r3
 80043b6:	4a09      	ldr	r2, [pc, #36]	@ (80043dc <HAL_RCC_ClockConfig+0x1cc>)
 80043b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043ba:	4b09      	ldr	r3, [pc, #36]	@ (80043e0 <HAL_RCC_ClockConfig+0x1d0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe faac 	bl	800291c <HAL_InitTick>

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40022000 	.word	0x40022000
 80043d4:	40021000 	.word	0x40021000
 80043d8:	080097b8 	.word	0x080097b8
 80043dc:	20000004 	.word	0x20000004
 80043e0:	20000008 	.word	0x20000008

080043e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	2300      	movs	r3, #0
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004478 <HAL_RCC_GetSysClockFreq+0x94>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b04      	cmp	r3, #4
 800440c:	d002      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x30>
 800440e:	2b08      	cmp	r3, #8
 8004410:	d003      	beq.n	800441a <HAL_RCC_GetSysClockFreq+0x36>
 8004412:	e027      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004414:	4b19      	ldr	r3, [pc, #100]	@ (800447c <HAL_RCC_GetSysClockFreq+0x98>)
 8004416:	613b      	str	r3, [r7, #16]
      break;
 8004418:	e027      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	0c9b      	lsrs	r3, r3, #18
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	4a17      	ldr	r2, [pc, #92]	@ (8004480 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004424:	5cd3      	ldrb	r3, [r2, r3]
 8004426:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d010      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004432:	4b11      	ldr	r3, [pc, #68]	@ (8004478 <HAL_RCC_GetSysClockFreq+0x94>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	0c5b      	lsrs	r3, r3, #17
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	4a11      	ldr	r2, [pc, #68]	@ (8004484 <HAL_RCC_GetSysClockFreq+0xa0>)
 800443e:	5cd3      	ldrb	r3, [r2, r3]
 8004440:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a0d      	ldr	r2, [pc, #52]	@ (800447c <HAL_RCC_GetSysClockFreq+0x98>)
 8004446:	fb03 f202 	mul.w	r2, r3, r2
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e004      	b.n	800445e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a0c      	ldr	r2, [pc, #48]	@ (8004488 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004458:	fb02 f303 	mul.w	r3, r2, r3
 800445c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	613b      	str	r3, [r7, #16]
      break;
 8004462:	e002      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004464:	4b05      	ldr	r3, [pc, #20]	@ (800447c <HAL_RCC_GetSysClockFreq+0x98>)
 8004466:	613b      	str	r3, [r7, #16]
      break;
 8004468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800446a:	693b      	ldr	r3, [r7, #16]
}
 800446c:	4618      	mov	r0, r3
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000
 800447c:	007a1200 	.word	0x007a1200
 8004480:	080097d0 	.word	0x080097d0
 8004484:	080097e0 	.word	0x080097e0
 8004488:	003d0900 	.word	0x003d0900

0800448c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004490:	4b02      	ldr	r3, [pc, #8]	@ (800449c <HAL_RCC_GetHCLKFreq+0x10>)
 8004492:	681b      	ldr	r3, [r3, #0]
}
 8004494:	4618      	mov	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr
 800449c:	20000004 	.word	0x20000004

080044a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044a4:	f7ff fff2 	bl	800448c <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b05      	ldr	r3, [pc, #20]	@ (80044c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4903      	ldr	r1, [pc, #12]	@ (80044c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40021000 	.word	0x40021000
 80044c4:	080097c8 	.word	0x080097c8

080044c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044cc:	f7ff ffde 	bl	800448c <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b05      	ldr	r3, [pc, #20]	@ (80044e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	0adb      	lsrs	r3, r3, #11
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4903      	ldr	r1, [pc, #12]	@ (80044ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000
 80044ec:	080097c8 	.word	0x080097c8

080044f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	220f      	movs	r2, #15
 80044fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004500:	4b11      	ldr	r3, [pc, #68]	@ (8004548 <HAL_RCC_GetClockConfig+0x58>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 0203 	and.w	r2, r3, #3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800450c:	4b0e      	ldr	r3, [pc, #56]	@ (8004548 <HAL_RCC_GetClockConfig+0x58>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004518:	4b0b      	ldr	r3, [pc, #44]	@ (8004548 <HAL_RCC_GetClockConfig+0x58>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004524:	4b08      	ldr	r3, [pc, #32]	@ (8004548 <HAL_RCC_GetClockConfig+0x58>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	08db      	lsrs	r3, r3, #3
 800452a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004532:	4b06      	ldr	r3, [pc, #24]	@ (800454c <HAL_RCC_GetClockConfig+0x5c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0207 	and.w	r2, r3, #7
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	40021000 	.word	0x40021000
 800454c:	40022000 	.word	0x40022000

08004550 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004558:	4b0a      	ldr	r3, [pc, #40]	@ (8004584 <RCC_Delay+0x34>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a0a      	ldr	r2, [pc, #40]	@ (8004588 <RCC_Delay+0x38>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	0a5b      	lsrs	r3, r3, #9
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	fb02 f303 	mul.w	r3, r2, r3
 800456a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800456c:	bf00      	nop
  }
  while (Delay --);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1e5a      	subs	r2, r3, #1
 8004572:	60fa      	str	r2, [r7, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f9      	bne.n	800456c <RCC_Delay+0x1c>
}
 8004578:	bf00      	nop
 800457a:	bf00      	nop
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr
 8004584:	20000004 	.word	0x20000004
 8004588:	10624dd3 	.word	0x10624dd3

0800458c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e076      	b.n	800468c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d108      	bne.n	80045b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ae:	d009      	beq.n	80045c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	61da      	str	r2, [r3, #28]
 80045b6:	e005      	b.n	80045c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fe f90c 	bl	80027fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004648:	ea42 0103 	orr.w	r1, r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	0c1a      	lsrs	r2, r3, #16
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f002 0204 	and.w	r2, r2, #4
 800466a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	69da      	ldr	r2, [r3, #28]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800467a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046a4:	f7fe fb74 	bl	8002d90 <HAL_GetTick>
 80046a8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d001      	beq.n	80046be <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80046ba:	2302      	movs	r3, #2
 80046bc:	e12a      	b.n	8004914 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <HAL_SPI_Transmit+0x36>
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e122      	b.n	8004914 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_SPI_Transmit+0x48>
 80046d8:	2302      	movs	r3, #2
 80046da:	e11b      	b.n	8004914 <HAL_SPI_Transmit+0x280>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2203      	movs	r2, #3
 80046e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	88fa      	ldrh	r2, [r7, #6]
 80046fc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	88fa      	ldrh	r2, [r7, #6]
 8004702:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800472a:	d10f      	bne.n	800474c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800473a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800474a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004756:	2b40      	cmp	r3, #64	@ 0x40
 8004758:	d007      	beq.n	800476a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004768:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004772:	d152      	bne.n	800481a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_SPI_Transmit+0xee>
 800477c:	8b7b      	ldrh	r3, [r7, #26]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d145      	bne.n	800480e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004786:	881a      	ldrh	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004792:	1c9a      	adds	r2, r3, #2
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047a6:	e032      	b.n	800480e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d112      	bne.n	80047dc <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ba:	881a      	ldrh	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c6:	1c9a      	adds	r2, r3, #2
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80047da:	e018      	b.n	800480e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047dc:	f7fe fad8 	bl	8002d90 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d803      	bhi.n	80047f4 <HAL_SPI_Transmit+0x160>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047f2:	d102      	bne.n	80047fa <HAL_SPI_Transmit+0x166>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e082      	b.n	8004914 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1c7      	bne.n	80047a8 <HAL_SPI_Transmit+0x114>
 8004818:	e053      	b.n	80048c2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_SPI_Transmit+0x194>
 8004822:	8b7b      	ldrh	r3, [r7, #26]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d147      	bne.n	80048b8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	7812      	ldrb	r2, [r2, #0]
 8004834:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800484e:	e033      	b.n	80048b8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b02      	cmp	r3, #2
 800485c:	d113      	bne.n	8004886 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004884:	e018      	b.n	80048b8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004886:	f7fe fa83 	bl	8002d90 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d803      	bhi.n	800489e <HAL_SPI_Transmit+0x20a>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800489c:	d102      	bne.n	80048a4 <HAL_SPI_Transmit+0x210>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e02d      	b.n	8004914 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1c6      	bne.n	8004850 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 fc36 	bl	8005138 <SPI_EndRxTxTransaction>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004912:	2300      	movs	r3, #0
  }
}
 8004914:	4618      	mov	r0, r3
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	4613      	mov	r3, r2
 8004928:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d001      	beq.n	800493a <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8004936:	2302      	movs	r3, #2
 8004938:	e07f      	b.n	8004a3a <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d110      	bne.n	8004964 <HAL_SPI_Receive_IT+0x48>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800494a:	d10b      	bne.n	8004964 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2204      	movs	r2, #4
 8004950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004954:	88fb      	ldrh	r3, [r7, #6]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f876 	bl	8004a4c <HAL_SPI_TransmitReceive_IT>
 8004960:	4603      	mov	r3, r0
 8004962:	e06a      	b.n	8004a3a <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_SPI_Receive_IT+0x54>
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e062      	b.n	8004a3a <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_SPI_Receive_IT+0x66>
 800497e:	2302      	movs	r3, #2
 8004980:	e05b      	b.n	8004a3a <HAL_SPI_Receive_IT+0x11e>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2204      	movs	r2, #4
 800498e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	88fa      	ldrh	r2, [r7, #6]
 80049a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	88fa      	ldrh	r2, [r7, #6]
 80049a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a44 <HAL_SPI_Receive_IT+0x128>)
 80049ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80049d0:	e002      	b.n	80049d8 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004a48 <HAL_SPI_Receive_IT+0x12c>)
 80049d6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049e0:	d10f      	bne.n	8004a02 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a00:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0c:	2b40      	cmp	r3, #64	@ 0x40
 8004a0e:	d007      	beq.n	8004a20 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a1e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004a36:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	08004f3d 	.word	0x08004f3d
 8004a48:	08004ef3 	.word	0x08004ef3

08004a4c <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a60:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d00c      	beq.n	8004a88 <HAL_SPI_TransmitReceive_IT+0x3c>
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a74:	d106      	bne.n	8004a84 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d102      	bne.n	8004a84 <HAL_SPI_TransmitReceive_IT+0x38>
 8004a7e:	7dfb      	ldrb	r3, [r7, #23]
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d001      	beq.n	8004a88 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004a84:	2302      	movs	r3, #2
 8004a86:	e061      	b.n	8004b4c <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <HAL_SPI_TransmitReceive_IT+0x4e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <HAL_SPI_TransmitReceive_IT+0x4e>
 8004a94:	887b      	ldrh	r3, [r7, #2]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e056      	b.n	8004b4c <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_SPI_TransmitReceive_IT+0x60>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e04f      	b.n	8004b4c <HAL_SPI_TransmitReceive_IT+0x100>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d003      	beq.n	8004ac8 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2205      	movs	r2, #5
 8004ac4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	887a      	ldrh	r2, [r7, #2]
 8004ad8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	887a      	ldrh	r2, [r7, #2]
 8004ade:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	887a      	ldrh	r2, [r7, #2]
 8004aea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	887a      	ldrh	r2, [r7, #2]
 8004af0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d006      	beq.n	8004b08 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4a16      	ldr	r2, [pc, #88]	@ (8004b58 <HAL_SPI_TransmitReceive_IT+0x10c>)
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4a16      	ldr	r2, [pc, #88]	@ (8004b5c <HAL_SPI_TransmitReceive_IT+0x110>)
 8004b04:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b06:	e005      	b.n	8004b14 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4a15      	ldr	r2, [pc, #84]	@ (8004b60 <HAL_SPI_TransmitReceive_IT+0x114>)
 8004b0c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4a14      	ldr	r2, [pc, #80]	@ (8004b64 <HAL_SPI_TransmitReceive_IT+0x118>)
 8004b12:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1e:	2b40      	cmp	r3, #64	@ 0x40
 8004b20:	d007      	beq.n	8004b32 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b30:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8004b48:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	08004e35 	.word	0x08004e35
 8004b5c:	08004e95 	.word	0x08004e95
 8004b60:	08004d71 	.word	0x08004d71
 8004b64:	08004dd5 	.word	0x08004dd5

08004b68 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10e      	bne.n	8004ba8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	4798      	blx	r3
    return;
 8004ba6:	e0b7      	b.n	8004d18 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <HAL_SPI_IRQHandler+0x5e>
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	4798      	blx	r3
    return;
 8004bc4:	e0a8      	b.n	8004d18 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	f003 0320 	and.w	r3, r3, #32
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d105      	bne.n	8004bdc <HAL_SPI_IRQHandler+0x74>
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 809e 	beq.w	8004d18 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 8098 	beq.w	8004d18 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d023      	beq.n	8004c3a <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d011      	beq.n	8004c22 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c02:	f043 0204 	orr.w	r2, r3, #4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	e00b      	b.n	8004c3a <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	693b      	ldr	r3, [r7, #16]
        return;
 8004c38:	e06e      	b.n	8004d18 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d014      	beq.n	8004c6e <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c48:	f043 0201 	orr.w	r2, r3, #1
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d04f      	beq.n	8004d16 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c84:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d104      	bne.n	8004ca2 <HAL_SPI_IRQHandler+0x13a>
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d034      	beq.n	8004d0c <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0203 	bic.w	r2, r2, #3
 8004cb0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d011      	beq.n	8004cde <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cbe:	4a18      	ldr	r2, [pc, #96]	@ (8004d20 <HAL_SPI_IRQHandler+0x1b8>)
 8004cc0:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe f970 	bl	8002fac <HAL_DMA_Abort_IT>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d005      	beq.n	8004cde <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d016      	beq.n	8004d14 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cea:	4a0d      	ldr	r2, [pc, #52]	@ (8004d20 <HAL_SPI_IRQHandler+0x1b8>)
 8004cec:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fe f95a 	bl	8002fac <HAL_DMA_Abort_IT>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004d0a:	e003      	b.n	8004d14 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f812 	bl	8004d36 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004d12:	e000      	b.n	8004d16 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8004d14:	bf00      	nop
    return;
 8004d16:	bf00      	nop
  }
}
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	08004d49 	.word	0x08004d49

08004d24 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bc80      	pop	{r7}
 8004d34:	4770      	bx	lr

08004d36 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr

08004d48 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff ffe7 	bl	8004d36 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d68:	bf00      	nop
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f103 020c 	add.w	r2, r3, #12
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d84:	7812      	ldrb	r2, [r2, #0]
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10f      	bne.n	8004dcc <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004dba:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d102      	bne.n	8004dcc <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f9e8 	bl	800519c <SPI_CloseRxTx_ISR>
    }
  }
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	7812      	ldrb	r2, [r2, #0]
 8004de8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10f      	bne.n	8004e2c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e1a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d102      	bne.n	8004e2c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f9b8 	bl	800519c <SPI_CloseRxTx_ISR>
    }
  }
}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e46:	b292      	uxth	r2, r2
 8004e48:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4e:	1c9a      	adds	r2, r3, #2
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10f      	bne.n	8004e8c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e7a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d102      	bne.n	8004e8c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f988 	bl	800519c <SPI_CloseRxTx_ISR>
    }
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea0:	881a      	ldrh	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eac:	1c9a      	adds	r2, r3, #2
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10f      	bne.n	8004eea <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ed8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f959 	bl	800519c <SPI_CloseRxTx_ISR>
    }
  }
}
 8004eea:	bf00      	nop
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f103 020c 	add.w	r2, r3, #12
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f06:	7812      	ldrb	r2, [r2, #0]
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	87da      	strh	r2, [r3, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d102      	bne.n	8004f34 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f9a8 	bl	8005284 <SPI_CloseRx_ISR>
  }
}
 8004f34:	bf00      	nop
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4e:	b292      	uxth	r2, r2
 8004f50:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f56:	1c9a      	adds	r2, r3, #2
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	87da      	strh	r2, [r3, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f985 	bl	8005284 <SPI_CloseRx_ISR>
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	4613      	mov	r3, r2
 8004f92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f94:	f7fd fefc 	bl	8002d90 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fa4:	f7fd fef4 	bl	8002d90 <HAL_GetTick>
 8004fa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004faa:	4b39      	ldr	r3, [pc, #228]	@ (8005090 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	015b      	lsls	r3, r3, #5
 8004fb0:	0d1b      	lsrs	r3, r3, #20
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	fb02 f303 	mul.w	r3, r2, r3
 8004fb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fba:	e054      	b.n	8005066 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fc2:	d050      	beq.n	8005066 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fc4:	f7fd fee4 	bl	8002d90 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d902      	bls.n	8004fda <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d13d      	bne.n	8005056 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ff2:	d111      	bne.n	8005018 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ffc:	d004      	beq.n	8005008 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005006:	d107      	bne.n	8005018 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005016:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005020:	d10f      	bne.n	8005042 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005040:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e017      	b.n	8005086 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3b01      	subs	r3, #1
 8005064:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	429a      	cmp	r2, r3
 8005074:	bf0c      	ite	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	2300      	movne	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	429a      	cmp	r2, r3
 8005082:	d19b      	bne.n	8004fbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20000004 	.word	0x20000004

08005094 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af02      	add	r7, sp, #8
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050a8:	d111      	bne.n	80050ce <SPI_EndRxTransaction+0x3a>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050b2:	d004      	beq.n	80050be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050bc:	d107      	bne.n	80050ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050cc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050d6:	d117      	bne.n	8005108 <SPI_EndRxTransaction+0x74>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e0:	d112      	bne.n	8005108 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2200      	movs	r2, #0
 80050ea:	2101      	movs	r1, #1
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff ff49 	bl	8004f84 <SPI_WaitFlagStateUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01a      	beq.n	800512e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fc:	f043 0220 	orr.w	r2, r3, #32
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e013      	b.n	8005130 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2200      	movs	r2, #0
 8005110:	2180      	movs	r1, #128	@ 0x80
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f7ff ff36 	bl	8004f84 <SPI_WaitFlagStateUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d007      	beq.n	800512e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005122:	f043 0220 	orr.w	r2, r3, #32
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e000      	b.n	8005130 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2201      	movs	r2, #1
 800514c:	2102      	movs	r1, #2
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f7ff ff18 	bl	8004f84 <SPI_WaitFlagStateUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800515e:	f043 0220 	orr.w	r2, r3, #32
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e013      	b.n	8005192 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2200      	movs	r2, #0
 8005172:	2180      	movs	r1, #128	@ 0x80
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7ff ff05 	bl	8004f84 <SPI_WaitFlagStateUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d007      	beq.n	8005190 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e000      	b.n	8005192 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80051a4:	4b35      	ldr	r3, [pc, #212]	@ (800527c <SPI_CloseRxTx_ISR+0xe0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a35      	ldr	r2, [pc, #212]	@ (8005280 <SPI_CloseRxTx_ISR+0xe4>)
 80051aa:	fba2 2303 	umull	r2, r3, r2, r3
 80051ae:	0a5b      	lsrs	r3, r3, #9
 80051b0:	2264      	movs	r2, #100	@ 0x64
 80051b2:	fb02 f303 	mul.w	r3, r2, r3
 80051b6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051b8:	f7fd fdea 	bl	8002d90 <HAL_GetTick>
 80051bc:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0220 	bic.w	r2, r2, #32
 80051cc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d106      	bne.n	80051e2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80051e0:	e009      	b.n	80051f6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0eb      	beq.n	80051ce <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	2164      	movs	r1, #100	@ 0x64
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff ff9c 	bl	8005138 <SPI_EndRxTxTransaction>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520a:	f043 0220 	orr.w	r2, r3, #32
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005234:	2b00      	cmp	r3, #0
 8005236:	d115      	bne.n	8005264 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b04      	cmp	r3, #4
 8005242:	d107      	bne.n	8005254 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7fc faf9 	bl	8001844 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005252:	e00e      	b.n	8005272 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff fd61 	bl	8004d24 <HAL_SPI_TxRxCpltCallback>
}
 8005262:	e006      	b.n	8005272 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f7ff fd62 	bl	8004d36 <HAL_SPI_ErrorCallback>
}
 8005272:	bf00      	nop
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000004 	.word	0x20000004
 8005280:	057619f1 	.word	0x057619f1

08005284 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800529a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800529c:	f7fd fd78 	bl	8002d90 <HAL_GetTick>
 80052a0:	4603      	mov	r3, r0
 80052a2:	461a      	mov	r2, r3
 80052a4:	2164      	movs	r1, #100	@ 0x64
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff fef4 	bl	8005094 <SPI_EndRxTransaction>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b6:	f043 0220 	orr.w	r2, r3, #32
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d103      	bne.n	80052f4 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7fc faa9 	bl	8001844 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80052f2:	e002      	b.n	80052fa <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff fd1e 	bl	8004d36 <HAL_SPI_ErrorCallback>
}
 80052fa:	bf00      	nop
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e041      	b.n	8005398 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f839 	bl	80053a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3304      	adds	r3, #4
 800533e:	4619      	mov	r1, r3
 8005340:	4610      	mov	r0, r2
 8005342:	f000 f99d 	bl	8005680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr
	...

080053b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d001      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e03a      	b.n	8005442 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a18      	ldr	r2, [pc, #96]	@ (800544c <HAL_TIM_Base_Start_IT+0x98>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00e      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x58>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f6:	d009      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x58>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a14      	ldr	r2, [pc, #80]	@ (8005450 <HAL_TIM_Base_Start_IT+0x9c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x58>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a13      	ldr	r2, [pc, #76]	@ (8005454 <HAL_TIM_Base_Start_IT+0xa0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d111      	bne.n	8005430 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b06      	cmp	r3, #6
 800541c:	d010      	beq.n	8005440 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0201 	orr.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800542e:	e007      	b.n	8005440 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr
 800544c:	40012c00 	.word	0x40012c00
 8005450:	40000400 	.word	0x40000400
 8005454:	40000800 	.word	0x40000800

08005458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d020      	beq.n	80054bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01b      	beq.n	80054bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0202 	mvn.w	r2, #2
 800548c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f8d1 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 80054a8:	e005      	b.n	80054b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f8c4 	bl	8005638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f8d3 	bl	800565c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d020      	beq.n	8005508 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01b      	beq.n	8005508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0204 	mvn.w	r2, #4
 80054d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2202      	movs	r2, #2
 80054de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f8ab 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 80054f4:	e005      	b.n	8005502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f89e 	bl	8005638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f8ad 	bl	800565c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d020      	beq.n	8005554 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01b      	beq.n	8005554 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0208 	mvn.w	r2, #8
 8005524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2204      	movs	r2, #4
 800552a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f885 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 8005540:	e005      	b.n	800554e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f878 	bl	8005638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f887 	bl	800565c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 0310 	and.w	r3, r3, #16
 800555a:	2b00      	cmp	r3, #0
 800555c:	d020      	beq.n	80055a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0310 	and.w	r3, r3, #16
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01b      	beq.n	80055a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0210 	mvn.w	r2, #16
 8005570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2208      	movs	r2, #8
 8005576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f85f 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 800558c:	e005      	b.n	800559a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f852 	bl	8005638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f861 	bl	800565c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00c      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0201 	mvn.w	r2, #1
 80055bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fd f890 	bl	80026e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00c      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d007      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f8c3 	bl	800576e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00c      	beq.n	800560c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d007      	beq.n	800560c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f831 	bl	800566e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00c      	beq.n	8005630 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d007      	beq.n	8005630 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0220 	mvn.w	r2, #32
 8005628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f896 	bl	800575c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr

0800564a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr

0800565c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr

0800566e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	bc80      	pop	{r7}
 800567e:	4770      	bx	lr

08005680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a2f      	ldr	r2, [pc, #188]	@ (8005750 <TIM_Base_SetConfig+0xd0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00b      	beq.n	80056b0 <TIM_Base_SetConfig+0x30>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569e:	d007      	beq.n	80056b0 <TIM_Base_SetConfig+0x30>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005754 <TIM_Base_SetConfig+0xd4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_Base_SetConfig+0x30>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005758 <TIM_Base_SetConfig+0xd8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d108      	bne.n	80056c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a22      	ldr	r2, [pc, #136]	@ (8005750 <TIM_Base_SetConfig+0xd0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00b      	beq.n	80056e2 <TIM_Base_SetConfig+0x62>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d0:	d007      	beq.n	80056e2 <TIM_Base_SetConfig+0x62>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005754 <TIM_Base_SetConfig+0xd4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d003      	beq.n	80056e2 <TIM_Base_SetConfig+0x62>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005758 <TIM_Base_SetConfig+0xd8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d108      	bne.n	80056f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a0d      	ldr	r2, [pc, #52]	@ (8005750 <TIM_Base_SetConfig+0xd0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d103      	bne.n	8005728 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f023 0201 	bic.w	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	611a      	str	r2, [r3, #16]
  }
}
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr
 8005750:	40012c00 	.word	0x40012c00
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800

0800575c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr

0800576e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800576e:	b480      	push	{r7}
 8005770:	b083      	sub	sp, #12
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr

08005780 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e042      	b.n	8005818 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fd f87a 	bl	80028a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2224      	movs	r2, #36	@ 0x24
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f971 	bl	8005aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08a      	sub	sp, #40	@ 0x28
 8005824:	af02      	add	r7, sp, #8
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	4613      	mov	r3, r2
 800582e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b20      	cmp	r3, #32
 800583e:	d175      	bne.n	800592c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <HAL_UART_Transmit+0x2c>
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e06e      	b.n	800592e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2221      	movs	r2, #33	@ 0x21
 800585a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800585e:	f7fd fa97 	bl	8002d90 <HAL_GetTick>
 8005862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	88fa      	ldrh	r2, [r7, #6]
 800586e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005878:	d108      	bne.n	800588c <HAL_UART_Transmit+0x6c>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d104      	bne.n	800588c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e003      	b.n	8005894 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005890:	2300      	movs	r3, #0
 8005892:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005894:	e02e      	b.n	80058f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2200      	movs	r2, #0
 800589e:	2180      	movs	r1, #128	@ 0x80
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 f848 	bl	8005936 <UART_WaitOnFlagUntilTimeout>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e03a      	b.n	800592e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10b      	bne.n	80058d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	3302      	adds	r3, #2
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	e007      	b.n	80058e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	781a      	ldrb	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	3301      	adds	r3, #1
 80058e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1cb      	bne.n	8005896 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2200      	movs	r2, #0
 8005906:	2140      	movs	r1, #64	@ 0x40
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f814 	bl	8005936 <UART_WaitOnFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e006      	b.n	800592e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	e000      	b.n	800592e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800592c:	2302      	movs	r3, #2
  }
}
 800592e:	4618      	mov	r0, r3
 8005930:	3720      	adds	r7, #32
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b086      	sub	sp, #24
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	603b      	str	r3, [r7, #0]
 8005942:	4613      	mov	r3, r2
 8005944:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005946:	e03b      	b.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800594e:	d037      	beq.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005950:	f7fd fa1e 	bl	8002d90 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	6a3a      	ldr	r2, [r7, #32]
 800595c:	429a      	cmp	r2, r3
 800595e:	d302      	bcc.n	8005966 <UART_WaitOnFlagUntilTimeout+0x30>
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e03a      	b.n	80059e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d023      	beq.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b80      	cmp	r3, #128	@ 0x80
 800597c:	d020      	beq.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b40      	cmp	r3, #64	@ 0x40
 8005982:	d01d      	beq.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b08      	cmp	r3, #8
 8005990:	d116      	bne.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f81d 	bl	80059e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2208      	movs	r2, #8
 80059b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e00f      	b.n	80059e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	4013      	ands	r3, r2
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	bf0c      	ite	eq
 80059d0:	2301      	moveq	r3, #1
 80059d2:	2300      	movne	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	461a      	mov	r2, r3
 80059d8:	79fb      	ldrb	r3, [r7, #7]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d0b4      	beq.n	8005948 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b095      	sub	sp, #84	@ 0x54
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	330c      	adds	r3, #12
 80059f6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	330c      	adds	r3, #12
 8005a0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a10:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e5      	bne.n	80059f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3314      	adds	r3, #20
 8005a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f023 0301 	bic.w	r3, r3, #1
 8005a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3314      	adds	r3, #20
 8005a42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e5      	bne.n	8005a24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d119      	bne.n	8005a94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f023 0310 	bic.w	r3, r3, #16
 8005a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a80:	61ba      	str	r2, [r7, #24]
 8005a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6979      	ldr	r1, [r7, #20]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e5      	bne.n	8005a60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005aa2:	bf00      	nop
 8005aa4:	3754      	adds	r7, #84	@ 0x54
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr

08005aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005ae6:	f023 030c 	bic.w	r3, r3, #12
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6812      	ldr	r2, [r2, #0]
 8005aee:	68b9      	ldr	r1, [r7, #8]
 8005af0:	430b      	orrs	r3, r1
 8005af2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc0 <UART_SetConfig+0x114>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d103      	bne.n	8005b1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b14:	f7fe fcd8 	bl	80044c8 <HAL_RCC_GetPCLK2Freq>
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	e002      	b.n	8005b22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b1c:	f7fe fcc0 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 8005b20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009a      	lsls	r2, r3, #2
 8005b2c:	441a      	add	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b38:	4a22      	ldr	r2, [pc, #136]	@ (8005bc4 <UART_SetConfig+0x118>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	0119      	lsls	r1, r3, #4
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	009a      	lsls	r2, r3, #2
 8005b4c:	441a      	add	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b58:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc4 <UART_SetConfig+0x118>)
 8005b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	2064      	movs	r0, #100	@ 0x64
 8005b62:	fb00 f303 	mul.w	r3, r0, r3
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	3332      	adds	r3, #50	@ 0x32
 8005b6c:	4a15      	ldr	r2, [pc, #84]	@ (8005bc4 <UART_SetConfig+0x118>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b78:	4419      	add	r1, r3
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	009a      	lsls	r2, r3, #2
 8005b84:	441a      	add	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b90:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc4 <UART_SetConfig+0x118>)
 8005b92:	fba3 0302 	umull	r0, r3, r3, r2
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	2064      	movs	r0, #100	@ 0x64
 8005b9a:	fb00 f303 	mul.w	r3, r0, r3
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	3332      	adds	r3, #50	@ 0x32
 8005ba4:	4a07      	ldr	r2, [pc, #28]	@ (8005bc4 <UART_SetConfig+0x118>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	f003 020f 	and.w	r2, r3, #15
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	440a      	add	r2, r1
 8005bb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	40013800 	.word	0x40013800
 8005bc4:	51eb851f 	.word	0x51eb851f

08005bc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f103 0208 	add.w	r2, r3, #8
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005be0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f103 0208 	add.w	r2, r3, #8
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f103 0208 	add.w	r2, r3, #8
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr

08005c06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr

08005c1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b085      	sub	sp, #20
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	601a      	str	r2, [r3, #0]
}
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr

08005c64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c7a:	d103      	bne.n	8005c84 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	e00c      	b.n	8005c9e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3308      	adds	r3, #8
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e002      	b.n	8005c92 <vListInsert+0x2e>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d2f6      	bcs.n	8005c8c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	601a      	str	r2, [r3, #0]
}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr

08005cd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6892      	ldr	r2, [r2, #8]
 8005cea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6852      	ldr	r2, [r2, #4]
 8005cf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d103      	bne.n	8005d08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	1e5a      	subs	r2, r3, #1
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bc80      	pop	{r7}
 8005d24:	4770      	bx	lr
	...

08005d28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10b      	bne.n	8005d54 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d4e:	bf00      	nop
 8005d50:	bf00      	nop
 8005d52:	e7fd      	b.n	8005d50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d54:	f002 fbc2 	bl	80084dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d60:	68f9      	ldr	r1, [r7, #12]
 8005d62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d64:	fb01 f303 	mul.w	r3, r1, r3
 8005d68:	441a      	add	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d84:	3b01      	subs	r3, #1
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d8a:	fb01 f303 	mul.w	r3, r1, r3
 8005d8e:	441a      	add	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	22ff      	movs	r2, #255	@ 0xff
 8005d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	22ff      	movs	r2, #255	@ 0xff
 8005da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d114      	bne.n	8005dd4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d01a      	beq.n	8005de8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3310      	adds	r3, #16
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 fb1c 	bl	80073f4 <xTaskRemoveFromEventList>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d012      	beq.n	8005de8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005df8 <xQueueGenericReset+0xd0>)
 8005dc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dc8:	601a      	str	r2, [r3, #0]
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	e009      	b.n	8005de8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3310      	adds	r3, #16
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fef5 	bl	8005bc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3324      	adds	r3, #36	@ 0x24
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff fef0 	bl	8005bc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005de8:	f002 fba8 	bl	800853c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005dec:	2301      	movs	r3, #1
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08e      	sub	sp, #56	@ 0x38
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10b      	bne.n	8005e28 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10b      	bne.n	8005e46 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e40:	bf00      	nop
 8005e42:	bf00      	nop
 8005e44:	e7fd      	b.n	8005e42 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <xQueueGenericCreateStatic+0x56>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <xQueueGenericCreateStatic+0x5a>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <xQueueGenericCreateStatic+0x5c>
 8005e56:	2300      	movs	r3, #0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10b      	bne.n	8005e74 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	623b      	str	r3, [r7, #32]
}
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	e7fd      	b.n	8005e70 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d102      	bne.n	8005e80 <xQueueGenericCreateStatic+0x84>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <xQueueGenericCreateStatic+0x88>
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <xQueueGenericCreateStatic+0x8a>
 8005e84:	2300      	movs	r3, #0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10b      	bne.n	8005ea2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	61fb      	str	r3, [r7, #28]
}
 8005e9c:	bf00      	nop
 8005e9e:	bf00      	nop
 8005ea0:	e7fd      	b.n	8005e9e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ea2:	2348      	movs	r3, #72	@ 0x48
 8005ea4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b48      	cmp	r3, #72	@ 0x48
 8005eaa:	d00b      	beq.n	8005ec4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb0:	f383 8811 	msr	BASEPRI, r3
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	61bb      	str	r3, [r7, #24]
}
 8005ebe:	bf00      	nop
 8005ec0:	bf00      	nop
 8005ec2:	e7fd      	b.n	8005ec0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ec4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00d      	beq.n	8005eec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ed8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 f840 	bl	8005f6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3730      	adds	r7, #48	@ 0x30
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b08a      	sub	sp, #40	@ 0x28
 8005efa:	af02      	add	r7, sp, #8
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	4613      	mov	r3, r2
 8005f02:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	613b      	str	r3, [r7, #16]
}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	e7fd      	b.n	8005f1e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	3348      	adds	r3, #72	@ 0x48
 8005f30:	4618      	mov	r0, r3
 8005f32:	f002 fbd5 	bl	80086e0 <pvPortMalloc>
 8005f36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d011      	beq.n	8005f62 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	3348      	adds	r3, #72	@ 0x48
 8005f46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f50:	79fa      	ldrb	r2, [r7, #7]
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	4613      	mov	r3, r2
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 f805 	bl	8005f6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f62:	69bb      	ldr	r3, [r7, #24]
	}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d103      	bne.n	8005f88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	e002      	b.n	8005f8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	69b8      	ldr	r0, [r7, #24]
 8005f9e:	f7ff fec3 	bl	8005d28 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08e      	sub	sp, #56	@ 0x38
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10b      	bne.n	8005fe0 <xQueueGenericSend+0x34>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005fda:	bf00      	nop
 8005fdc:	bf00      	nop
 8005fde:	e7fd      	b.n	8005fdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d103      	bne.n	8005fee <xQueueGenericSend+0x42>
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <xQueueGenericSend+0x46>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <xQueueGenericSend+0x48>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10b      	bne.n	8006010 <xQueueGenericSend+0x64>
	__asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800600a:	bf00      	nop
 800600c:	bf00      	nop
 800600e:	e7fd      	b.n	800600c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d103      	bne.n	800601e <xQueueGenericSend+0x72>
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <xQueueGenericSend+0x76>
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <xQueueGenericSend+0x78>
 8006022:	2300      	movs	r3, #0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <xQueueGenericSend+0x94>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	623b      	str	r3, [r7, #32]
}
 800603a:	bf00      	nop
 800603c:	bf00      	nop
 800603e:	e7fd      	b.n	800603c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006040:	f001 fb9e 	bl	8007780 <xTaskGetSchedulerState>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d102      	bne.n	8006050 <xQueueGenericSend+0xa4>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <xQueueGenericSend+0xa8>
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <xQueueGenericSend+0xaa>
 8006054:	2300      	movs	r3, #0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10b      	bne.n	8006072 <xQueueGenericSend+0xc6>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	61fb      	str	r3, [r7, #28]
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	e7fd      	b.n	800606e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006072:	f002 fa33 	bl	80084dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607e:	429a      	cmp	r2, r3
 8006080:	d302      	bcc.n	8006088 <xQueueGenericSend+0xdc>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d129      	bne.n	80060dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800608e:	f000 fbc6 	bl	800681e <prvCopyDataToQueue>
 8006092:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006098:	2b00      	cmp	r3, #0
 800609a:	d010      	beq.n	80060be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800609c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609e:	3324      	adds	r3, #36	@ 0x24
 80060a0:	4618      	mov	r0, r3
 80060a2:	f001 f9a7 	bl	80073f4 <xTaskRemoveFromEventList>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d013      	beq.n	80060d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80060ac:	4b3f      	ldr	r3, [pc, #252]	@ (80061ac <xQueueGenericSend+0x200>)
 80060ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	e00a      	b.n	80060d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80060be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d007      	beq.n	80060d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80060c4:	4b39      	ldr	r3, [pc, #228]	@ (80061ac <xQueueGenericSend+0x200>)
 80060c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80060d4:	f002 fa32 	bl	800853c <vPortExitCritical>
				return pdPASS;
 80060d8:	2301      	movs	r3, #1
 80060da:	e063      	b.n	80061a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d103      	bne.n	80060ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060e2:	f002 fa2b 	bl	800853c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	e05c      	b.n	80061a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d106      	bne.n	80060fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060f0:	f107 0314 	add.w	r3, r7, #20
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 f9e1 	bl	80074bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060fa:	2301      	movs	r3, #1
 80060fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060fe:	f002 fa1d 	bl	800853c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006102:	f000 ff4f 	bl	8006fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006106:	f002 f9e9 	bl	80084dc <vPortEnterCritical>
 800610a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006110:	b25b      	sxtb	r3, r3
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006116:	d103      	bne.n	8006120 <xQueueGenericSend+0x174>
 8006118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006122:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006126:	b25b      	sxtb	r3, r3
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800612c:	d103      	bne.n	8006136 <xQueueGenericSend+0x18a>
 800612e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006136:	f002 fa01 	bl	800853c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800613a:	1d3a      	adds	r2, r7, #4
 800613c:	f107 0314 	add.w	r3, r7, #20
 8006140:	4611      	mov	r1, r2
 8006142:	4618      	mov	r0, r3
 8006144:	f001 f9d0 	bl	80074e8 <xTaskCheckForTimeOut>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d124      	bne.n	8006198 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800614e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006150:	f000 fc5d 	bl	8006a0e <prvIsQueueFull>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d018      	beq.n	800618c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	3310      	adds	r3, #16
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4611      	mov	r1, r2
 8006162:	4618      	mov	r0, r3
 8006164:	f001 f8f4 	bl	8007350 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800616a:	f000 fbe8 	bl	800693e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800616e:	f000 ff27 	bl	8006fc0 <xTaskResumeAll>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	f47f af7c 	bne.w	8006072 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800617a:	4b0c      	ldr	r3, [pc, #48]	@ (80061ac <xQueueGenericSend+0x200>)
 800617c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	e772      	b.n	8006072 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800618c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800618e:	f000 fbd6 	bl	800693e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006192:	f000 ff15 	bl	8006fc0 <xTaskResumeAll>
 8006196:	e76c      	b.n	8006072 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006198:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800619a:	f000 fbd0 	bl	800693e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800619e:	f000 ff0f 	bl	8006fc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80061a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3738      	adds	r7, #56	@ 0x38
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	e000ed04 	.word	0xe000ed04

080061b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b090      	sub	sp, #64	@ 0x40
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80061c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	e7fd      	b.n	80061dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d103      	bne.n	80061ee <xQueueGenericSendFromISR+0x3e>
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <xQueueGenericSendFromISR+0x42>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <xQueueGenericSendFromISR+0x44>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10b      	bne.n	8006210 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	e7fd      	b.n	800620c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d103      	bne.n	800621e <xQueueGenericSendFromISR+0x6e>
 8006216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621a:	2b01      	cmp	r3, #1
 800621c:	d101      	bne.n	8006222 <xQueueGenericSendFromISR+0x72>
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <xQueueGenericSendFromISR+0x74>
 8006222:	2300      	movs	r3, #0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10b      	bne.n	8006240 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	623b      	str	r3, [r7, #32]
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	e7fd      	b.n	800623c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006240:	f002 fa0e 	bl	8008660 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006244:	f3ef 8211 	mrs	r2, BASEPRI
 8006248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	61fa      	str	r2, [r7, #28]
 800625a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800625c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800625e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006268:	429a      	cmp	r2, r3
 800626a:	d302      	bcc.n	8006272 <xQueueGenericSendFromISR+0xc2>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b02      	cmp	r3, #2
 8006270:	d12f      	bne.n	80062d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006274:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006278:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800627c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006280:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006288:	f000 fac9 	bl	800681e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800628c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006294:	d112      	bne.n	80062bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629a:	2b00      	cmp	r3, #0
 800629c:	d016      	beq.n	80062cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800629e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a0:	3324      	adds	r3, #36	@ 0x24
 80062a2:	4618      	mov	r0, r3
 80062a4:	f001 f8a6 	bl	80073f4 <xTaskRemoveFromEventList>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00e      	beq.n	80062cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e007      	b.n	80062cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80062c0:	3301      	adds	r3, #1
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	b25a      	sxtb	r2, r3
 80062c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80062cc:	2301      	movs	r3, #1
 80062ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80062d0:	e001      	b.n	80062d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80062e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3740      	adds	r7, #64	@ 0x40
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08e      	sub	sp, #56	@ 0x38
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10b      	bne.n	8006318 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	623b      	str	r3, [r7, #32]
}
 8006312:	bf00      	nop
 8006314:	bf00      	nop
 8006316:	e7fd      	b.n	8006314 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	61fb      	str	r3, [r7, #28]
}
 8006332:	bf00      	nop
 8006334:	bf00      	nop
 8006336:	e7fd      	b.n	8006334 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d103      	bne.n	8006348 <xQueueGiveFromISR+0x5c>
 8006340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <xQueueGiveFromISR+0x60>
 8006348:	2301      	movs	r3, #1
 800634a:	e000      	b.n	800634e <xQueueGiveFromISR+0x62>
 800634c:	2300      	movs	r3, #0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10b      	bne.n	800636a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	61bb      	str	r3, [r7, #24]
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop
 8006368:	e7fd      	b.n	8006366 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800636a:	f002 f979 	bl	8008660 <vPortValidateInterruptPriority>
	__asm volatile
 800636e:	f3ef 8211 	mrs	r2, BASEPRI
 8006372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	617a      	str	r2, [r7, #20]
 8006384:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006386:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006388:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800638a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006396:	429a      	cmp	r2, r3
 8006398:	d22b      	bcs.n	80063f2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800639a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063b4:	d112      	bne.n	80063dc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d016      	beq.n	80063ec <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	3324      	adds	r3, #36	@ 0x24
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 f816 	bl	80073f4 <xTaskRemoveFromEventList>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00e      	beq.n	80063ec <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00b      	beq.n	80063ec <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2201      	movs	r2, #1
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	e007      	b.n	80063ec <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063e0:	3301      	adds	r3, #1
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	b25a      	sxtb	r2, r3
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80063ec:	2301      	movs	r3, #1
 80063ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80063f0:	e001      	b.n	80063f6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063f2:	2300      	movs	r3, #0
 80063f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80063f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f383 8811 	msr	BASEPRI, r3
}
 8006400:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006404:	4618      	mov	r0, r3
 8006406:	3738      	adds	r7, #56	@ 0x38
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08c      	sub	sp, #48	@ 0x30
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006418:	2300      	movs	r3, #0
 800641a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10b      	bne.n	800643e <xQueueReceive+0x32>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	623b      	str	r3, [r7, #32]
}
 8006438:	bf00      	nop
 800643a:	bf00      	nop
 800643c:	e7fd      	b.n	800643a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d103      	bne.n	800644c <xQueueReceive+0x40>
 8006444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <xQueueReceive+0x44>
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <xQueueReceive+0x46>
 8006450:	2300      	movs	r3, #0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10b      	bne.n	800646e <xQueueReceive+0x62>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	61fb      	str	r3, [r7, #28]
}
 8006468:	bf00      	nop
 800646a:	bf00      	nop
 800646c:	e7fd      	b.n	800646a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800646e:	f001 f987 	bl	8007780 <xTaskGetSchedulerState>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d102      	bne.n	800647e <xQueueReceive+0x72>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <xQueueReceive+0x76>
 800647e:	2301      	movs	r3, #1
 8006480:	e000      	b.n	8006484 <xQueueReceive+0x78>
 8006482:	2300      	movs	r3, #0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10b      	bne.n	80064a0 <xQueueReceive+0x94>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	61bb      	str	r3, [r7, #24]
}
 800649a:	bf00      	nop
 800649c:	bf00      	nop
 800649e:	e7fd      	b.n	800649c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064a0:	f002 f81c 	bl	80084dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d01f      	beq.n	80064f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064b0:	68b9      	ldr	r1, [r7, #8]
 80064b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064b4:	f000 fa1d 	bl	80068f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ba:	1e5a      	subs	r2, r3, #1
 80064bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00f      	beq.n	80064e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ca:	3310      	adds	r3, #16
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 ff91 	bl	80073f4 <xTaskRemoveFromEventList>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d007      	beq.n	80064e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064d8:	4b3c      	ldr	r3, [pc, #240]	@ (80065cc <xQueueReceive+0x1c0>)
 80064da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064e8:	f002 f828 	bl	800853c <vPortExitCritical>
				return pdPASS;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e069      	b.n	80065c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d103      	bne.n	80064fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064f6:	f002 f821 	bl	800853c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064fa:	2300      	movs	r3, #0
 80064fc:	e062      	b.n	80065c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006500:	2b00      	cmp	r3, #0
 8006502:	d106      	bne.n	8006512 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006504:	f107 0310 	add.w	r3, r7, #16
 8006508:	4618      	mov	r0, r3
 800650a:	f000 ffd7 	bl	80074bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800650e:	2301      	movs	r3, #1
 8006510:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006512:	f002 f813 	bl	800853c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006516:	f000 fd45 	bl	8006fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800651a:	f001 ffdf 	bl	80084dc <vPortEnterCritical>
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006524:	b25b      	sxtb	r3, r3
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800652a:	d103      	bne.n	8006534 <xQueueReceive+0x128>
 800652c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006536:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800653a:	b25b      	sxtb	r3, r3
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006540:	d103      	bne.n	800654a <xQueueReceive+0x13e>
 8006542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800654a:	f001 fff7 	bl	800853c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800654e:	1d3a      	adds	r2, r7, #4
 8006550:	f107 0310 	add.w	r3, r7, #16
 8006554:	4611      	mov	r1, r2
 8006556:	4618      	mov	r0, r3
 8006558:	f000 ffc6 	bl	80074e8 <xTaskCheckForTimeOut>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d123      	bne.n	80065aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006564:	f000 fa3d 	bl	80069e2 <prvIsQueueEmpty>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d017      	beq.n	800659e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800656e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006570:	3324      	adds	r3, #36	@ 0x24
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	4611      	mov	r1, r2
 8006576:	4618      	mov	r0, r3
 8006578:	f000 feea 	bl	8007350 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800657c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800657e:	f000 f9de 	bl	800693e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006582:	f000 fd1d 	bl	8006fc0 <xTaskResumeAll>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d189      	bne.n	80064a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800658c:	4b0f      	ldr	r3, [pc, #60]	@ (80065cc <xQueueReceive+0x1c0>)
 800658e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	e780      	b.n	80064a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800659e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065a0:	f000 f9cd 	bl	800693e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065a4:	f000 fd0c 	bl	8006fc0 <xTaskResumeAll>
 80065a8:	e77a      	b.n	80064a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065ac:	f000 f9c7 	bl	800693e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065b0:	f000 fd06 	bl	8006fc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065b6:	f000 fa14 	bl	80069e2 <prvIsQueueEmpty>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f43f af6f 	beq.w	80064a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3730      	adds	r7, #48	@ 0x30
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	e000ed04 	.word	0xe000ed04

080065d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08e      	sub	sp, #56	@ 0x38
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80065da:	2300      	movs	r3, #0
 80065dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10b      	bne.n	8006604 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	623b      	str	r3, [r7, #32]
}
 80065fe:	bf00      	nop
 8006600:	bf00      	nop
 8006602:	e7fd      	b.n	8006600 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00b      	beq.n	8006624 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800660c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	61fb      	str	r3, [r7, #28]
}
 800661e:	bf00      	nop
 8006620:	bf00      	nop
 8006622:	e7fd      	b.n	8006620 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006624:	f001 f8ac 	bl	8007780 <xTaskGetSchedulerState>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d102      	bne.n	8006634 <xQueueSemaphoreTake+0x64>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <xQueueSemaphoreTake+0x68>
 8006634:	2301      	movs	r3, #1
 8006636:	e000      	b.n	800663a <xQueueSemaphoreTake+0x6a>
 8006638:	2300      	movs	r3, #0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10b      	bne.n	8006656 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	61bb      	str	r3, [r7, #24]
}
 8006650:	bf00      	nop
 8006652:	bf00      	nop
 8006654:	e7fd      	b.n	8006652 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006656:	f001 ff41 	bl	80084dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800665a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800665e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	d024      	beq.n	80066b0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006668:	1e5a      	subs	r2, r3, #1
 800666a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800666e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d104      	bne.n	8006680 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006676:	f001 fa2f 	bl	8007ad8 <pvTaskIncrementMutexHeldCount>
 800667a:	4602      	mov	r2, r0
 800667c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00f      	beq.n	80066a8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668a:	3310      	adds	r3, #16
 800668c:	4618      	mov	r0, r3
 800668e:	f000 feb1 	bl	80073f4 <xTaskRemoveFromEventList>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d007      	beq.n	80066a8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006698:	4b54      	ldr	r3, [pc, #336]	@ (80067ec <xQueueSemaphoreTake+0x21c>)
 800669a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066a8:	f001 ff48 	bl	800853c <vPortExitCritical>
				return pdPASS;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e098      	b.n	80067e2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d112      	bne.n	80066dc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00b      	beq.n	80066d4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80066bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c0:	f383 8811 	msr	BASEPRI, r3
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	617b      	str	r3, [r7, #20]
}
 80066ce:	bf00      	nop
 80066d0:	bf00      	nop
 80066d2:	e7fd      	b.n	80066d0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80066d4:	f001 ff32 	bl	800853c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80066d8:	2300      	movs	r3, #0
 80066da:	e082      	b.n	80067e2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80066dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066e2:	f107 030c 	add.w	r3, r7, #12
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fee8 	bl	80074bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066ec:	2301      	movs	r3, #1
 80066ee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066f0:	f001 ff24 	bl	800853c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066f4:	f000 fc56 	bl	8006fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066f8:	f001 fef0 	bl	80084dc <vPortEnterCritical>
 80066fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006702:	b25b      	sxtb	r3, r3
 8006704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006708:	d103      	bne.n	8006712 <xQueueSemaphoreTake+0x142>
 800670a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006714:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006718:	b25b      	sxtb	r3, r3
 800671a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800671e:	d103      	bne.n	8006728 <xQueueSemaphoreTake+0x158>
 8006720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006728:	f001 ff08 	bl	800853c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800672c:	463a      	mov	r2, r7
 800672e:	f107 030c 	add.w	r3, r7, #12
 8006732:	4611      	mov	r1, r2
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fed7 	bl	80074e8 <xTaskCheckForTimeOut>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d132      	bne.n	80067a6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006740:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006742:	f000 f94e 	bl	80069e2 <prvIsQueueEmpty>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d026      	beq.n	800679a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800674c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d109      	bne.n	8006768 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006754:	f001 fec2 	bl	80084dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	4618      	mov	r0, r3
 800675e:	f001 f82d 	bl	80077bc <xTaskPriorityInherit>
 8006762:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006764:	f001 feea 	bl	800853c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676a:	3324      	adds	r3, #36	@ 0x24
 800676c:	683a      	ldr	r2, [r7, #0]
 800676e:	4611      	mov	r1, r2
 8006770:	4618      	mov	r0, r3
 8006772:	f000 fded 	bl	8007350 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006776:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006778:	f000 f8e1 	bl	800693e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800677c:	f000 fc20 	bl	8006fc0 <xTaskResumeAll>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	f47f af67 	bne.w	8006656 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006788:	4b18      	ldr	r3, [pc, #96]	@ (80067ec <xQueueSemaphoreTake+0x21c>)
 800678a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	e75d      	b.n	8006656 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800679a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800679c:	f000 f8cf 	bl	800693e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067a0:	f000 fc0e 	bl	8006fc0 <xTaskResumeAll>
 80067a4:	e757      	b.n	8006656 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80067a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067a8:	f000 f8c9 	bl	800693e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067ac:	f000 fc08 	bl	8006fc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067b2:	f000 f916 	bl	80069e2 <prvIsQueueEmpty>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f43f af4c 	beq.w	8006656 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80067be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00d      	beq.n	80067e0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80067c4:	f001 fe8a 	bl	80084dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80067c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067ca:	f000 f811 	bl	80067f0 <prvGetDisinheritPriorityAfterTimeout>
 80067ce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80067d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 f8ee 	bl	80079b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80067dc:	f001 feae 	bl	800853c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3738      	adds	r7, #56	@ 0x38
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	e000ed04 	.word	0xe000ed04

080067f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d006      	beq.n	800680e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f1c3 0307 	rsb	r3, r3, #7
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	e001      	b.n	8006812 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006812:	68fb      	ldr	r3, [r7, #12]
	}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr

0800681e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b086      	sub	sp, #24
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800682a:	2300      	movs	r3, #0
 800682c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006832:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10d      	bne.n	8006858 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d14d      	bne.n	80068e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	4618      	mov	r0, r3
 800684a:	f001 f82d 	bl	80078a8 <xTaskPriorityDisinherit>
 800684e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	609a      	str	r2, [r3, #8]
 8006856:	e043      	b.n	80068e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d119      	bne.n	8006892 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6858      	ldr	r0, [r3, #4]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006866:	461a      	mov	r2, r3
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	f002 f9cf 	bl	8008c0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006876:	441a      	add	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	429a      	cmp	r2, r3
 8006886:	d32b      	bcc.n	80068e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	605a      	str	r2, [r3, #4]
 8006890:	e026      	b.n	80068e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	68d8      	ldr	r0, [r3, #12]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689a:	461a      	mov	r2, r3
 800689c:	68b9      	ldr	r1, [r7, #8]
 800689e:	f002 f9b5 	bl	8008c0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068aa:	425b      	negs	r3, r3
 80068ac:	441a      	add	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d207      	bcs.n	80068ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c6:	425b      	negs	r3, r3
 80068c8:	441a      	add	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d105      	bne.n	80068e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	3b01      	subs	r3, #1
 80068de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80068e8:	697b      	ldr	r3, [r7, #20]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d018      	beq.n	8006936 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690c:	441a      	add	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	429a      	cmp	r2, r3
 800691c:	d303      	bcc.n	8006926 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68d9      	ldr	r1, [r3, #12]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692e:	461a      	mov	r2, r3
 8006930:	6838      	ldr	r0, [r7, #0]
 8006932:	f002 f96b 	bl	8008c0c <memcpy>
	}
}
 8006936:	bf00      	nop
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006946:	f001 fdc9 	bl	80084dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006950:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006952:	e011      	b.n	8006978 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006958:	2b00      	cmp	r3, #0
 800695a:	d012      	beq.n	8006982 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3324      	adds	r3, #36	@ 0x24
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fd47 	bl	80073f4 <xTaskRemoveFromEventList>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800696c:	f000 fe20 	bl	80075b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	3b01      	subs	r3, #1
 8006974:	b2db      	uxtb	r3, r3
 8006976:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800697c:	2b00      	cmp	r3, #0
 800697e:	dce9      	bgt.n	8006954 <prvUnlockQueue+0x16>
 8006980:	e000      	b.n	8006984 <prvUnlockQueue+0x46>
					break;
 8006982:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	22ff      	movs	r2, #255	@ 0xff
 8006988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800698c:	f001 fdd6 	bl	800853c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006990:	f001 fda4 	bl	80084dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800699a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800699c:	e011      	b.n	80069c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d012      	beq.n	80069cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3310      	adds	r3, #16
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fd22 	bl	80073f4 <xTaskRemoveFromEventList>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069b6:	f000 fdfb 	bl	80075b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	3b01      	subs	r3, #1
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	dce9      	bgt.n	800699e <prvUnlockQueue+0x60>
 80069ca:	e000      	b.n	80069ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	22ff      	movs	r2, #255	@ 0xff
 80069d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80069d6:	f001 fdb1 	bl	800853c <vPortExitCritical>
}
 80069da:	bf00      	nop
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069ea:	f001 fd77 	bl	80084dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069f6:	2301      	movs	r3, #1
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	e001      	b.n	8006a00 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069fc:	2300      	movs	r3, #0
 80069fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a00:	f001 fd9c 	bl	800853c <vPortExitCritical>

	return xReturn;
 8006a04:	68fb      	ldr	r3, [r7, #12]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b084      	sub	sp, #16
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a16:	f001 fd61 	bl	80084dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d102      	bne.n	8006a2c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a26:	2301      	movs	r3, #1
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	e001      	b.n	8006a30 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a30:	f001 fd84 	bl	800853c <vPortExitCritical>

	return xReturn;
 8006a34:	68fb      	ldr	r3, [r7, #12]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	e014      	b.n	8006a7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a50:	4a0e      	ldr	r2, [pc, #56]	@ (8006a8c <vQueueAddToRegistry+0x4c>)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10b      	bne.n	8006a74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a5c:	490b      	ldr	r1, [pc, #44]	@ (8006a8c <vQueueAddToRegistry+0x4c>)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a66:	4a09      	ldr	r2, [pc, #36]	@ (8006a8c <vQueueAddToRegistry+0x4c>)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a72:	e006      	b.n	8006a82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	3301      	adds	r3, #1
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b07      	cmp	r3, #7
 8006a7e:	d9e7      	bls.n	8006a50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr
 8006a8c:	200009b4 	.word	0x200009b4

08006a90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006aa0:	f001 fd1c 	bl	80084dc <vPortEnterCritical>
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006aaa:	b25b      	sxtb	r3, r3
 8006aac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ab0:	d103      	bne.n	8006aba <vQueueWaitForMessageRestricted+0x2a>
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ac0:	b25b      	sxtb	r3, r3
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ac6:	d103      	bne.n	8006ad0 <vQueueWaitForMessageRestricted+0x40>
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ad0:	f001 fd34 	bl	800853c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d106      	bne.n	8006aea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	3324      	adds	r3, #36	@ 0x24
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fc59 	bl	800739c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006aea:	6978      	ldr	r0, [r7, #20]
 8006aec:	f7ff ff27 	bl	800693e <prvUnlockQueue>
	}
 8006af0:	bf00      	nop
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08e      	sub	sp, #56	@ 0x38
 8006afc:	af04      	add	r7, sp, #16
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10b      	bne.n	8006b24 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	623b      	str	r3, [r7, #32]
}
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	e7fd      	b.n	8006b20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10b      	bne.n	8006b42 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	61fb      	str	r3, [r7, #28]
}
 8006b3c:	bf00      	nop
 8006b3e:	bf00      	nop
 8006b40:	e7fd      	b.n	8006b3e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b42:	23a0      	movs	r3, #160	@ 0xa0
 8006b44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	2ba0      	cmp	r3, #160	@ 0xa0
 8006b4a:	d00b      	beq.n	8006b64 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	61bb      	str	r3, [r7, #24]
}
 8006b5e:	bf00      	nop
 8006b60:	bf00      	nop
 8006b62:	e7fd      	b.n	8006b60 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01e      	beq.n	8006baa <xTaskCreateStatic+0xb2>
 8006b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d01b      	beq.n	8006baa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b84:	2300      	movs	r3, #0
 8006b86:	9303      	str	r3, [sp, #12]
 8006b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8a:	9302      	str	r3, [sp, #8]
 8006b8c:	f107 0314 	add.w	r3, r7, #20
 8006b90:	9301      	str	r3, [sp, #4]
 8006b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	68b9      	ldr	r1, [r7, #8]
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 f851 	bl	8006c44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ba2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ba4:	f000 f8ee 	bl	8006d84 <prvAddNewTaskToReadyList>
 8006ba8:	e001      	b.n	8006bae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bae:	697b      	ldr	r3, [r7, #20]
	}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3728      	adds	r7, #40	@ 0x28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08c      	sub	sp, #48	@ 0x30
 8006bbc:	af04      	add	r7, sp, #16
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	603b      	str	r3, [r7, #0]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bc8:	88fb      	ldrh	r3, [r7, #6]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 fd87 	bl	80086e0 <pvPortMalloc>
 8006bd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00e      	beq.n	8006bf8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bda:	20a0      	movs	r0, #160	@ 0xa0
 8006bdc:	f001 fd80 	bl	80086e0 <pvPortMalloc>
 8006be0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bee:	e005      	b.n	8006bfc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bf0:	6978      	ldr	r0, [r7, #20]
 8006bf2:	f001 fe43 	bl	800887c <vPortFree>
 8006bf6:	e001      	b.n	8006bfc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d017      	beq.n	8006c32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c0a:	88fa      	ldrh	r2, [r7, #6]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9303      	str	r3, [sp, #12]
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	9302      	str	r3, [sp, #8]
 8006c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c16:	9301      	str	r3, [sp, #4]
 8006c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	68b9      	ldr	r1, [r7, #8]
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 f80f 	bl	8006c44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c26:	69f8      	ldr	r0, [r7, #28]
 8006c28:	f000 f8ac 	bl	8006d84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	61bb      	str	r3, [r7, #24]
 8006c30:	e002      	b.n	8006c38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c38:	69bb      	ldr	r3, [r7, #24]
	}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f023 0307 	bic.w	r3, r3, #7
 8006c6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00b      	beq.n	8006c8e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	617b      	str	r3, [r7, #20]
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	e7fd      	b.n	8006c8a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01f      	beq.n	8006cd4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c94:	2300      	movs	r3, #0
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	e012      	b.n	8006cc0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	7819      	ldrb	r1, [r3, #0]
 8006ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	3334      	adds	r3, #52	@ 0x34
 8006caa:	460a      	mov	r2, r1
 8006cac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d006      	beq.n	8006cc8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	2b0f      	cmp	r3, #15
 8006cc4:	d9e9      	bls.n	8006c9a <prvInitialiseNewTask+0x56>
 8006cc6:	e000      	b.n	8006cca <prvInitialiseNewTask+0x86>
			{
				break;
 8006cc8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cd2:	e003      	b.n	8006cdc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cde:	2b06      	cmp	r3, #6
 8006ce0:	d901      	bls.n	8006ce6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ce2:	2306      	movs	r3, #6
 8006ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cf0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fe ff82 	bl	8005c06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	3318      	adds	r3, #24
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe ff7d 	bl	8005c06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d14:	f1c3 0207 	rsb	r2, r3, #7
 8006d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d20:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d24:	2200      	movs	r2, #0
 8006d26:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	334c      	adds	r3, #76	@ 0x4c
 8006d36:	224c      	movs	r2, #76	@ 0x4c
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f001 fedc 	bl	8008af8 <memset>
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	4a0d      	ldr	r2, [pc, #52]	@ (8006d78 <prvInitialiseNewTask+0x134>)
 8006d44:	651a      	str	r2, [r3, #80]	@ 0x50
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	4a0c      	ldr	r2, [pc, #48]	@ (8006d7c <prvInitialiseNewTask+0x138>)
 8006d4a:	655a      	str	r2, [r3, #84]	@ 0x54
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d80 <prvInitialiseNewTask+0x13c>)
 8006d50:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	68f9      	ldr	r1, [r7, #12]
 8006d56:	69b8      	ldr	r0, [r7, #24]
 8006d58:	f001 fad2 	bl	8008300 <pxPortInitialiseStack>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d6e:	bf00      	nop
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20001c44 	.word	0x20001c44
 8006d7c:	20001cac 	.word	0x20001cac
 8006d80:	20001d14 	.word	0x20001d14

08006d84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d8c:	f001 fba6 	bl	80084dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d90:	4b2a      	ldr	r3, [pc, #168]	@ (8006e3c <prvAddNewTaskToReadyList+0xb8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3301      	adds	r3, #1
 8006d96:	4a29      	ldr	r2, [pc, #164]	@ (8006e3c <prvAddNewTaskToReadyList+0xb8>)
 8006d98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d9a:	4b29      	ldr	r3, [pc, #164]	@ (8006e40 <prvAddNewTaskToReadyList+0xbc>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006da2:	4a27      	ldr	r2, [pc, #156]	@ (8006e40 <prvAddNewTaskToReadyList+0xbc>)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006da8:	4b24      	ldr	r3, [pc, #144]	@ (8006e3c <prvAddNewTaskToReadyList+0xb8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d110      	bne.n	8006dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006db0:	f000 fc22 	bl	80075f8 <prvInitialiseTaskLists>
 8006db4:	e00d      	b.n	8006dd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006db6:	4b23      	ldr	r3, [pc, #140]	@ (8006e44 <prvAddNewTaskToReadyList+0xc0>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dbe:	4b20      	ldr	r3, [pc, #128]	@ (8006e40 <prvAddNewTaskToReadyList+0xbc>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d802      	bhi.n	8006dd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8006e40 <prvAddNewTaskToReadyList+0xbc>)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8006e48 <prvAddNewTaskToReadyList+0xc4>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8006e48 <prvAddNewTaskToReadyList+0xc4>)
 8006dda:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de0:	2201      	movs	r2, #1
 8006de2:	409a      	lsls	r2, r3
 8006de4:	4b19      	ldr	r3, [pc, #100]	@ (8006e4c <prvAddNewTaskToReadyList+0xc8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	4a18      	ldr	r2, [pc, #96]	@ (8006e4c <prvAddNewTaskToReadyList+0xc8>)
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4a15      	ldr	r2, [pc, #84]	@ (8006e50 <prvAddNewTaskToReadyList+0xcc>)
 8006dfc:	441a      	add	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f7fe ff0a 	bl	8005c1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e0a:	f001 fb97 	bl	800853c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e44 <prvAddNewTaskToReadyList+0xc0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00e      	beq.n	8006e34 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e16:	4b0a      	ldr	r3, [pc, #40]	@ (8006e40 <prvAddNewTaskToReadyList+0xbc>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d207      	bcs.n	8006e34 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e24:	4b0b      	ldr	r3, [pc, #44]	@ (8006e54 <prvAddNewTaskToReadyList+0xd0>)
 8006e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	20000af4 	.word	0x20000af4
 8006e40:	200009f4 	.word	0x200009f4
 8006e44:	20000b00 	.word	0x20000b00
 8006e48:	20000b10 	.word	0x20000b10
 8006e4c:	20000afc 	.word	0x20000afc
 8006e50:	200009f8 	.word	0x200009f8
 8006e54:	e000ed04 	.word	0xe000ed04

08006e58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d018      	beq.n	8006e9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e6a:	4b14      	ldr	r3, [pc, #80]	@ (8006ebc <vTaskDelay+0x64>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00b      	beq.n	8006e8a <vTaskDelay+0x32>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	60bb      	str	r3, [r7, #8]
}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop
 8006e88:	e7fd      	b.n	8006e86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e8a:	f000 f88b 	bl	8006fa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e8e:	2100      	movs	r1, #0
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fe35 	bl	8007b00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e96:	f000 f893 	bl	8006fc0 <xTaskResumeAll>
 8006e9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d107      	bne.n	8006eb2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006ea2:	4b07      	ldr	r3, [pc, #28]	@ (8006ec0 <vTaskDelay+0x68>)
 8006ea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000b1c 	.word	0x20000b1c
 8006ec0:	e000ed04 	.word	0xe000ed04

08006ec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	@ 0x28
 8006ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ed2:	463a      	mov	r2, r7
 8006ed4:	1d39      	adds	r1, r7, #4
 8006ed6:	f107 0308 	add.w	r3, r7, #8
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7f9 f940 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	9202      	str	r2, [sp, #8]
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	2300      	movs	r3, #0
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	460a      	mov	r2, r1
 8006ef2:	4924      	ldr	r1, [pc, #144]	@ (8006f84 <vTaskStartScheduler+0xc0>)
 8006ef4:	4824      	ldr	r0, [pc, #144]	@ (8006f88 <vTaskStartScheduler+0xc4>)
 8006ef6:	f7ff fdff 	bl	8006af8 <xTaskCreateStatic>
 8006efa:	4603      	mov	r3, r0
 8006efc:	4a23      	ldr	r2, [pc, #140]	@ (8006f8c <vTaskStartScheduler+0xc8>)
 8006efe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f00:	4b22      	ldr	r3, [pc, #136]	@ (8006f8c <vTaskStartScheduler+0xc8>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	e001      	b.n	8006f12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d102      	bne.n	8006f1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f18:	f000 fe58 	bl	8007bcc <xTimerCreateTimerTask>
 8006f1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d11b      	bne.n	8006f5c <vTaskStartScheduler+0x98>
	__asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f28:	f383 8811 	msr	BASEPRI, r3
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	613b      	str	r3, [r7, #16]
}
 8006f36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f38:	4b15      	ldr	r3, [pc, #84]	@ (8006f90 <vTaskStartScheduler+0xcc>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	334c      	adds	r3, #76	@ 0x4c
 8006f3e:	4a15      	ldr	r2, [pc, #84]	@ (8006f94 <vTaskStartScheduler+0xd0>)
 8006f40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f42:	4b15      	ldr	r3, [pc, #84]	@ (8006f98 <vTaskStartScheduler+0xd4>)
 8006f44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f4a:	4b14      	ldr	r3, [pc, #80]	@ (8006f9c <vTaskStartScheduler+0xd8>)
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f50:	4b13      	ldr	r3, [pc, #76]	@ (8006fa0 <vTaskStartScheduler+0xdc>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f56:	f001 fa4f 	bl	80083f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f5a:	e00f      	b.n	8006f7c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f62:	d10b      	bne.n	8006f7c <vTaskStartScheduler+0xb8>
	__asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	60fb      	str	r3, [r7, #12]
}
 8006f76:	bf00      	nop
 8006f78:	bf00      	nop
 8006f7a:	e7fd      	b.n	8006f78 <vTaskStartScheduler+0xb4>
}
 8006f7c:	bf00      	nop
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	080097a0 	.word	0x080097a0
 8006f88:	080075c9 	.word	0x080075c9
 8006f8c:	20000b18 	.word	0x20000b18
 8006f90:	200009f4 	.word	0x200009f4
 8006f94:	20000014 	.word	0x20000014
 8006f98:	20000b14 	.word	0x20000b14
 8006f9c:	20000b00 	.word	0x20000b00
 8006fa0:	20000af8 	.word	0x20000af8

08006fa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fa8:	4b04      	ldr	r3, [pc, #16]	@ (8006fbc <vTaskSuspendAll+0x18>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3301      	adds	r3, #1
 8006fae:	4a03      	ldr	r2, [pc, #12]	@ (8006fbc <vTaskSuspendAll+0x18>)
 8006fb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fb2:	bf00      	nop
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc80      	pop	{r7}
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	20000b1c 	.word	0x20000b1c

08006fc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fce:	4b42      	ldr	r3, [pc, #264]	@ (80070d8 <xTaskResumeAll+0x118>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <xTaskResumeAll+0x2e>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	603b      	str	r3, [r7, #0]
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	e7fd      	b.n	8006fea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fee:	f001 fa75 	bl	80084dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ff2:	4b39      	ldr	r3, [pc, #228]	@ (80070d8 <xTaskResumeAll+0x118>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	4a37      	ldr	r2, [pc, #220]	@ (80070d8 <xTaskResumeAll+0x118>)
 8006ffa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ffc:	4b36      	ldr	r3, [pc, #216]	@ (80070d8 <xTaskResumeAll+0x118>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d161      	bne.n	80070c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007004:	4b35      	ldr	r3, [pc, #212]	@ (80070dc <xTaskResumeAll+0x11c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d05d      	beq.n	80070c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800700c:	e02e      	b.n	800706c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800700e:	4b34      	ldr	r3, [pc, #208]	@ (80070e0 <xTaskResumeAll+0x120>)
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3318      	adds	r3, #24
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fe5a 	bl	8005cd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3304      	adds	r3, #4
 8007024:	4618      	mov	r0, r3
 8007026:	f7fe fe55 	bl	8005cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702e:	2201      	movs	r2, #1
 8007030:	409a      	lsls	r2, r3
 8007032:	4b2c      	ldr	r3, [pc, #176]	@ (80070e4 <xTaskResumeAll+0x124>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4313      	orrs	r3, r2
 8007038:	4a2a      	ldr	r2, [pc, #168]	@ (80070e4 <xTaskResumeAll+0x124>)
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007040:	4613      	mov	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4a27      	ldr	r2, [pc, #156]	@ (80070e8 <xTaskResumeAll+0x128>)
 800704a:	441a      	add	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3304      	adds	r3, #4
 8007050:	4619      	mov	r1, r3
 8007052:	4610      	mov	r0, r2
 8007054:	f7fe fde3 	bl	8005c1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800705c:	4b23      	ldr	r3, [pc, #140]	@ (80070ec <xTaskResumeAll+0x12c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	429a      	cmp	r2, r3
 8007064:	d302      	bcc.n	800706c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007066:	4b22      	ldr	r3, [pc, #136]	@ (80070f0 <xTaskResumeAll+0x130>)
 8007068:	2201      	movs	r2, #1
 800706a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800706c:	4b1c      	ldr	r3, [pc, #112]	@ (80070e0 <xTaskResumeAll+0x120>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1cc      	bne.n	800700e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800707a:	f000 fb61 	bl	8007740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800707e:	4b1d      	ldr	r3, [pc, #116]	@ (80070f4 <xTaskResumeAll+0x134>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d010      	beq.n	80070ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800708a:	f000 f845 	bl	8007118 <xTaskIncrementTick>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007094:	4b16      	ldr	r3, [pc, #88]	@ (80070f0 <xTaskResumeAll+0x130>)
 8007096:	2201      	movs	r2, #1
 8007098:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3b01      	subs	r3, #1
 800709e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1f1      	bne.n	800708a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80070a6:	4b13      	ldr	r3, [pc, #76]	@ (80070f4 <xTaskResumeAll+0x134>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070ac:	4b10      	ldr	r3, [pc, #64]	@ (80070f0 <xTaskResumeAll+0x130>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d009      	beq.n	80070c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070b8:	4b0f      	ldr	r3, [pc, #60]	@ (80070f8 <xTaskResumeAll+0x138>)
 80070ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070c8:	f001 fa38 	bl	800853c <vPortExitCritical>

	return xAlreadyYielded;
 80070cc:	68bb      	ldr	r3, [r7, #8]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20000b1c 	.word	0x20000b1c
 80070dc:	20000af4 	.word	0x20000af4
 80070e0:	20000ab4 	.word	0x20000ab4
 80070e4:	20000afc 	.word	0x20000afc
 80070e8:	200009f8 	.word	0x200009f8
 80070ec:	200009f4 	.word	0x200009f4
 80070f0:	20000b08 	.word	0x20000b08
 80070f4:	20000b04 	.word	0x20000b04
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007102:	4b04      	ldr	r3, [pc, #16]	@ (8007114 <xTaskGetTickCount+0x18>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007108:	687b      	ldr	r3, [r7, #4]
}
 800710a:	4618      	mov	r0, r3
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	bc80      	pop	{r7}
 8007112:	4770      	bx	lr
 8007114:	20000af8 	.word	0x20000af8

08007118 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007122:	4b4f      	ldr	r3, [pc, #316]	@ (8007260 <xTaskIncrementTick+0x148>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	f040 808f 	bne.w	800724a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800712c:	4b4d      	ldr	r3, [pc, #308]	@ (8007264 <xTaskIncrementTick+0x14c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3301      	adds	r3, #1
 8007132:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007134:	4a4b      	ldr	r2, [pc, #300]	@ (8007264 <xTaskIncrementTick+0x14c>)
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d121      	bne.n	8007184 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007140:	4b49      	ldr	r3, [pc, #292]	@ (8007268 <xTaskIncrementTick+0x150>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00b      	beq.n	8007162 <xTaskIncrementTick+0x4a>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	603b      	str	r3, [r7, #0]
}
 800715c:	bf00      	nop
 800715e:	bf00      	nop
 8007160:	e7fd      	b.n	800715e <xTaskIncrementTick+0x46>
 8007162:	4b41      	ldr	r3, [pc, #260]	@ (8007268 <xTaskIncrementTick+0x150>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	4b40      	ldr	r3, [pc, #256]	@ (800726c <xTaskIncrementTick+0x154>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a3e      	ldr	r2, [pc, #248]	@ (8007268 <xTaskIncrementTick+0x150>)
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	4a3e      	ldr	r2, [pc, #248]	@ (800726c <xTaskIncrementTick+0x154>)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	4b3e      	ldr	r3, [pc, #248]	@ (8007270 <xTaskIncrementTick+0x158>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3301      	adds	r3, #1
 800717c:	4a3c      	ldr	r2, [pc, #240]	@ (8007270 <xTaskIncrementTick+0x158>)
 800717e:	6013      	str	r3, [r2, #0]
 8007180:	f000 fade 	bl	8007740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007184:	4b3b      	ldr	r3, [pc, #236]	@ (8007274 <xTaskIncrementTick+0x15c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	429a      	cmp	r2, r3
 800718c:	d348      	bcc.n	8007220 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800718e:	4b36      	ldr	r3, [pc, #216]	@ (8007268 <xTaskIncrementTick+0x150>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d104      	bne.n	80071a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007198:	4b36      	ldr	r3, [pc, #216]	@ (8007274 <xTaskIncrementTick+0x15c>)
 800719a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800719e:	601a      	str	r2, [r3, #0]
					break;
 80071a0:	e03e      	b.n	8007220 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a2:	4b31      	ldr	r3, [pc, #196]	@ (8007268 <xTaskIncrementTick+0x150>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d203      	bcs.n	80071c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071ba:	4a2e      	ldr	r2, [pc, #184]	@ (8007274 <xTaskIncrementTick+0x15c>)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071c0:	e02e      	b.n	8007220 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	3304      	adds	r3, #4
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe fd84 	bl	8005cd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d004      	beq.n	80071de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	3318      	adds	r3, #24
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe fd7b 	bl	8005cd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e2:	2201      	movs	r2, #1
 80071e4:	409a      	lsls	r2, r3
 80071e6:	4b24      	ldr	r3, [pc, #144]	@ (8007278 <xTaskIncrementTick+0x160>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	4a22      	ldr	r2, [pc, #136]	@ (8007278 <xTaskIncrementTick+0x160>)
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f4:	4613      	mov	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4a1f      	ldr	r2, [pc, #124]	@ (800727c <xTaskIncrementTick+0x164>)
 80071fe:	441a      	add	r2, r3
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	3304      	adds	r3, #4
 8007204:	4619      	mov	r1, r3
 8007206:	4610      	mov	r0, r2
 8007208:	f7fe fd09 	bl	8005c1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007210:	4b1b      	ldr	r3, [pc, #108]	@ (8007280 <xTaskIncrementTick+0x168>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007216:	429a      	cmp	r2, r3
 8007218:	d3b9      	bcc.n	800718e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800721a:	2301      	movs	r3, #1
 800721c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800721e:	e7b6      	b.n	800718e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007220:	4b17      	ldr	r3, [pc, #92]	@ (8007280 <xTaskIncrementTick+0x168>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007226:	4915      	ldr	r1, [pc, #84]	@ (800727c <xTaskIncrementTick+0x164>)
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	440b      	add	r3, r1
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d901      	bls.n	800723c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007238:	2301      	movs	r3, #1
 800723a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800723c:	4b11      	ldr	r3, [pc, #68]	@ (8007284 <xTaskIncrementTick+0x16c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d007      	beq.n	8007254 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007244:	2301      	movs	r3, #1
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	e004      	b.n	8007254 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800724a:	4b0f      	ldr	r3, [pc, #60]	@ (8007288 <xTaskIncrementTick+0x170>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3301      	adds	r3, #1
 8007250:	4a0d      	ldr	r2, [pc, #52]	@ (8007288 <xTaskIncrementTick+0x170>)
 8007252:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007254:	697b      	ldr	r3, [r7, #20]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20000b1c 	.word	0x20000b1c
 8007264:	20000af8 	.word	0x20000af8
 8007268:	20000aac 	.word	0x20000aac
 800726c:	20000ab0 	.word	0x20000ab0
 8007270:	20000b0c 	.word	0x20000b0c
 8007274:	20000b14 	.word	0x20000b14
 8007278:	20000afc 	.word	0x20000afc
 800727c:	200009f8 	.word	0x200009f8
 8007280:	200009f4 	.word	0x200009f4
 8007284:	20000b08 	.word	0x20000b08
 8007288:	20000b04 	.word	0x20000b04

0800728c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007292:	4b29      	ldr	r3, [pc, #164]	@ (8007338 <vTaskSwitchContext+0xac>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800729a:	4b28      	ldr	r3, [pc, #160]	@ (800733c <vTaskSwitchContext+0xb0>)
 800729c:	2201      	movs	r2, #1
 800729e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072a0:	e045      	b.n	800732e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80072a2:	4b26      	ldr	r3, [pc, #152]	@ (800733c <vTaskSwitchContext+0xb0>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a8:	4b25      	ldr	r3, [pc, #148]	@ (8007340 <vTaskSwitchContext+0xb4>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	fab3 f383 	clz	r3, r3
 80072b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80072b6:	7afb      	ldrb	r3, [r7, #11]
 80072b8:	f1c3 031f 	rsb	r3, r3, #31
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	4921      	ldr	r1, [pc, #132]	@ (8007344 <vTaskSwitchContext+0xb8>)
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	440b      	add	r3, r1
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10b      	bne.n	80072ea <vTaskSwitchContext+0x5e>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	607b      	str	r3, [r7, #4]
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop
 80072e8:	e7fd      	b.n	80072e6 <vTaskSwitchContext+0x5a>
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4a13      	ldr	r2, [pc, #76]	@ (8007344 <vTaskSwitchContext+0xb8>)
 80072f6:	4413      	add	r3, r2
 80072f8:	613b      	str	r3, [r7, #16]
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	605a      	str	r2, [r3, #4]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	3308      	adds	r3, #8
 800730c:	429a      	cmp	r2, r3
 800730e:	d104      	bne.n	800731a <vTaskSwitchContext+0x8e>
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	605a      	str	r2, [r3, #4]
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	4a09      	ldr	r2, [pc, #36]	@ (8007348 <vTaskSwitchContext+0xbc>)
 8007322:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007324:	4b08      	ldr	r3, [pc, #32]	@ (8007348 <vTaskSwitchContext+0xbc>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	334c      	adds	r3, #76	@ 0x4c
 800732a:	4a08      	ldr	r2, [pc, #32]	@ (800734c <vTaskSwitchContext+0xc0>)
 800732c:	6013      	str	r3, [r2, #0]
}
 800732e:	bf00      	nop
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	bc80      	pop	{r7}
 8007336:	4770      	bx	lr
 8007338:	20000b1c 	.word	0x20000b1c
 800733c:	20000b08 	.word	0x20000b08
 8007340:	20000afc 	.word	0x20000afc
 8007344:	200009f8 	.word	0x200009f8
 8007348:	200009f4 	.word	0x200009f4
 800734c:	20000014 	.word	0x20000014

08007350 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10b      	bne.n	8007378 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	60fb      	str	r3, [r7, #12]
}
 8007372:	bf00      	nop
 8007374:	bf00      	nop
 8007376:	e7fd      	b.n	8007374 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007378:	4b07      	ldr	r3, [pc, #28]	@ (8007398 <vTaskPlaceOnEventList+0x48>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3318      	adds	r3, #24
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7fe fc6f 	bl	8005c64 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007386:	2101      	movs	r1, #1
 8007388:	6838      	ldr	r0, [r7, #0]
 800738a:	f000 fbb9 	bl	8007b00 <prvAddCurrentTaskToDelayedList>
}
 800738e:	bf00      	nop
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	200009f4 	.word	0x200009f4

0800739c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10b      	bne.n	80073c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	617b      	str	r3, [r7, #20]
}
 80073c0:	bf00      	nop
 80073c2:	bf00      	nop
 80073c4:	e7fd      	b.n	80073c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073c6:	4b0a      	ldr	r3, [pc, #40]	@ (80073f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3318      	adds	r3, #24
 80073cc:	4619      	mov	r1, r3
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f7fe fc25 	bl	8005c1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80073da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	68b8      	ldr	r0, [r7, #8]
 80073e4:	f000 fb8c 	bl	8007b00 <prvAddCurrentTaskToDelayedList>
	}
 80073e8:	bf00      	nop
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	200009f4 	.word	0x200009f4

080073f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10b      	bne.n	8007422 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	60fb      	str	r3, [r7, #12]
}
 800741c:	bf00      	nop
 800741e:	bf00      	nop
 8007420:	e7fd      	b.n	800741e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	3318      	adds	r3, #24
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe fc54 	bl	8005cd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800742c:	4b1d      	ldr	r3, [pc, #116]	@ (80074a4 <xTaskRemoveFromEventList+0xb0>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d11c      	bne.n	800746e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	3304      	adds	r3, #4
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe fc4b 	bl	8005cd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007442:	2201      	movs	r2, #1
 8007444:	409a      	lsls	r2, r3
 8007446:	4b18      	ldr	r3, [pc, #96]	@ (80074a8 <xTaskRemoveFromEventList+0xb4>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4313      	orrs	r3, r2
 800744c:	4a16      	ldr	r2, [pc, #88]	@ (80074a8 <xTaskRemoveFromEventList+0xb4>)
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007454:	4613      	mov	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4a13      	ldr	r2, [pc, #76]	@ (80074ac <xTaskRemoveFromEventList+0xb8>)
 800745e:	441a      	add	r2, r3
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	3304      	adds	r3, #4
 8007464:	4619      	mov	r1, r3
 8007466:	4610      	mov	r0, r2
 8007468:	f7fe fbd9 	bl	8005c1e <vListInsertEnd>
 800746c:	e005      	b.n	800747a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	3318      	adds	r3, #24
 8007472:	4619      	mov	r1, r3
 8007474:	480e      	ldr	r0, [pc, #56]	@ (80074b0 <xTaskRemoveFromEventList+0xbc>)
 8007476:	f7fe fbd2 	bl	8005c1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800747e:	4b0d      	ldr	r3, [pc, #52]	@ (80074b4 <xTaskRemoveFromEventList+0xc0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007484:	429a      	cmp	r2, r3
 8007486:	d905      	bls.n	8007494 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007488:	2301      	movs	r3, #1
 800748a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800748c:	4b0a      	ldr	r3, [pc, #40]	@ (80074b8 <xTaskRemoveFromEventList+0xc4>)
 800748e:	2201      	movs	r2, #1
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	e001      	b.n	8007498 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007494:	2300      	movs	r3, #0
 8007496:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007498:	697b      	ldr	r3, [r7, #20]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20000b1c 	.word	0x20000b1c
 80074a8:	20000afc 	.word	0x20000afc
 80074ac:	200009f8 	.word	0x200009f8
 80074b0:	20000ab4 	.word	0x20000ab4
 80074b4:	200009f4 	.word	0x200009f4
 80074b8:	20000b08 	.word	0x20000b08

080074bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074c4:	4b06      	ldr	r3, [pc, #24]	@ (80074e0 <vTaskInternalSetTimeOutState+0x24>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074cc:	4b05      	ldr	r3, [pc, #20]	@ (80074e4 <vTaskInternalSetTimeOutState+0x28>)
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	605a      	str	r2, [r3, #4]
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc80      	pop	{r7}
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	20000b0c 	.word	0x20000b0c
 80074e4:	20000af8 	.word	0x20000af8

080074e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10b      	bne.n	8007510 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	613b      	str	r3, [r7, #16]
}
 800750a:	bf00      	nop
 800750c:	bf00      	nop
 800750e:	e7fd      	b.n	800750c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10b      	bne.n	800752e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	60fb      	str	r3, [r7, #12]
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	e7fd      	b.n	800752a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800752e:	f000 ffd5 	bl	80084dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007532:	4b1d      	ldr	r3, [pc, #116]	@ (80075a8 <xTaskCheckForTimeOut+0xc0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800754a:	d102      	bne.n	8007552 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800754c:	2300      	movs	r3, #0
 800754e:	61fb      	str	r3, [r7, #28]
 8007550:	e023      	b.n	800759a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	4b15      	ldr	r3, [pc, #84]	@ (80075ac <xTaskCheckForTimeOut+0xc4>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	429a      	cmp	r2, r3
 800755c:	d007      	beq.n	800756e <xTaskCheckForTimeOut+0x86>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	429a      	cmp	r2, r3
 8007566:	d302      	bcc.n	800756e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007568:	2301      	movs	r3, #1
 800756a:	61fb      	str	r3, [r7, #28]
 800756c:	e015      	b.n	800759a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	429a      	cmp	r2, r3
 8007576:	d20b      	bcs.n	8007590 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	1ad2      	subs	r2, r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7ff ff99 	bl	80074bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800758a:	2300      	movs	r3, #0
 800758c:	61fb      	str	r3, [r7, #28]
 800758e:	e004      	b.n	800759a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007596:	2301      	movs	r3, #1
 8007598:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800759a:	f000 ffcf 	bl	800853c <vPortExitCritical>

	return xReturn;
 800759e:	69fb      	ldr	r3, [r7, #28]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3720      	adds	r7, #32
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20000af8 	.word	0x20000af8
 80075ac:	20000b0c 	.word	0x20000b0c

080075b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075b4:	4b03      	ldr	r3, [pc, #12]	@ (80075c4 <vTaskMissedYield+0x14>)
 80075b6:	2201      	movs	r2, #1
 80075b8:	601a      	str	r2, [r3, #0]
}
 80075ba:	bf00      	nop
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000b08 	.word	0x20000b08

080075c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075d0:	f000 f852 	bl	8007678 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075d4:	4b06      	ldr	r3, [pc, #24]	@ (80075f0 <prvIdleTask+0x28>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d9f9      	bls.n	80075d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075dc:	4b05      	ldr	r3, [pc, #20]	@ (80075f4 <prvIdleTask+0x2c>)
 80075de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075ec:	e7f0      	b.n	80075d0 <prvIdleTask+0x8>
 80075ee:	bf00      	nop
 80075f0:	200009f8 	.word	0x200009f8
 80075f4:	e000ed04 	.word	0xe000ed04

080075f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075fe:	2300      	movs	r3, #0
 8007600:	607b      	str	r3, [r7, #4]
 8007602:	e00c      	b.n	800761e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4a12      	ldr	r2, [pc, #72]	@ (8007658 <prvInitialiseTaskLists+0x60>)
 8007610:	4413      	add	r3, r2
 8007612:	4618      	mov	r0, r3
 8007614:	f7fe fad8 	bl	8005bc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3301      	adds	r3, #1
 800761c:	607b      	str	r3, [r7, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b06      	cmp	r3, #6
 8007622:	d9ef      	bls.n	8007604 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007624:	480d      	ldr	r0, [pc, #52]	@ (800765c <prvInitialiseTaskLists+0x64>)
 8007626:	f7fe facf 	bl	8005bc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800762a:	480d      	ldr	r0, [pc, #52]	@ (8007660 <prvInitialiseTaskLists+0x68>)
 800762c:	f7fe facc 	bl	8005bc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007630:	480c      	ldr	r0, [pc, #48]	@ (8007664 <prvInitialiseTaskLists+0x6c>)
 8007632:	f7fe fac9 	bl	8005bc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007636:	480c      	ldr	r0, [pc, #48]	@ (8007668 <prvInitialiseTaskLists+0x70>)
 8007638:	f7fe fac6 	bl	8005bc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800763c:	480b      	ldr	r0, [pc, #44]	@ (800766c <prvInitialiseTaskLists+0x74>)
 800763e:	f7fe fac3 	bl	8005bc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007642:	4b0b      	ldr	r3, [pc, #44]	@ (8007670 <prvInitialiseTaskLists+0x78>)
 8007644:	4a05      	ldr	r2, [pc, #20]	@ (800765c <prvInitialiseTaskLists+0x64>)
 8007646:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007648:	4b0a      	ldr	r3, [pc, #40]	@ (8007674 <prvInitialiseTaskLists+0x7c>)
 800764a:	4a05      	ldr	r2, [pc, #20]	@ (8007660 <prvInitialiseTaskLists+0x68>)
 800764c:	601a      	str	r2, [r3, #0]
}
 800764e:	bf00      	nop
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	200009f8 	.word	0x200009f8
 800765c:	20000a84 	.word	0x20000a84
 8007660:	20000a98 	.word	0x20000a98
 8007664:	20000ab4 	.word	0x20000ab4
 8007668:	20000ac8 	.word	0x20000ac8
 800766c:	20000ae0 	.word	0x20000ae0
 8007670:	20000aac 	.word	0x20000aac
 8007674:	20000ab0 	.word	0x20000ab0

08007678 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800767e:	e019      	b.n	80076b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007680:	f000 ff2c 	bl	80084dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007684:	4b10      	ldr	r3, [pc, #64]	@ (80076c8 <prvCheckTasksWaitingTermination+0x50>)
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3304      	adds	r3, #4
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe fb1f 	bl	8005cd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007696:	4b0d      	ldr	r3, [pc, #52]	@ (80076cc <prvCheckTasksWaitingTermination+0x54>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3b01      	subs	r3, #1
 800769c:	4a0b      	ldr	r2, [pc, #44]	@ (80076cc <prvCheckTasksWaitingTermination+0x54>)
 800769e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076a0:	4b0b      	ldr	r3, [pc, #44]	@ (80076d0 <prvCheckTasksWaitingTermination+0x58>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	3b01      	subs	r3, #1
 80076a6:	4a0a      	ldr	r2, [pc, #40]	@ (80076d0 <prvCheckTasksWaitingTermination+0x58>)
 80076a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076aa:	f000 ff47 	bl	800853c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f810 	bl	80076d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076b4:	4b06      	ldr	r3, [pc, #24]	@ (80076d0 <prvCheckTasksWaitingTermination+0x58>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e1      	bne.n	8007680 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076bc:	bf00      	nop
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20000ac8 	.word	0x20000ac8
 80076cc:	20000af4 	.word	0x20000af4
 80076d0:	20000adc 	.word	0x20000adc

080076d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	334c      	adds	r3, #76	@ 0x4c
 80076e0:	4618      	mov	r0, r3
 80076e2:	f001 fa11 	bl	8008b08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d108      	bne.n	8007702 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f4:	4618      	mov	r0, r3
 80076f6:	f001 f8c1 	bl	800887c <vPortFree>
				vPortFree( pxTCB );
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 f8be 	bl	800887c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007700:	e019      	b.n	8007736 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007708:	2b01      	cmp	r3, #1
 800770a:	d103      	bne.n	8007714 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f001 f8b5 	bl	800887c <vPortFree>
	}
 8007712:	e010      	b.n	8007736 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800771a:	2b02      	cmp	r3, #2
 800771c:	d00b      	beq.n	8007736 <prvDeleteTCB+0x62>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	60fb      	str	r3, [r7, #12]
}
 8007730:	bf00      	nop
 8007732:	bf00      	nop
 8007734:	e7fd      	b.n	8007732 <prvDeleteTCB+0x5e>
	}
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007746:	4b0c      	ldr	r3, [pc, #48]	@ (8007778 <prvResetNextTaskUnblockTime+0x38>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d104      	bne.n	800775a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007750:	4b0a      	ldr	r3, [pc, #40]	@ (800777c <prvResetNextTaskUnblockTime+0x3c>)
 8007752:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007756:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007758:	e008      	b.n	800776c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800775a:	4b07      	ldr	r3, [pc, #28]	@ (8007778 <prvResetNextTaskUnblockTime+0x38>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	4a04      	ldr	r2, [pc, #16]	@ (800777c <prvResetNextTaskUnblockTime+0x3c>)
 800776a:	6013      	str	r3, [r2, #0]
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	20000aac 	.word	0x20000aac
 800777c:	20000b14 	.word	0x20000b14

08007780 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007786:	4b0b      	ldr	r3, [pc, #44]	@ (80077b4 <xTaskGetSchedulerState+0x34>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d102      	bne.n	8007794 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800778e:	2301      	movs	r3, #1
 8007790:	607b      	str	r3, [r7, #4]
 8007792:	e008      	b.n	80077a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007794:	4b08      	ldr	r3, [pc, #32]	@ (80077b8 <xTaskGetSchedulerState+0x38>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d102      	bne.n	80077a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800779c:	2302      	movs	r3, #2
 800779e:	607b      	str	r3, [r7, #4]
 80077a0:	e001      	b.n	80077a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077a2:	2300      	movs	r3, #0
 80077a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077a6:	687b      	ldr	r3, [r7, #4]
	}
 80077a8:	4618      	mov	r0, r3
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bc80      	pop	{r7}
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	20000b00 	.word	0x20000b00
 80077b8:	20000b1c 	.word	0x20000b1c

080077bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d05e      	beq.n	8007890 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d6:	4b31      	ldr	r3, [pc, #196]	@ (800789c <xTaskPriorityInherit+0xe0>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077dc:	429a      	cmp	r2, r3
 80077de:	d24e      	bcs.n	800787e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	db06      	blt.n	80077f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077e8:	4b2c      	ldr	r3, [pc, #176]	@ (800789c <xTaskPriorityInherit+0xe0>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ee:	f1c3 0207 	rsb	r2, r3, #7
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	6959      	ldr	r1, [r3, #20]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4a26      	ldr	r2, [pc, #152]	@ (80078a0 <xTaskPriorityInherit+0xe4>)
 8007808:	4413      	add	r3, r2
 800780a:	4299      	cmp	r1, r3
 800780c:	d12f      	bne.n	800786e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	3304      	adds	r3, #4
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fa5e 	bl	8005cd4 <uxListRemove>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10a      	bne.n	8007834 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007822:	2201      	movs	r2, #1
 8007824:	fa02 f303 	lsl.w	r3, r2, r3
 8007828:	43da      	mvns	r2, r3
 800782a:	4b1e      	ldr	r3, [pc, #120]	@ (80078a4 <xTaskPriorityInherit+0xe8>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4013      	ands	r3, r2
 8007830:	4a1c      	ldr	r2, [pc, #112]	@ (80078a4 <xTaskPriorityInherit+0xe8>)
 8007832:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007834:	4b19      	ldr	r3, [pc, #100]	@ (800789c <xTaskPriorityInherit+0xe0>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007842:	2201      	movs	r2, #1
 8007844:	409a      	lsls	r2, r3
 8007846:	4b17      	ldr	r3, [pc, #92]	@ (80078a4 <xTaskPriorityInherit+0xe8>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4313      	orrs	r3, r2
 800784c:	4a15      	ldr	r2, [pc, #84]	@ (80078a4 <xTaskPriorityInherit+0xe8>)
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007854:	4613      	mov	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4a10      	ldr	r2, [pc, #64]	@ (80078a0 <xTaskPriorityInherit+0xe4>)
 800785e:	441a      	add	r2, r3
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	3304      	adds	r3, #4
 8007864:	4619      	mov	r1, r3
 8007866:	4610      	mov	r0, r2
 8007868:	f7fe f9d9 	bl	8005c1e <vListInsertEnd>
 800786c:	e004      	b.n	8007878 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800786e:	4b0b      	ldr	r3, [pc, #44]	@ (800789c <xTaskPriorityInherit+0xe0>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007878:	2301      	movs	r3, #1
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	e008      	b.n	8007890 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007882:	4b06      	ldr	r3, [pc, #24]	@ (800789c <xTaskPriorityInherit+0xe0>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007888:	429a      	cmp	r2, r3
 800788a:	d201      	bcs.n	8007890 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800788c:	2301      	movs	r3, #1
 800788e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007890:	68fb      	ldr	r3, [r7, #12]
	}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	200009f4 	.word	0x200009f4
 80078a0:	200009f8 	.word	0x200009f8
 80078a4:	20000afc 	.word	0x20000afc

080078a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d070      	beq.n	80079a0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078be:	4b3b      	ldr	r3, [pc, #236]	@ (80079ac <xTaskPriorityDisinherit+0x104>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d00b      	beq.n	80078e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	60fb      	str	r3, [r7, #12]
}
 80078da:	bf00      	nop
 80078dc:	bf00      	nop
 80078de:	e7fd      	b.n	80078dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10b      	bne.n	8007900 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	60bb      	str	r3, [r7, #8]
}
 80078fa:	bf00      	nop
 80078fc:	bf00      	nop
 80078fe:	e7fd      	b.n	80078fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007904:	1e5a      	subs	r2, r3, #1
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007912:	429a      	cmp	r2, r3
 8007914:	d044      	beq.n	80079a0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800791a:	2b00      	cmp	r3, #0
 800791c:	d140      	bne.n	80079a0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	3304      	adds	r3, #4
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe f9d6 	bl	8005cd4 <uxListRemove>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d115      	bne.n	800795a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007932:	491f      	ldr	r1, [pc, #124]	@ (80079b0 <xTaskPriorityDisinherit+0x108>)
 8007934:	4613      	mov	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	440b      	add	r3, r1
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <xTaskPriorityDisinherit+0xb2>
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007948:	2201      	movs	r2, #1
 800794a:	fa02 f303 	lsl.w	r3, r2, r3
 800794e:	43da      	mvns	r2, r3
 8007950:	4b18      	ldr	r3, [pc, #96]	@ (80079b4 <xTaskPriorityDisinherit+0x10c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4013      	ands	r3, r2
 8007956:	4a17      	ldr	r2, [pc, #92]	@ (80079b4 <xTaskPriorityDisinherit+0x10c>)
 8007958:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007966:	f1c3 0207 	rsb	r2, r3, #7
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007972:	2201      	movs	r2, #1
 8007974:	409a      	lsls	r2, r3
 8007976:	4b0f      	ldr	r3, [pc, #60]	@ (80079b4 <xTaskPriorityDisinherit+0x10c>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4313      	orrs	r3, r2
 800797c:	4a0d      	ldr	r2, [pc, #52]	@ (80079b4 <xTaskPriorityDisinherit+0x10c>)
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007984:	4613      	mov	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4a08      	ldr	r2, [pc, #32]	@ (80079b0 <xTaskPriorityDisinherit+0x108>)
 800798e:	441a      	add	r2, r3
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	3304      	adds	r3, #4
 8007994:	4619      	mov	r1, r3
 8007996:	4610      	mov	r0, r2
 8007998:	f7fe f941 	bl	8005c1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800799c:	2301      	movs	r3, #1
 800799e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079a0:	697b      	ldr	r3, [r7, #20]
	}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	200009f4 	.word	0x200009f4
 80079b0:	200009f8 	.word	0x200009f8
 80079b4:	20000afc 	.word	0x20000afc

080079b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80079c6:	2301      	movs	r3, #1
 80079c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d079      	beq.n	8007ac4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10b      	bne.n	80079f0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	60fb      	str	r3, [r7, #12]
}
 80079ea:	bf00      	nop
 80079ec:	bf00      	nop
 80079ee:	e7fd      	b.n	80079ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d902      	bls.n	8007a00 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	61fb      	str	r3, [r7, #28]
 80079fe:	e002      	b.n	8007a06 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a04:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d059      	beq.n	8007ac4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d154      	bne.n	8007ac4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8007acc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d10b      	bne.n	8007a3c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	60bb      	str	r3, [r7, #8]
}
 8007a36:	bf00      	nop
 8007a38:	bf00      	nop
 8007a3a:	e7fd      	b.n	8007a38 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a40:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	69fa      	ldr	r2, [r7, #28]
 8007a46:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	db04      	blt.n	8007a5a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f1c3 0207 	rsb	r2, r3, #7
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	6959      	ldr	r1, [r3, #20]
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4a19      	ldr	r2, [pc, #100]	@ (8007ad0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007a6a:	4413      	add	r3, r2
 8007a6c:	4299      	cmp	r1, r3
 8007a6e:	d129      	bne.n	8007ac4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	3304      	adds	r3, #4
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe f92d 	bl	8005cd4 <uxListRemove>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10a      	bne.n	8007a96 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a84:	2201      	movs	r2, #1
 8007a86:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8a:	43da      	mvns	r2, r3
 8007a8c:	4b11      	ldr	r3, [pc, #68]	@ (8007ad4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4013      	ands	r3, r2
 8007a92:	4a10      	ldr	r2, [pc, #64]	@ (8007ad4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007a94:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	409a      	lsls	r2, r3
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8007ad4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aac:	4613      	mov	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4a06      	ldr	r2, [pc, #24]	@ (8007ad0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007ab6:	441a      	add	r2, r3
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4619      	mov	r1, r3
 8007abe:	4610      	mov	r0, r2
 8007ac0:	f7fe f8ad 	bl	8005c1e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ac4:	bf00      	nop
 8007ac6:	3720      	adds	r7, #32
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	200009f4 	.word	0x200009f4
 8007ad0:	200009f8 	.word	0x200009f8
 8007ad4:	20000afc 	.word	0x20000afc

08007ad8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007ad8:	b480      	push	{r7}
 8007ada:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007adc:	4b07      	ldr	r3, [pc, #28]	@ (8007afc <pvTaskIncrementMutexHeldCount+0x24>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007ae4:	4b05      	ldr	r3, [pc, #20]	@ (8007afc <pvTaskIncrementMutexHeldCount+0x24>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007aea:	3201      	adds	r2, #1
 8007aec:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007aee:	4b03      	ldr	r3, [pc, #12]	@ (8007afc <pvTaskIncrementMutexHeldCount+0x24>)
 8007af0:	681b      	ldr	r3, [r3, #0]
	}
 8007af2:	4618      	mov	r0, r3
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	200009f4 	.word	0x200009f4

08007b00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b0a:	4b29      	ldr	r3, [pc, #164]	@ (8007bb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b10:	4b28      	ldr	r3, [pc, #160]	@ (8007bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3304      	adds	r3, #4
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fe f8dc 	bl	8005cd4 <uxListRemove>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10b      	bne.n	8007b3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007b22:	4b24      	ldr	r3, [pc, #144]	@ (8007bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	2201      	movs	r2, #1
 8007b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2e:	43da      	mvns	r2, r3
 8007b30:	4b21      	ldr	r3, [pc, #132]	@ (8007bb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4013      	ands	r3, r2
 8007b36:	4a20      	ldr	r2, [pc, #128]	@ (8007bb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b40:	d10a      	bne.n	8007b58 <prvAddCurrentTaskToDelayedList+0x58>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d007      	beq.n	8007b58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b48:	4b1a      	ldr	r3, [pc, #104]	@ (8007bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	4619      	mov	r1, r3
 8007b50:	481a      	ldr	r0, [pc, #104]	@ (8007bbc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007b52:	f7fe f864 	bl	8005c1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b56:	e026      	b.n	8007ba6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b60:	4b14      	ldr	r3, [pc, #80]	@ (8007bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d209      	bcs.n	8007b84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b70:	4b13      	ldr	r3, [pc, #76]	@ (8007bc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	f7fe f871 	bl	8005c64 <vListInsert>
}
 8007b82:	e010      	b.n	8007ba6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b84:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	4b0a      	ldr	r3, [pc, #40]	@ (8007bb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4610      	mov	r0, r2
 8007b92:	f7fe f867 	bl	8005c64 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b96:	4b0c      	ldr	r3, [pc, #48]	@ (8007bc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d202      	bcs.n	8007ba6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ba0:	4a09      	ldr	r2, [pc, #36]	@ (8007bc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	6013      	str	r3, [r2, #0]
}
 8007ba6:	bf00      	nop
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000af8 	.word	0x20000af8
 8007bb4:	200009f4 	.word	0x200009f4
 8007bb8:	20000afc 	.word	0x20000afc
 8007bbc:	20000ae0 	.word	0x20000ae0
 8007bc0:	20000ab0 	.word	0x20000ab0
 8007bc4:	20000aac 	.word	0x20000aac
 8007bc8:	20000b14 	.word	0x20000b14

08007bcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08a      	sub	sp, #40	@ 0x28
 8007bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007bd6:	f000 fb53 	bl	8008280 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007bda:	4b1d      	ldr	r3, [pc, #116]	@ (8007c50 <xTimerCreateTimerTask+0x84>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d021      	beq.n	8007c26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007bea:	1d3a      	adds	r2, r7, #4
 8007bec:	f107 0108 	add.w	r1, r7, #8
 8007bf0:	f107 030c 	add.w	r3, r7, #12
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7f8 facb 	bl	8000190 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	9202      	str	r2, [sp, #8]
 8007c02:	9301      	str	r3, [sp, #4]
 8007c04:	2306      	movs	r3, #6
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	460a      	mov	r2, r1
 8007c0c:	4911      	ldr	r1, [pc, #68]	@ (8007c54 <xTimerCreateTimerTask+0x88>)
 8007c0e:	4812      	ldr	r0, [pc, #72]	@ (8007c58 <xTimerCreateTimerTask+0x8c>)
 8007c10:	f7fe ff72 	bl	8006af8 <xTaskCreateStatic>
 8007c14:	4603      	mov	r3, r0
 8007c16:	4a11      	ldr	r2, [pc, #68]	@ (8007c5c <xTimerCreateTimerTask+0x90>)
 8007c18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c1a:	4b10      	ldr	r3, [pc, #64]	@ (8007c5c <xTimerCreateTimerTask+0x90>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c22:	2301      	movs	r3, #1
 8007c24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10b      	bne.n	8007c44 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	613b      	str	r3, [r7, #16]
}
 8007c3e:	bf00      	nop
 8007c40:	bf00      	nop
 8007c42:	e7fd      	b.n	8007c40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c44:	697b      	ldr	r3, [r7, #20]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000b50 	.word	0x20000b50
 8007c54:	080097a8 	.word	0x080097a8
 8007c58:	08007e55 	.word	0x08007e55
 8007c5c:	20000b54 	.word	0x20000b54

08007c60 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b088      	sub	sp, #32
 8007c64:	af02      	add	r7, sp, #8
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007c6e:	2028      	movs	r0, #40	@ 0x28
 8007c70:	f000 fd36 	bl	80086e0 <pvPortMalloc>
 8007c74:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00d      	beq.n	8007c98 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	68b9      	ldr	r1, [r7, #8]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 f805 	bl	8007ca2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007c98:	697b      	ldr	r3, [r7, #20]
	}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b086      	sub	sp, #24
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	607a      	str	r2, [r7, #4]
 8007cae:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10b      	bne.n	8007cce <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	617b      	str	r3, [r7, #20]
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	e7fd      	b.n	8007cca <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d01e      	beq.n	8007d12 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007cd4:	f000 fad4 	bl	8008280 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	6a3a      	ldr	r2, [r7, #32]
 8007cee:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fd ff86 	bl	8005c06 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d008      	beq.n	8007d12 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007d06:	f043 0304 	orr.w	r3, r3, #4
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007d12:	bf00      	nop
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	@ 0x28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10b      	bne.n	8007d4c <xTimerGenericCommand+0x30>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	623b      	str	r3, [r7, #32]
}
 8007d46:	bf00      	nop
 8007d48:	bf00      	nop
 8007d4a:	e7fd      	b.n	8007d48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007d4c:	4b19      	ldr	r3, [pc, #100]	@ (8007db4 <xTimerGenericCommand+0x98>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d02a      	beq.n	8007daa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b05      	cmp	r3, #5
 8007d64:	dc18      	bgt.n	8007d98 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007d66:	f7ff fd0b 	bl	8007780 <xTaskGetSchedulerState>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d109      	bne.n	8007d84 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007d70:	4b10      	ldr	r3, [pc, #64]	@ (8007db4 <xTimerGenericCommand+0x98>)
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	f107 0114 	add.w	r1, r7, #20
 8007d78:	2300      	movs	r3, #0
 8007d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d7c:	f7fe f916 	bl	8005fac <xQueueGenericSend>
 8007d80:	6278      	str	r0, [r7, #36]	@ 0x24
 8007d82:	e012      	b.n	8007daa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d84:	4b0b      	ldr	r3, [pc, #44]	@ (8007db4 <xTimerGenericCommand+0x98>)
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	f107 0114 	add.w	r1, r7, #20
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f7fe f90c 	bl	8005fac <xQueueGenericSend>
 8007d94:	6278      	str	r0, [r7, #36]	@ 0x24
 8007d96:	e008      	b.n	8007daa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d98:	4b06      	ldr	r3, [pc, #24]	@ (8007db4 <xTimerGenericCommand+0x98>)
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	f107 0114 	add.w	r1, r7, #20
 8007da0:	2300      	movs	r3, #0
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	f7fe fa04 	bl	80061b0 <xQueueGenericSendFromISR>
 8007da8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3728      	adds	r7, #40	@ 0x28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20000b50 	.word	0x20000b50

08007db8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dc2:	4b23      	ldr	r3, [pc, #140]	@ (8007e50 <prvProcessExpiredTimer+0x98>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fd ff7f 	bl	8005cd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007ddc:	f003 0304 	and.w	r3, r3, #4
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d023      	beq.n	8007e2c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	18d1      	adds	r1, r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	6978      	ldr	r0, [r7, #20]
 8007df2:	f000 f8d3 	bl	8007f9c <prvInsertTimerInActiveList>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d020      	beq.n	8007e3e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	2300      	movs	r3, #0
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	2100      	movs	r1, #0
 8007e06:	6978      	ldr	r0, [r7, #20]
 8007e08:	f7ff ff88 	bl	8007d1c <xTimerGenericCommand>
 8007e0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d114      	bne.n	8007e3e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	60fb      	str	r3, [r7, #12]
}
 8007e26:	bf00      	nop
 8007e28:	bf00      	nop
 8007e2a:	e7fd      	b.n	8007e28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007e32:	f023 0301 	bic.w	r3, r3, #1
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	6978      	ldr	r0, [r7, #20]
 8007e44:	4798      	blx	r3
}
 8007e46:	bf00      	nop
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20000b48 	.word	0x20000b48

08007e54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e5c:	f107 0308 	add.w	r3, r7, #8
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 f859 	bl	8007f18 <prvGetNextExpireTime>
 8007e66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 f805 	bl	8007e7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007e72:	f000 f8d5 	bl	8008020 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007e76:	bf00      	nop
 8007e78:	e7f0      	b.n	8007e5c <prvTimerTask+0x8>
	...

08007e7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e86:	f7ff f88d 	bl	8006fa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e8a:	f107 0308 	add.w	r3, r7, #8
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 f864 	bl	8007f5c <prvSampleTimeNow>
 8007e94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d130      	bne.n	8007efe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10a      	bne.n	8007eb8 <prvProcessTimerOrBlockTask+0x3c>
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d806      	bhi.n	8007eb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007eaa:	f7ff f889 	bl	8006fc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007eae:	68f9      	ldr	r1, [r7, #12]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7ff ff81 	bl	8007db8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007eb6:	e024      	b.n	8007f02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d008      	beq.n	8007ed0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ebe:	4b13      	ldr	r3, [pc, #76]	@ (8007f0c <prvProcessTimerOrBlockTask+0x90>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <prvProcessTimerOrBlockTask+0x50>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e000      	b.n	8007ece <prvProcessTimerOrBlockTask+0x52>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8007f10 <prvProcessTimerOrBlockTask+0x94>)
 8007ed2:	6818      	ldr	r0, [r3, #0]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	4619      	mov	r1, r3
 8007ede:	f7fe fdd7 	bl	8006a90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ee2:	f7ff f86d 	bl	8006fc0 <xTaskResumeAll>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10a      	bne.n	8007f02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007eec:	4b09      	ldr	r3, [pc, #36]	@ (8007f14 <prvProcessTimerOrBlockTask+0x98>)
 8007eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	f3bf 8f6f 	isb	sy
}
 8007efc:	e001      	b.n	8007f02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007efe:	f7ff f85f 	bl	8006fc0 <xTaskResumeAll>
}
 8007f02:	bf00      	nop
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000b4c 	.word	0x20000b4c
 8007f10:	20000b50 	.word	0x20000b50
 8007f14:	e000ed04 	.word	0xe000ed04

08007f18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f20:	4b0d      	ldr	r3, [pc, #52]	@ (8007f58 <prvGetNextExpireTime+0x40>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <prvGetNextExpireTime+0x16>
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	e000      	b.n	8007f30 <prvGetNextExpireTime+0x18>
 8007f2e:	2200      	movs	r2, #0
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d105      	bne.n	8007f48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f3c:	4b06      	ldr	r3, [pc, #24]	@ (8007f58 <prvGetNextExpireTime+0x40>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60fb      	str	r3, [r7, #12]
 8007f46:	e001      	b.n	8007f4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bc80      	pop	{r7}
 8007f56:	4770      	bx	lr
 8007f58:	20000b48 	.word	0x20000b48

08007f5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007f64:	f7ff f8ca 	bl	80070fc <xTaskGetTickCount>
 8007f68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f98 <prvSampleTimeNow+0x3c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d205      	bcs.n	8007f80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f74:	f000 f91e 	bl	80081b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	e002      	b.n	8007f86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f86:	4a04      	ldr	r2, [pc, #16]	@ (8007f98 <prvSampleTimeNow+0x3c>)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000b58 	.word	0x20000b58

08007f9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
 8007fa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d812      	bhi.n	8007fe8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	1ad2      	subs	r2, r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d302      	bcc.n	8007fd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	617b      	str	r3, [r7, #20]
 8007fd4:	e01b      	b.n	800800e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007fd6:	4b10      	ldr	r3, [pc, #64]	@ (8008018 <prvInsertTimerInActiveList+0x7c>)
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	4619      	mov	r1, r3
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	f7fd fe3f 	bl	8005c64 <vListInsert>
 8007fe6:	e012      	b.n	800800e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d206      	bcs.n	8007ffe <prvInsertTimerInActiveList+0x62>
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d302      	bcc.n	8007ffe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	e007      	b.n	800800e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ffe:	4b07      	ldr	r3, [pc, #28]	@ (800801c <prvInsertTimerInActiveList+0x80>)
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3304      	adds	r3, #4
 8008006:	4619      	mov	r1, r3
 8008008:	4610      	mov	r0, r2
 800800a:	f7fd fe2b 	bl	8005c64 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800800e:	697b      	ldr	r3, [r7, #20]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	20000b4c 	.word	0x20000b4c
 800801c:	20000b48 	.word	0x20000b48

08008020 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08c      	sub	sp, #48	@ 0x30
 8008024:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008026:	e0b2      	b.n	800818e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	2b00      	cmp	r3, #0
 800802c:	f2c0 80af 	blt.w	800818e <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d004      	beq.n	8008046 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800803c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803e:	3304      	adds	r3, #4
 8008040:	4618      	mov	r0, r3
 8008042:	f7fd fe47 	bl	8005cd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008046:	1d3b      	adds	r3, r7, #4
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff ff87 	bl	8007f5c <prvSampleTimeNow>
 800804e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2b09      	cmp	r3, #9
 8008054:	f200 8098 	bhi.w	8008188 <prvProcessReceivedCommands+0x168>
 8008058:	a201      	add	r2, pc, #4	@ (adr r2, 8008060 <prvProcessReceivedCommands+0x40>)
 800805a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805e:	bf00      	nop
 8008060:	08008089 	.word	0x08008089
 8008064:	08008089 	.word	0x08008089
 8008068:	08008089 	.word	0x08008089
 800806c:	080080ff 	.word	0x080080ff
 8008070:	08008113 	.word	0x08008113
 8008074:	0800815f 	.word	0x0800815f
 8008078:	08008089 	.word	0x08008089
 800807c:	08008089 	.word	0x08008089
 8008080:	080080ff 	.word	0x080080ff
 8008084:	08008113 	.word	0x08008113
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800808e:	f043 0301 	orr.w	r3, r3, #1
 8008092:	b2da      	uxtb	r2, r3
 8008094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	18d1      	adds	r1, r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a3a      	ldr	r2, [r7, #32]
 80080a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80080a8:	f7ff ff78 	bl	8007f9c <prvInsertTimerInActiveList>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d06c      	beq.n	800818c <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80080b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d061      	beq.n	800818c <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	441a      	add	r2, r3
 80080d0:	2300      	movs	r3, #0
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	2300      	movs	r3, #0
 80080d6:	2100      	movs	r1, #0
 80080d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80080da:	f7ff fe1f 	bl	8007d1c <xTimerGenericCommand>
 80080de:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d152      	bne.n	800818c <prvProcessReceivedCommands+0x16c>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	61bb      	str	r3, [r7, #24]
}
 80080f8:	bf00      	nop
 80080fa:	bf00      	nop
 80080fc:	e7fd      	b.n	80080fa <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008100:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008104:	f023 0301 	bic.w	r3, r3, #1
 8008108:	b2da      	uxtb	r2, r3
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8008110:	e03d      	b.n	800818e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008114:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008118:	f043 0301 	orr.w	r3, r3, #1
 800811c:	b2da      	uxtb	r2, r3
 800811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008120:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008128:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800812a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10b      	bne.n	800814a <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	617b      	str	r3, [r7, #20]
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop
 8008148:	e7fd      	b.n	8008146 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800814a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814c:	699a      	ldr	r2, [r3, #24]
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	18d1      	adds	r1, r2, r3
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	6a3a      	ldr	r2, [r7, #32]
 8008156:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008158:	f7ff ff20 	bl	8007f9c <prvInsertTimerInActiveList>
					break;
 800815c:	e017      	b.n	800818e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008160:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b00      	cmp	r3, #0
 800816a:	d103      	bne.n	8008174 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800816c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800816e:	f000 fb85 	bl	800887c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008172:	e00c      	b.n	800818e <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008176:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800817a:	f023 0301 	bic.w	r3, r3, #1
 800817e:	b2da      	uxtb	r2, r3
 8008180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008182:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8008186:	e002      	b.n	800818e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8008188:	bf00      	nop
 800818a:	e000      	b.n	800818e <prvProcessReceivedCommands+0x16e>
					break;
 800818c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800818e:	4b08      	ldr	r3, [pc, #32]	@ (80081b0 <prvProcessReceivedCommands+0x190>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f107 0108 	add.w	r1, r7, #8
 8008196:	2200      	movs	r2, #0
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe f937 	bl	800640c <xQueueReceive>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f47f af41 	bne.w	8008028 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80081a6:	bf00      	nop
 80081a8:	bf00      	nop
 80081aa:	3728      	adds	r7, #40	@ 0x28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20000b50 	.word	0x20000b50

080081b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081ba:	e049      	b.n	8008250 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081bc:	4b2e      	ldr	r3, [pc, #184]	@ (8008278 <prvSwitchTimerLists+0xc4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081c6:	4b2c      	ldr	r3, [pc, #176]	@ (8008278 <prvSwitchTimerLists+0xc4>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3304      	adds	r3, #4
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fd fd7d 	bl	8005cd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80081e8:	f003 0304 	and.w	r3, r3, #4
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d02f      	beq.n	8008250 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4413      	add	r3, r2
 80081f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d90e      	bls.n	8008220 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800820e:	4b1a      	ldr	r3, [pc, #104]	@ (8008278 <prvSwitchTimerLists+0xc4>)
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3304      	adds	r3, #4
 8008216:	4619      	mov	r1, r3
 8008218:	4610      	mov	r0, r2
 800821a:	f7fd fd23 	bl	8005c64 <vListInsert>
 800821e:	e017      	b.n	8008250 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008220:	2300      	movs	r3, #0
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	2300      	movs	r3, #0
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	2100      	movs	r1, #0
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f7ff fd76 	bl	8007d1c <xTimerGenericCommand>
 8008230:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10b      	bne.n	8008250 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	603b      	str	r3, [r7, #0]
}
 800824a:	bf00      	nop
 800824c:	bf00      	nop
 800824e:	e7fd      	b.n	800824c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008250:	4b09      	ldr	r3, [pc, #36]	@ (8008278 <prvSwitchTimerLists+0xc4>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1b0      	bne.n	80081bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800825a:	4b07      	ldr	r3, [pc, #28]	@ (8008278 <prvSwitchTimerLists+0xc4>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008260:	4b06      	ldr	r3, [pc, #24]	@ (800827c <prvSwitchTimerLists+0xc8>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a04      	ldr	r2, [pc, #16]	@ (8008278 <prvSwitchTimerLists+0xc4>)
 8008266:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008268:	4a04      	ldr	r2, [pc, #16]	@ (800827c <prvSwitchTimerLists+0xc8>)
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	6013      	str	r3, [r2, #0]
}
 800826e:	bf00      	nop
 8008270:	3718      	adds	r7, #24
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	20000b48 	.word	0x20000b48
 800827c:	20000b4c 	.word	0x20000b4c

08008280 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008286:	f000 f929 	bl	80084dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800828a:	4b15      	ldr	r3, [pc, #84]	@ (80082e0 <prvCheckForValidListAndQueue+0x60>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d120      	bne.n	80082d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008292:	4814      	ldr	r0, [pc, #80]	@ (80082e4 <prvCheckForValidListAndQueue+0x64>)
 8008294:	f7fd fc98 	bl	8005bc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008298:	4813      	ldr	r0, [pc, #76]	@ (80082e8 <prvCheckForValidListAndQueue+0x68>)
 800829a:	f7fd fc95 	bl	8005bc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800829e:	4b13      	ldr	r3, [pc, #76]	@ (80082ec <prvCheckForValidListAndQueue+0x6c>)
 80082a0:	4a10      	ldr	r2, [pc, #64]	@ (80082e4 <prvCheckForValidListAndQueue+0x64>)
 80082a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80082a4:	4b12      	ldr	r3, [pc, #72]	@ (80082f0 <prvCheckForValidListAndQueue+0x70>)
 80082a6:	4a10      	ldr	r2, [pc, #64]	@ (80082e8 <prvCheckForValidListAndQueue+0x68>)
 80082a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80082aa:	2300      	movs	r3, #0
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	4b11      	ldr	r3, [pc, #68]	@ (80082f4 <prvCheckForValidListAndQueue+0x74>)
 80082b0:	4a11      	ldr	r2, [pc, #68]	@ (80082f8 <prvCheckForValidListAndQueue+0x78>)
 80082b2:	210c      	movs	r1, #12
 80082b4:	200a      	movs	r0, #10
 80082b6:	f7fd fda1 	bl	8005dfc <xQueueGenericCreateStatic>
 80082ba:	4603      	mov	r3, r0
 80082bc:	4a08      	ldr	r2, [pc, #32]	@ (80082e0 <prvCheckForValidListAndQueue+0x60>)
 80082be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80082c0:	4b07      	ldr	r3, [pc, #28]	@ (80082e0 <prvCheckForValidListAndQueue+0x60>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d005      	beq.n	80082d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80082c8:	4b05      	ldr	r3, [pc, #20]	@ (80082e0 <prvCheckForValidListAndQueue+0x60>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	490b      	ldr	r1, [pc, #44]	@ (80082fc <prvCheckForValidListAndQueue+0x7c>)
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe fbb6 	bl	8006a40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082d4:	f000 f932 	bl	800853c <vPortExitCritical>
}
 80082d8:	bf00      	nop
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20000b50 	.word	0x20000b50
 80082e4:	20000b20 	.word	0x20000b20
 80082e8:	20000b34 	.word	0x20000b34
 80082ec:	20000b48 	.word	0x20000b48
 80082f0:	20000b4c 	.word	0x20000b4c
 80082f4:	20000bd4 	.word	0x20000bd4
 80082f8:	20000b5c 	.word	0x20000b5c
 80082fc:	080097b0 	.word	0x080097b0

08008300 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3b04      	subs	r3, #4
 8008310:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3b04      	subs	r3, #4
 800831e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f023 0201 	bic.w	r2, r3, #1
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3b04      	subs	r3, #4
 800832e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008330:	4a08      	ldr	r2, [pc, #32]	@ (8008354 <pxPortInitialiseStack+0x54>)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3b14      	subs	r3, #20
 800833a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3b20      	subs	r3, #32
 8008346:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008348:	68fb      	ldr	r3, [r7, #12]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	bc80      	pop	{r7}
 8008352:	4770      	bx	lr
 8008354:	08008359 	.word	0x08008359

08008358 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800835e:	2300      	movs	r3, #0
 8008360:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008362:	4b12      	ldr	r3, [pc, #72]	@ (80083ac <prvTaskExitError+0x54>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800836a:	d00b      	beq.n	8008384 <prvTaskExitError+0x2c>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	60fb      	str	r3, [r7, #12]
}
 800837e:	bf00      	nop
 8008380:	bf00      	nop
 8008382:	e7fd      	b.n	8008380 <prvTaskExitError+0x28>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	60bb      	str	r3, [r7, #8]
}
 8008396:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008398:	bf00      	nop
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d0fc      	beq.n	800839a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083a0:	bf00      	nop
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr
 80083ac:	20000010 	.word	0x20000010

080083b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083b0:	4b07      	ldr	r3, [pc, #28]	@ (80083d0 <pxCurrentTCBConst2>)
 80083b2:	6819      	ldr	r1, [r3, #0]
 80083b4:	6808      	ldr	r0, [r1, #0]
 80083b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80083ba:	f380 8809 	msr	PSP, r0
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f04f 0000 	mov.w	r0, #0
 80083c6:	f380 8811 	msr	BASEPRI, r0
 80083ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80083ce:	4770      	bx	lr

080083d0 <pxCurrentTCBConst2>:
 80083d0:	200009f4 	.word	0x200009f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop

080083d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80083d8:	4806      	ldr	r0, [pc, #24]	@ (80083f4 <prvPortStartFirstTask+0x1c>)
 80083da:	6800      	ldr	r0, [r0, #0]
 80083dc:	6800      	ldr	r0, [r0, #0]
 80083de:	f380 8808 	msr	MSP, r0
 80083e2:	b662      	cpsie	i
 80083e4:	b661      	cpsie	f
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	f3bf 8f6f 	isb	sy
 80083ee:	df00      	svc	0
 80083f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083f2:	bf00      	nop
 80083f4:	e000ed08 	.word	0xe000ed08

080083f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083fe:	4b32      	ldr	r3, [pc, #200]	@ (80084c8 <xPortStartScheduler+0xd0>)
 8008400:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	b2db      	uxtb	r3, r3
 8008408:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	22ff      	movs	r2, #255	@ 0xff
 800840e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	b2db      	uxtb	r3, r3
 8008416:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008418:	78fb      	ldrb	r3, [r7, #3]
 800841a:	b2db      	uxtb	r3, r3
 800841c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008420:	b2da      	uxtb	r2, r3
 8008422:	4b2a      	ldr	r3, [pc, #168]	@ (80084cc <xPortStartScheduler+0xd4>)
 8008424:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008426:	4b2a      	ldr	r3, [pc, #168]	@ (80084d0 <xPortStartScheduler+0xd8>)
 8008428:	2207      	movs	r2, #7
 800842a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800842c:	e009      	b.n	8008442 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800842e:	4b28      	ldr	r3, [pc, #160]	@ (80084d0 <xPortStartScheduler+0xd8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3b01      	subs	r3, #1
 8008434:	4a26      	ldr	r2, [pc, #152]	@ (80084d0 <xPortStartScheduler+0xd8>)
 8008436:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	b2db      	uxtb	r3, r3
 800843c:	005b      	lsls	r3, r3, #1
 800843e:	b2db      	uxtb	r3, r3
 8008440:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	b2db      	uxtb	r3, r3
 8008446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800844a:	2b80      	cmp	r3, #128	@ 0x80
 800844c:	d0ef      	beq.n	800842e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800844e:	4b20      	ldr	r3, [pc, #128]	@ (80084d0 <xPortStartScheduler+0xd8>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f1c3 0307 	rsb	r3, r3, #7
 8008456:	2b04      	cmp	r3, #4
 8008458:	d00b      	beq.n	8008472 <xPortStartScheduler+0x7a>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	60bb      	str	r3, [r7, #8]
}
 800846c:	bf00      	nop
 800846e:	bf00      	nop
 8008470:	e7fd      	b.n	800846e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008472:	4b17      	ldr	r3, [pc, #92]	@ (80084d0 <xPortStartScheduler+0xd8>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	021b      	lsls	r3, r3, #8
 8008478:	4a15      	ldr	r2, [pc, #84]	@ (80084d0 <xPortStartScheduler+0xd8>)
 800847a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800847c:	4b14      	ldr	r3, [pc, #80]	@ (80084d0 <xPortStartScheduler+0xd8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008484:	4a12      	ldr	r2, [pc, #72]	@ (80084d0 <xPortStartScheduler+0xd8>)
 8008486:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	b2da      	uxtb	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008490:	4b10      	ldr	r3, [pc, #64]	@ (80084d4 <xPortStartScheduler+0xdc>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a0f      	ldr	r2, [pc, #60]	@ (80084d4 <xPortStartScheduler+0xdc>)
 8008496:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800849a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800849c:	4b0d      	ldr	r3, [pc, #52]	@ (80084d4 <xPortStartScheduler+0xdc>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0c      	ldr	r2, [pc, #48]	@ (80084d4 <xPortStartScheduler+0xdc>)
 80084a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80084a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084a8:	f000 f8b8 	bl	800861c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084ac:	4b0a      	ldr	r3, [pc, #40]	@ (80084d8 <xPortStartScheduler+0xe0>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084b2:	f7ff ff91 	bl	80083d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084b6:	f7fe fee9 	bl	800728c <vTaskSwitchContext>
	prvTaskExitError();
 80084ba:	f7ff ff4d 	bl	8008358 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	e000e400 	.word	0xe000e400
 80084cc:	20000c1c 	.word	0x20000c1c
 80084d0:	20000c20 	.word	0x20000c20
 80084d4:	e000ed20 	.word	0xe000ed20
 80084d8:	20000010 	.word	0x20000010

080084dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	607b      	str	r3, [r7, #4]
}
 80084f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008534 <vPortEnterCritical+0x58>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3301      	adds	r3, #1
 80084fc:	4a0d      	ldr	r2, [pc, #52]	@ (8008534 <vPortEnterCritical+0x58>)
 80084fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008500:	4b0c      	ldr	r3, [pc, #48]	@ (8008534 <vPortEnterCritical+0x58>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d110      	bne.n	800852a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008508:	4b0b      	ldr	r3, [pc, #44]	@ (8008538 <vPortEnterCritical+0x5c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <vPortEnterCritical+0x4e>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	603b      	str	r3, [r7, #0]
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop
 8008528:	e7fd      	b.n	8008526 <vPortEnterCritical+0x4a>
	}
}
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr
 8008534:	20000010 	.word	0x20000010
 8008538:	e000ed04 	.word	0xe000ed04

0800853c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008542:	4b12      	ldr	r3, [pc, #72]	@ (800858c <vPortExitCritical+0x50>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10b      	bne.n	8008562 <vPortExitCritical+0x26>
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	607b      	str	r3, [r7, #4]
}
 800855c:	bf00      	nop
 800855e:	bf00      	nop
 8008560:	e7fd      	b.n	800855e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008562:	4b0a      	ldr	r3, [pc, #40]	@ (800858c <vPortExitCritical+0x50>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3b01      	subs	r3, #1
 8008568:	4a08      	ldr	r2, [pc, #32]	@ (800858c <vPortExitCritical+0x50>)
 800856a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800856c:	4b07      	ldr	r3, [pc, #28]	@ (800858c <vPortExitCritical+0x50>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d105      	bne.n	8008580 <vPortExitCritical+0x44>
 8008574:	2300      	movs	r3, #0
 8008576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	f383 8811 	msr	BASEPRI, r3
}
 800857e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	bc80      	pop	{r7}
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	20000010 	.word	0x20000010

08008590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008590:	f3ef 8009 	mrs	r0, PSP
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	4b0d      	ldr	r3, [pc, #52]	@ (80085d0 <pxCurrentTCBConst>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085a0:	6010      	str	r0, [r2, #0]
 80085a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80085a6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80085aa:	f380 8811 	msr	BASEPRI, r0
 80085ae:	f7fe fe6d 	bl	800728c <vTaskSwitchContext>
 80085b2:	f04f 0000 	mov.w	r0, #0
 80085b6:	f380 8811 	msr	BASEPRI, r0
 80085ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80085be:	6819      	ldr	r1, [r3, #0]
 80085c0:	6808      	ldr	r0, [r1, #0]
 80085c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085c6:	f380 8809 	msr	PSP, r0
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	4770      	bx	lr

080085d0 <pxCurrentTCBConst>:
 80085d0:	200009f4 	.word	0x200009f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop

080085d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	607b      	str	r3, [r7, #4]
}
 80085f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80085f2:	f7fe fd91 	bl	8007118 <xTaskIncrementTick>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80085fc:	4b06      	ldr	r3, [pc, #24]	@ (8008618 <SysTick_Handler+0x40>)
 80085fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	2300      	movs	r3, #0
 8008606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	f383 8811 	msr	BASEPRI, r3
}
 800860e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008610:	bf00      	nop
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	e000ed04 	.word	0xe000ed04

0800861c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008620:	4b0a      	ldr	r3, [pc, #40]	@ (800864c <vPortSetupTimerInterrupt+0x30>)
 8008622:	2200      	movs	r2, #0
 8008624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008626:	4b0a      	ldr	r3, [pc, #40]	@ (8008650 <vPortSetupTimerInterrupt+0x34>)
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800862c:	4b09      	ldr	r3, [pc, #36]	@ (8008654 <vPortSetupTimerInterrupt+0x38>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a09      	ldr	r2, [pc, #36]	@ (8008658 <vPortSetupTimerInterrupt+0x3c>)
 8008632:	fba2 2303 	umull	r2, r3, r2, r3
 8008636:	099b      	lsrs	r3, r3, #6
 8008638:	4a08      	ldr	r2, [pc, #32]	@ (800865c <vPortSetupTimerInterrupt+0x40>)
 800863a:	3b01      	subs	r3, #1
 800863c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800863e:	4b03      	ldr	r3, [pc, #12]	@ (800864c <vPortSetupTimerInterrupt+0x30>)
 8008640:	2207      	movs	r2, #7
 8008642:	601a      	str	r2, [r3, #0]
}
 8008644:	bf00      	nop
 8008646:	46bd      	mov	sp, r7
 8008648:	bc80      	pop	{r7}
 800864a:	4770      	bx	lr
 800864c:	e000e010 	.word	0xe000e010
 8008650:	e000e018 	.word	0xe000e018
 8008654:	20000004 	.word	0x20000004
 8008658:	10624dd3 	.word	0x10624dd3
 800865c:	e000e014 	.word	0xe000e014

08008660 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008666:	f3ef 8305 	mrs	r3, IPSR
 800866a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2b0f      	cmp	r3, #15
 8008670:	d915      	bls.n	800869e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008672:	4a17      	ldr	r2, [pc, #92]	@ (80086d0 <vPortValidateInterruptPriority+0x70>)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	4413      	add	r3, r2
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800867c:	4b15      	ldr	r3, [pc, #84]	@ (80086d4 <vPortValidateInterruptPriority+0x74>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	7afa      	ldrb	r2, [r7, #11]
 8008682:	429a      	cmp	r2, r3
 8008684:	d20b      	bcs.n	800869e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	607b      	str	r3, [r7, #4]
}
 8008698:	bf00      	nop
 800869a:	bf00      	nop
 800869c:	e7fd      	b.n	800869a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800869e:	4b0e      	ldr	r3, [pc, #56]	@ (80086d8 <vPortValidateInterruptPriority+0x78>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80086a6:	4b0d      	ldr	r3, [pc, #52]	@ (80086dc <vPortValidateInterruptPriority+0x7c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d90b      	bls.n	80086c6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	603b      	str	r3, [r7, #0]
}
 80086c0:	bf00      	nop
 80086c2:	bf00      	nop
 80086c4:	e7fd      	b.n	80086c2 <vPortValidateInterruptPriority+0x62>
	}
 80086c6:	bf00      	nop
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bc80      	pop	{r7}
 80086ce:	4770      	bx	lr
 80086d0:	e000e3f0 	.word	0xe000e3f0
 80086d4:	20000c1c 	.word	0x20000c1c
 80086d8:	e000ed0c 	.word	0xe000ed0c
 80086dc:	20000c20 	.word	0x20000c20

080086e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b08a      	sub	sp, #40	@ 0x28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80086e8:	2300      	movs	r3, #0
 80086ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80086ec:	f7fe fc5a 	bl	8006fa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80086f0:	4b5c      	ldr	r3, [pc, #368]	@ (8008864 <pvPortMalloc+0x184>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086f8:	f000 f924 	bl	8008944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086fc:	4b5a      	ldr	r3, [pc, #360]	@ (8008868 <pvPortMalloc+0x188>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4013      	ands	r3, r2
 8008704:	2b00      	cmp	r3, #0
 8008706:	f040 8095 	bne.w	8008834 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d01e      	beq.n	800874e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008710:	2208      	movs	r2, #8
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4413      	add	r3, r2
 8008716:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f003 0307 	and.w	r3, r3, #7
 800871e:	2b00      	cmp	r3, #0
 8008720:	d015      	beq.n	800874e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f023 0307 	bic.w	r3, r3, #7
 8008728:	3308      	adds	r3, #8
 800872a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00b      	beq.n	800874e <pvPortMalloc+0x6e>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	617b      	str	r3, [r7, #20]
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	e7fd      	b.n	800874a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d06f      	beq.n	8008834 <pvPortMalloc+0x154>
 8008754:	4b45      	ldr	r3, [pc, #276]	@ (800886c <pvPortMalloc+0x18c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	429a      	cmp	r2, r3
 800875c:	d86a      	bhi.n	8008834 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800875e:	4b44      	ldr	r3, [pc, #272]	@ (8008870 <pvPortMalloc+0x190>)
 8008760:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008762:	4b43      	ldr	r3, [pc, #268]	@ (8008870 <pvPortMalloc+0x190>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008768:	e004      	b.n	8008774 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800876a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800876e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	429a      	cmp	r2, r3
 800877c:	d903      	bls.n	8008786 <pvPortMalloc+0xa6>
 800877e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1f1      	bne.n	800876a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008786:	4b37      	ldr	r3, [pc, #220]	@ (8008864 <pvPortMalloc+0x184>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800878c:	429a      	cmp	r2, r3
 800878e:	d051      	beq.n	8008834 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2208      	movs	r2, #8
 8008796:	4413      	add	r3, r2
 8008798:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800879a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	1ad2      	subs	r2, r2, r3
 80087aa:	2308      	movs	r3, #8
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d920      	bls.n	80087f4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4413      	add	r3, r2
 80087b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	f003 0307 	and.w	r3, r3, #7
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00b      	beq.n	80087dc <pvPortMalloc+0xfc>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	613b      	str	r3, [r7, #16]
}
 80087d6:	bf00      	nop
 80087d8:	bf00      	nop
 80087da:	e7fd      	b.n	80087d8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	1ad2      	subs	r2, r2, r3
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087ee:	69b8      	ldr	r0, [r7, #24]
 80087f0:	f000 f90a 	bl	8008a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087f4:	4b1d      	ldr	r3, [pc, #116]	@ (800886c <pvPortMalloc+0x18c>)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	4a1b      	ldr	r2, [pc, #108]	@ (800886c <pvPortMalloc+0x18c>)
 8008800:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008802:	4b1a      	ldr	r3, [pc, #104]	@ (800886c <pvPortMalloc+0x18c>)
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	4b1b      	ldr	r3, [pc, #108]	@ (8008874 <pvPortMalloc+0x194>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d203      	bcs.n	8008816 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800880e:	4b17      	ldr	r3, [pc, #92]	@ (800886c <pvPortMalloc+0x18c>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a18      	ldr	r2, [pc, #96]	@ (8008874 <pvPortMalloc+0x194>)
 8008814:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008818:	685a      	ldr	r2, [r3, #4]
 800881a:	4b13      	ldr	r3, [pc, #76]	@ (8008868 <pvPortMalloc+0x188>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	431a      	orrs	r2, r3
 8008820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008822:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008826:	2200      	movs	r2, #0
 8008828:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800882a:	4b13      	ldr	r3, [pc, #76]	@ (8008878 <pvPortMalloc+0x198>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3301      	adds	r3, #1
 8008830:	4a11      	ldr	r2, [pc, #68]	@ (8008878 <pvPortMalloc+0x198>)
 8008832:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008834:	f7fe fbc4 	bl	8006fc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	f003 0307 	and.w	r3, r3, #7
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00b      	beq.n	800885a <pvPortMalloc+0x17a>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	60fb      	str	r3, [r7, #12]
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop
 8008858:	e7fd      	b.n	8008856 <pvPortMalloc+0x176>
	return pvReturn;
 800885a:	69fb      	ldr	r3, [r7, #28]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3728      	adds	r7, #40	@ 0x28
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20001c2c 	.word	0x20001c2c
 8008868:	20001c40 	.word	0x20001c40
 800886c:	20001c30 	.word	0x20001c30
 8008870:	20001c24 	.word	0x20001c24
 8008874:	20001c34 	.word	0x20001c34
 8008878:	20001c38 	.word	0x20001c38

0800887c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d04f      	beq.n	800892e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800888e:	2308      	movs	r3, #8
 8008890:	425b      	negs	r3, r3
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	4413      	add	r3, r2
 8008896:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	4b25      	ldr	r3, [pc, #148]	@ (8008938 <vPortFree+0xbc>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4013      	ands	r3, r2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10b      	bne.n	80088c2 <vPortFree+0x46>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	60fb      	str	r3, [r7, #12]
}
 80088bc:	bf00      	nop
 80088be:	bf00      	nop
 80088c0:	e7fd      	b.n	80088be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00b      	beq.n	80088e2 <vPortFree+0x66>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	60bb      	str	r3, [r7, #8]
}
 80088dc:	bf00      	nop
 80088de:	bf00      	nop
 80088e0:	e7fd      	b.n	80088de <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	4b14      	ldr	r3, [pc, #80]	@ (8008938 <vPortFree+0xbc>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4013      	ands	r3, r2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d01e      	beq.n	800892e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d11a      	bne.n	800892e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008938 <vPortFree+0xbc>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	43db      	mvns	r3, r3
 8008902:	401a      	ands	r2, r3
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008908:	f7fe fb4c 	bl	8006fa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	4b0a      	ldr	r3, [pc, #40]	@ (800893c <vPortFree+0xc0>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4413      	add	r3, r2
 8008916:	4a09      	ldr	r2, [pc, #36]	@ (800893c <vPortFree+0xc0>)
 8008918:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800891a:	6938      	ldr	r0, [r7, #16]
 800891c:	f000 f874 	bl	8008a08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008920:	4b07      	ldr	r3, [pc, #28]	@ (8008940 <vPortFree+0xc4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3301      	adds	r3, #1
 8008926:	4a06      	ldr	r2, [pc, #24]	@ (8008940 <vPortFree+0xc4>)
 8008928:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800892a:	f7fe fb49 	bl	8006fc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800892e:	bf00      	nop
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20001c40 	.word	0x20001c40
 800893c:	20001c30 	.word	0x20001c30
 8008940:	20001c3c 	.word	0x20001c3c

08008944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800894a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800894e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008950:	4b27      	ldr	r3, [pc, #156]	@ (80089f0 <prvHeapInit+0xac>)
 8008952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00c      	beq.n	8008978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3307      	adds	r3, #7
 8008962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f023 0307 	bic.w	r3, r3, #7
 800896a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	4a1f      	ldr	r2, [pc, #124]	@ (80089f0 <prvHeapInit+0xac>)
 8008974:	4413      	add	r3, r2
 8008976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800897c:	4a1d      	ldr	r2, [pc, #116]	@ (80089f4 <prvHeapInit+0xb0>)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008982:	4b1c      	ldr	r3, [pc, #112]	@ (80089f4 <prvHeapInit+0xb0>)
 8008984:	2200      	movs	r2, #0
 8008986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	4413      	add	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008990:	2208      	movs	r2, #8
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	1a9b      	subs	r3, r3, r2
 8008996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0307 	bic.w	r3, r3, #7
 800899e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4a15      	ldr	r2, [pc, #84]	@ (80089f8 <prvHeapInit+0xb4>)
 80089a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089a6:	4b14      	ldr	r3, [pc, #80]	@ (80089f8 <prvHeapInit+0xb4>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2200      	movs	r2, #0
 80089ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089ae:	4b12      	ldr	r3, [pc, #72]	@ (80089f8 <prvHeapInit+0xb4>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	1ad2      	subs	r2, r2, r3
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089c4:	4b0c      	ldr	r3, [pc, #48]	@ (80089f8 <prvHeapInit+0xb4>)
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	4a0a      	ldr	r2, [pc, #40]	@ (80089fc <prvHeapInit+0xb8>)
 80089d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	4a09      	ldr	r2, [pc, #36]	@ (8008a00 <prvHeapInit+0xbc>)
 80089da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089dc:	4b09      	ldr	r3, [pc, #36]	@ (8008a04 <prvHeapInit+0xc0>)
 80089de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80089e2:	601a      	str	r2, [r3, #0]
}
 80089e4:	bf00      	nop
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bc80      	pop	{r7}
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	20000c24 	.word	0x20000c24
 80089f4:	20001c24 	.word	0x20001c24
 80089f8:	20001c2c 	.word	0x20001c2c
 80089fc:	20001c34 	.word	0x20001c34
 8008a00:	20001c30 	.word	0x20001c30
 8008a04:	20001c40 	.word	0x20001c40

08008a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a10:	4b27      	ldr	r3, [pc, #156]	@ (8008ab0 <prvInsertBlockIntoFreeList+0xa8>)
 8008a12:	60fb      	str	r3, [r7, #12]
 8008a14:	e002      	b.n	8008a1c <prvInsertBlockIntoFreeList+0x14>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d8f7      	bhi.n	8008a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	4413      	add	r3, r2
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d108      	bne.n	8008a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	441a      	add	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	441a      	add	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d118      	bne.n	8008a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	4b14      	ldr	r3, [pc, #80]	@ (8008ab4 <prvInsertBlockIntoFreeList+0xac>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d00d      	beq.n	8008a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	441a      	add	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	e008      	b.n	8008a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a86:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab4 <prvInsertBlockIntoFreeList+0xac>)
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	601a      	str	r2, [r3, #0]
 8008a8e:	e003      	b.n	8008a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d002      	beq.n	8008aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008aa6:	bf00      	nop
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bc80      	pop	{r7}
 8008aae:	4770      	bx	lr
 8008ab0:	20001c24 	.word	0x20001c24
 8008ab4:	20001c2c 	.word	0x20001c2c

08008ab8 <siprintf>:
 8008ab8:	b40e      	push	{r1, r2, r3}
 8008aba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008abe:	b500      	push	{lr}
 8008ac0:	b09c      	sub	sp, #112	@ 0x70
 8008ac2:	ab1d      	add	r3, sp, #116	@ 0x74
 8008ac4:	9002      	str	r0, [sp, #8]
 8008ac6:	9006      	str	r0, [sp, #24]
 8008ac8:	9107      	str	r1, [sp, #28]
 8008aca:	9104      	str	r1, [sp, #16]
 8008acc:	4808      	ldr	r0, [pc, #32]	@ (8008af0 <siprintf+0x38>)
 8008ace:	4909      	ldr	r1, [pc, #36]	@ (8008af4 <siprintf+0x3c>)
 8008ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad4:	9105      	str	r1, [sp, #20]
 8008ad6:	6800      	ldr	r0, [r0, #0]
 8008ad8:	a902      	add	r1, sp, #8
 8008ada:	9301      	str	r3, [sp, #4]
 8008adc:	f000 f948 	bl	8008d70 <_svfiprintf_r>
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	9b02      	ldr	r3, [sp, #8]
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	b01c      	add	sp, #112	@ 0x70
 8008ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aec:	b003      	add	sp, #12
 8008aee:	4770      	bx	lr
 8008af0:	20000014 	.word	0x20000014
 8008af4:	ffff0208 	.word	0xffff0208

08008af8 <memset>:
 8008af8:	4603      	mov	r3, r0
 8008afa:	4402      	add	r2, r0
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d100      	bne.n	8008b02 <memset+0xa>
 8008b00:	4770      	bx	lr
 8008b02:	f803 1b01 	strb.w	r1, [r3], #1
 8008b06:	e7f9      	b.n	8008afc <memset+0x4>

08008b08 <_reclaim_reent>:
 8008b08:	4b29      	ldr	r3, [pc, #164]	@ (8008bb0 <_reclaim_reent+0xa8>)
 8008b0a:	b570      	push	{r4, r5, r6, lr}
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4283      	cmp	r3, r0
 8008b12:	d04b      	beq.n	8008bac <_reclaim_reent+0xa4>
 8008b14:	69c3      	ldr	r3, [r0, #28]
 8008b16:	b1ab      	cbz	r3, 8008b44 <_reclaim_reent+0x3c>
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	b16b      	cbz	r3, 8008b38 <_reclaim_reent+0x30>
 8008b1c:	2500      	movs	r5, #0
 8008b1e:	69e3      	ldr	r3, [r4, #28]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	5959      	ldr	r1, [r3, r5]
 8008b24:	2900      	cmp	r1, #0
 8008b26:	d13b      	bne.n	8008ba0 <_reclaim_reent+0x98>
 8008b28:	3504      	adds	r5, #4
 8008b2a:	2d80      	cmp	r5, #128	@ 0x80
 8008b2c:	d1f7      	bne.n	8008b1e <_reclaim_reent+0x16>
 8008b2e:	69e3      	ldr	r3, [r4, #28]
 8008b30:	4620      	mov	r0, r4
 8008b32:	68d9      	ldr	r1, [r3, #12]
 8008b34:	f000 f878 	bl	8008c28 <_free_r>
 8008b38:	69e3      	ldr	r3, [r4, #28]
 8008b3a:	6819      	ldr	r1, [r3, #0]
 8008b3c:	b111      	cbz	r1, 8008b44 <_reclaim_reent+0x3c>
 8008b3e:	4620      	mov	r0, r4
 8008b40:	f000 f872 	bl	8008c28 <_free_r>
 8008b44:	6961      	ldr	r1, [r4, #20]
 8008b46:	b111      	cbz	r1, 8008b4e <_reclaim_reent+0x46>
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 f86d 	bl	8008c28 <_free_r>
 8008b4e:	69e1      	ldr	r1, [r4, #28]
 8008b50:	b111      	cbz	r1, 8008b58 <_reclaim_reent+0x50>
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 f868 	bl	8008c28 <_free_r>
 8008b58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008b5a:	b111      	cbz	r1, 8008b62 <_reclaim_reent+0x5a>
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f000 f863 	bl	8008c28 <_free_r>
 8008b62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b64:	b111      	cbz	r1, 8008b6c <_reclaim_reent+0x64>
 8008b66:	4620      	mov	r0, r4
 8008b68:	f000 f85e 	bl	8008c28 <_free_r>
 8008b6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008b6e:	b111      	cbz	r1, 8008b76 <_reclaim_reent+0x6e>
 8008b70:	4620      	mov	r0, r4
 8008b72:	f000 f859 	bl	8008c28 <_free_r>
 8008b76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008b78:	b111      	cbz	r1, 8008b80 <_reclaim_reent+0x78>
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 f854 	bl	8008c28 <_free_r>
 8008b80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008b82:	b111      	cbz	r1, 8008b8a <_reclaim_reent+0x82>
 8008b84:	4620      	mov	r0, r4
 8008b86:	f000 f84f 	bl	8008c28 <_free_r>
 8008b8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008b8c:	b111      	cbz	r1, 8008b94 <_reclaim_reent+0x8c>
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 f84a 	bl	8008c28 <_free_r>
 8008b94:	6a23      	ldr	r3, [r4, #32]
 8008b96:	b14b      	cbz	r3, 8008bac <_reclaim_reent+0xa4>
 8008b98:	4620      	mov	r0, r4
 8008b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b9e:	4718      	bx	r3
 8008ba0:	680e      	ldr	r6, [r1, #0]
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f000 f840 	bl	8008c28 <_free_r>
 8008ba8:	4631      	mov	r1, r6
 8008baa:	e7bb      	b.n	8008b24 <_reclaim_reent+0x1c>
 8008bac:	bd70      	pop	{r4, r5, r6, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000014 	.word	0x20000014

08008bb4 <__errno>:
 8008bb4:	4b01      	ldr	r3, [pc, #4]	@ (8008bbc <__errno+0x8>)
 8008bb6:	6818      	ldr	r0, [r3, #0]
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	20000014 	.word	0x20000014

08008bc0 <__libc_init_array>:
 8008bc0:	b570      	push	{r4, r5, r6, lr}
 8008bc2:	2600      	movs	r6, #0
 8008bc4:	4d0c      	ldr	r5, [pc, #48]	@ (8008bf8 <__libc_init_array+0x38>)
 8008bc6:	4c0d      	ldr	r4, [pc, #52]	@ (8008bfc <__libc_init_array+0x3c>)
 8008bc8:	1b64      	subs	r4, r4, r5
 8008bca:	10a4      	asrs	r4, r4, #2
 8008bcc:	42a6      	cmp	r6, r4
 8008bce:	d109      	bne.n	8008be4 <__libc_init_array+0x24>
 8008bd0:	f000 fc78 	bl	80094c4 <_init>
 8008bd4:	2600      	movs	r6, #0
 8008bd6:	4d0a      	ldr	r5, [pc, #40]	@ (8008c00 <__libc_init_array+0x40>)
 8008bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8008c04 <__libc_init_array+0x44>)
 8008bda:	1b64      	subs	r4, r4, r5
 8008bdc:	10a4      	asrs	r4, r4, #2
 8008bde:	42a6      	cmp	r6, r4
 8008be0:	d105      	bne.n	8008bee <__libc_init_array+0x2e>
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008be8:	4798      	blx	r3
 8008bea:	3601      	adds	r6, #1
 8008bec:	e7ee      	b.n	8008bcc <__libc_init_array+0xc>
 8008bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf2:	4798      	blx	r3
 8008bf4:	3601      	adds	r6, #1
 8008bf6:	e7f2      	b.n	8008bde <__libc_init_array+0x1e>
 8008bf8:	08009820 	.word	0x08009820
 8008bfc:	08009820 	.word	0x08009820
 8008c00:	08009820 	.word	0x08009820
 8008c04:	08009824 	.word	0x08009824

08008c08 <__retarget_lock_acquire_recursive>:
 8008c08:	4770      	bx	lr

08008c0a <__retarget_lock_release_recursive>:
 8008c0a:	4770      	bx	lr

08008c0c <memcpy>:
 8008c0c:	440a      	add	r2, r1
 8008c0e:	4291      	cmp	r1, r2
 8008c10:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008c14:	d100      	bne.n	8008c18 <memcpy+0xc>
 8008c16:	4770      	bx	lr
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c1e:	4291      	cmp	r1, r2
 8008c20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c24:	d1f9      	bne.n	8008c1a <memcpy+0xe>
 8008c26:	bd10      	pop	{r4, pc}

08008c28 <_free_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4605      	mov	r5, r0
 8008c2c:	2900      	cmp	r1, #0
 8008c2e:	d040      	beq.n	8008cb2 <_free_r+0x8a>
 8008c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c34:	1f0c      	subs	r4, r1, #4
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	bfb8      	it	lt
 8008c3a:	18e4      	addlt	r4, r4, r3
 8008c3c:	f000 fbc8 	bl	80093d0 <__malloc_lock>
 8008c40:	4a1c      	ldr	r2, [pc, #112]	@ (8008cb4 <_free_r+0x8c>)
 8008c42:	6813      	ldr	r3, [r2, #0]
 8008c44:	b933      	cbnz	r3, 8008c54 <_free_r+0x2c>
 8008c46:	6063      	str	r3, [r4, #4]
 8008c48:	6014      	str	r4, [r2, #0]
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c50:	f000 bbc4 	b.w	80093dc <__malloc_unlock>
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	d908      	bls.n	8008c6a <_free_r+0x42>
 8008c58:	6820      	ldr	r0, [r4, #0]
 8008c5a:	1821      	adds	r1, r4, r0
 8008c5c:	428b      	cmp	r3, r1
 8008c5e:	bf01      	itttt	eq
 8008c60:	6819      	ldreq	r1, [r3, #0]
 8008c62:	685b      	ldreq	r3, [r3, #4]
 8008c64:	1809      	addeq	r1, r1, r0
 8008c66:	6021      	streq	r1, [r4, #0]
 8008c68:	e7ed      	b.n	8008c46 <_free_r+0x1e>
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	b10b      	cbz	r3, 8008c74 <_free_r+0x4c>
 8008c70:	42a3      	cmp	r3, r4
 8008c72:	d9fa      	bls.n	8008c6a <_free_r+0x42>
 8008c74:	6811      	ldr	r1, [r2, #0]
 8008c76:	1850      	adds	r0, r2, r1
 8008c78:	42a0      	cmp	r0, r4
 8008c7a:	d10b      	bne.n	8008c94 <_free_r+0x6c>
 8008c7c:	6820      	ldr	r0, [r4, #0]
 8008c7e:	4401      	add	r1, r0
 8008c80:	1850      	adds	r0, r2, r1
 8008c82:	4283      	cmp	r3, r0
 8008c84:	6011      	str	r1, [r2, #0]
 8008c86:	d1e0      	bne.n	8008c4a <_free_r+0x22>
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	4408      	add	r0, r1
 8008c8e:	6010      	str	r0, [r2, #0]
 8008c90:	6053      	str	r3, [r2, #4]
 8008c92:	e7da      	b.n	8008c4a <_free_r+0x22>
 8008c94:	d902      	bls.n	8008c9c <_free_r+0x74>
 8008c96:	230c      	movs	r3, #12
 8008c98:	602b      	str	r3, [r5, #0]
 8008c9a:	e7d6      	b.n	8008c4a <_free_r+0x22>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	1821      	adds	r1, r4, r0
 8008ca0:	428b      	cmp	r3, r1
 8008ca2:	bf01      	itttt	eq
 8008ca4:	6819      	ldreq	r1, [r3, #0]
 8008ca6:	685b      	ldreq	r3, [r3, #4]
 8008ca8:	1809      	addeq	r1, r1, r0
 8008caa:	6021      	streq	r1, [r4, #0]
 8008cac:	6063      	str	r3, [r4, #4]
 8008cae:	6054      	str	r4, [r2, #4]
 8008cb0:	e7cb      	b.n	8008c4a <_free_r+0x22>
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	20001d88 	.word	0x20001d88

08008cb8 <__ssputs_r>:
 8008cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbc:	461f      	mov	r7, r3
 8008cbe:	688e      	ldr	r6, [r1, #8]
 8008cc0:	4682      	mov	sl, r0
 8008cc2:	42be      	cmp	r6, r7
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	4690      	mov	r8, r2
 8008cc8:	680b      	ldr	r3, [r1, #0]
 8008cca:	d82d      	bhi.n	8008d28 <__ssputs_r+0x70>
 8008ccc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008cd4:	d026      	beq.n	8008d24 <__ssputs_r+0x6c>
 8008cd6:	6965      	ldr	r5, [r4, #20]
 8008cd8:	6909      	ldr	r1, [r1, #16]
 8008cda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cde:	eba3 0901 	sub.w	r9, r3, r1
 8008ce2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ce6:	1c7b      	adds	r3, r7, #1
 8008ce8:	444b      	add	r3, r9
 8008cea:	106d      	asrs	r5, r5, #1
 8008cec:	429d      	cmp	r5, r3
 8008cee:	bf38      	it	cc
 8008cf0:	461d      	movcc	r5, r3
 8008cf2:	0553      	lsls	r3, r2, #21
 8008cf4:	d527      	bpl.n	8008d46 <__ssputs_r+0x8e>
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	f000 f958 	bl	8008fac <_malloc_r>
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	b360      	cbz	r0, 8008d5a <__ssputs_r+0xa2>
 8008d00:	464a      	mov	r2, r9
 8008d02:	6921      	ldr	r1, [r4, #16]
 8008d04:	f7ff ff82 	bl	8008c0c <memcpy>
 8008d08:	89a3      	ldrh	r3, [r4, #12]
 8008d0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d12:	81a3      	strh	r3, [r4, #12]
 8008d14:	6126      	str	r6, [r4, #16]
 8008d16:	444e      	add	r6, r9
 8008d18:	6026      	str	r6, [r4, #0]
 8008d1a:	463e      	mov	r6, r7
 8008d1c:	6165      	str	r5, [r4, #20]
 8008d1e:	eba5 0509 	sub.w	r5, r5, r9
 8008d22:	60a5      	str	r5, [r4, #8]
 8008d24:	42be      	cmp	r6, r7
 8008d26:	d900      	bls.n	8008d2a <__ssputs_r+0x72>
 8008d28:	463e      	mov	r6, r7
 8008d2a:	4632      	mov	r2, r6
 8008d2c:	4641      	mov	r1, r8
 8008d2e:	6820      	ldr	r0, [r4, #0]
 8008d30:	f000 fb88 	bl	8009444 <memmove>
 8008d34:	2000      	movs	r0, #0
 8008d36:	68a3      	ldr	r3, [r4, #8]
 8008d38:	1b9b      	subs	r3, r3, r6
 8008d3a:	60a3      	str	r3, [r4, #8]
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	4433      	add	r3, r6
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d46:	462a      	mov	r2, r5
 8008d48:	f000 fb4e 	bl	80093e8 <_realloc_r>
 8008d4c:	4606      	mov	r6, r0
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d1e0      	bne.n	8008d14 <__ssputs_r+0x5c>
 8008d52:	4650      	mov	r0, sl
 8008d54:	6921      	ldr	r1, [r4, #16]
 8008d56:	f7ff ff67 	bl	8008c28 <_free_r>
 8008d5a:	230c      	movs	r3, #12
 8008d5c:	f8ca 3000 	str.w	r3, [sl]
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d6a:	81a3      	strh	r3, [r4, #12]
 8008d6c:	e7e9      	b.n	8008d42 <__ssputs_r+0x8a>
	...

08008d70 <_svfiprintf_r>:
 8008d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d74:	4698      	mov	r8, r3
 8008d76:	898b      	ldrh	r3, [r1, #12]
 8008d78:	4607      	mov	r7, r0
 8008d7a:	061b      	lsls	r3, r3, #24
 8008d7c:	460d      	mov	r5, r1
 8008d7e:	4614      	mov	r4, r2
 8008d80:	b09d      	sub	sp, #116	@ 0x74
 8008d82:	d510      	bpl.n	8008da6 <_svfiprintf_r+0x36>
 8008d84:	690b      	ldr	r3, [r1, #16]
 8008d86:	b973      	cbnz	r3, 8008da6 <_svfiprintf_r+0x36>
 8008d88:	2140      	movs	r1, #64	@ 0x40
 8008d8a:	f000 f90f 	bl	8008fac <_malloc_r>
 8008d8e:	6028      	str	r0, [r5, #0]
 8008d90:	6128      	str	r0, [r5, #16]
 8008d92:	b930      	cbnz	r0, 8008da2 <_svfiprintf_r+0x32>
 8008d94:	230c      	movs	r3, #12
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d9c:	b01d      	add	sp, #116	@ 0x74
 8008d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da2:	2340      	movs	r3, #64	@ 0x40
 8008da4:	616b      	str	r3, [r5, #20]
 8008da6:	2300      	movs	r3, #0
 8008da8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008daa:	2320      	movs	r3, #32
 8008dac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008db0:	2330      	movs	r3, #48	@ 0x30
 8008db2:	f04f 0901 	mov.w	r9, #1
 8008db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008f54 <_svfiprintf_r+0x1e4>
 8008dbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dc2:	4623      	mov	r3, r4
 8008dc4:	469a      	mov	sl, r3
 8008dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dca:	b10a      	cbz	r2, 8008dd0 <_svfiprintf_r+0x60>
 8008dcc:	2a25      	cmp	r2, #37	@ 0x25
 8008dce:	d1f9      	bne.n	8008dc4 <_svfiprintf_r+0x54>
 8008dd0:	ebba 0b04 	subs.w	fp, sl, r4
 8008dd4:	d00b      	beq.n	8008dee <_svfiprintf_r+0x7e>
 8008dd6:	465b      	mov	r3, fp
 8008dd8:	4622      	mov	r2, r4
 8008dda:	4629      	mov	r1, r5
 8008ddc:	4638      	mov	r0, r7
 8008dde:	f7ff ff6b 	bl	8008cb8 <__ssputs_r>
 8008de2:	3001      	adds	r0, #1
 8008de4:	f000 80a7 	beq.w	8008f36 <_svfiprintf_r+0x1c6>
 8008de8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dea:	445a      	add	r2, fp
 8008dec:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dee:	f89a 3000 	ldrb.w	r3, [sl]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 809f 	beq.w	8008f36 <_svfiprintf_r+0x1c6>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e02:	f10a 0a01 	add.w	sl, sl, #1
 8008e06:	9304      	str	r3, [sp, #16]
 8008e08:	9307      	str	r3, [sp, #28]
 8008e0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e10:	4654      	mov	r4, sl
 8008e12:	2205      	movs	r2, #5
 8008e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e18:	484e      	ldr	r0, [pc, #312]	@ (8008f54 <_svfiprintf_r+0x1e4>)
 8008e1a:	f000 fb3d 	bl	8009498 <memchr>
 8008e1e:	9a04      	ldr	r2, [sp, #16]
 8008e20:	b9d8      	cbnz	r0, 8008e5a <_svfiprintf_r+0xea>
 8008e22:	06d0      	lsls	r0, r2, #27
 8008e24:	bf44      	itt	mi
 8008e26:	2320      	movmi	r3, #32
 8008e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e2c:	0711      	lsls	r1, r2, #28
 8008e2e:	bf44      	itt	mi
 8008e30:	232b      	movmi	r3, #43	@ 0x2b
 8008e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e36:	f89a 3000 	ldrb.w	r3, [sl]
 8008e3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e3c:	d015      	beq.n	8008e6a <_svfiprintf_r+0xfa>
 8008e3e:	4654      	mov	r4, sl
 8008e40:	2000      	movs	r0, #0
 8008e42:	f04f 0c0a 	mov.w	ip, #10
 8008e46:	9a07      	ldr	r2, [sp, #28]
 8008e48:	4621      	mov	r1, r4
 8008e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e4e:	3b30      	subs	r3, #48	@ 0x30
 8008e50:	2b09      	cmp	r3, #9
 8008e52:	d94b      	bls.n	8008eec <_svfiprintf_r+0x17c>
 8008e54:	b1b0      	cbz	r0, 8008e84 <_svfiprintf_r+0x114>
 8008e56:	9207      	str	r2, [sp, #28]
 8008e58:	e014      	b.n	8008e84 <_svfiprintf_r+0x114>
 8008e5a:	eba0 0308 	sub.w	r3, r0, r8
 8008e5e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e62:	4313      	orrs	r3, r2
 8008e64:	46a2      	mov	sl, r4
 8008e66:	9304      	str	r3, [sp, #16]
 8008e68:	e7d2      	b.n	8008e10 <_svfiprintf_r+0xa0>
 8008e6a:	9b03      	ldr	r3, [sp, #12]
 8008e6c:	1d19      	adds	r1, r3, #4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	9103      	str	r1, [sp, #12]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bfbb      	ittet	lt
 8008e76:	425b      	neglt	r3, r3
 8008e78:	f042 0202 	orrlt.w	r2, r2, #2
 8008e7c:	9307      	strge	r3, [sp, #28]
 8008e7e:	9307      	strlt	r3, [sp, #28]
 8008e80:	bfb8      	it	lt
 8008e82:	9204      	strlt	r2, [sp, #16]
 8008e84:	7823      	ldrb	r3, [r4, #0]
 8008e86:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e88:	d10a      	bne.n	8008ea0 <_svfiprintf_r+0x130>
 8008e8a:	7863      	ldrb	r3, [r4, #1]
 8008e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e8e:	d132      	bne.n	8008ef6 <_svfiprintf_r+0x186>
 8008e90:	9b03      	ldr	r3, [sp, #12]
 8008e92:	3402      	adds	r4, #2
 8008e94:	1d1a      	adds	r2, r3, #4
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	9203      	str	r2, [sp, #12]
 8008e9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e9e:	9305      	str	r3, [sp, #20]
 8008ea0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008f58 <_svfiprintf_r+0x1e8>
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	4650      	mov	r0, sl
 8008ea8:	7821      	ldrb	r1, [r4, #0]
 8008eaa:	f000 faf5 	bl	8009498 <memchr>
 8008eae:	b138      	cbz	r0, 8008ec0 <_svfiprintf_r+0x150>
 8008eb0:	2240      	movs	r2, #64	@ 0x40
 8008eb2:	9b04      	ldr	r3, [sp, #16]
 8008eb4:	eba0 000a 	sub.w	r0, r0, sl
 8008eb8:	4082      	lsls	r2, r0
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	3401      	adds	r4, #1
 8008ebe:	9304      	str	r3, [sp, #16]
 8008ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec4:	2206      	movs	r2, #6
 8008ec6:	4825      	ldr	r0, [pc, #148]	@ (8008f5c <_svfiprintf_r+0x1ec>)
 8008ec8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ecc:	f000 fae4 	bl	8009498 <memchr>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d036      	beq.n	8008f42 <_svfiprintf_r+0x1d2>
 8008ed4:	4b22      	ldr	r3, [pc, #136]	@ (8008f60 <_svfiprintf_r+0x1f0>)
 8008ed6:	bb1b      	cbnz	r3, 8008f20 <_svfiprintf_r+0x1b0>
 8008ed8:	9b03      	ldr	r3, [sp, #12]
 8008eda:	3307      	adds	r3, #7
 8008edc:	f023 0307 	bic.w	r3, r3, #7
 8008ee0:	3308      	adds	r3, #8
 8008ee2:	9303      	str	r3, [sp, #12]
 8008ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ee6:	4433      	add	r3, r6
 8008ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eea:	e76a      	b.n	8008dc2 <_svfiprintf_r+0x52>
 8008eec:	460c      	mov	r4, r1
 8008eee:	2001      	movs	r0, #1
 8008ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ef4:	e7a8      	b.n	8008e48 <_svfiprintf_r+0xd8>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f04f 0c0a 	mov.w	ip, #10
 8008efc:	4619      	mov	r1, r3
 8008efe:	3401      	adds	r4, #1
 8008f00:	9305      	str	r3, [sp, #20]
 8008f02:	4620      	mov	r0, r4
 8008f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f08:	3a30      	subs	r2, #48	@ 0x30
 8008f0a:	2a09      	cmp	r2, #9
 8008f0c:	d903      	bls.n	8008f16 <_svfiprintf_r+0x1a6>
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0c6      	beq.n	8008ea0 <_svfiprintf_r+0x130>
 8008f12:	9105      	str	r1, [sp, #20]
 8008f14:	e7c4      	b.n	8008ea0 <_svfiprintf_r+0x130>
 8008f16:	4604      	mov	r4, r0
 8008f18:	2301      	movs	r3, #1
 8008f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f1e:	e7f0      	b.n	8008f02 <_svfiprintf_r+0x192>
 8008f20:	ab03      	add	r3, sp, #12
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	462a      	mov	r2, r5
 8008f26:	4638      	mov	r0, r7
 8008f28:	4b0e      	ldr	r3, [pc, #56]	@ (8008f64 <_svfiprintf_r+0x1f4>)
 8008f2a:	a904      	add	r1, sp, #16
 8008f2c:	f3af 8000 	nop.w
 8008f30:	1c42      	adds	r2, r0, #1
 8008f32:	4606      	mov	r6, r0
 8008f34:	d1d6      	bne.n	8008ee4 <_svfiprintf_r+0x174>
 8008f36:	89ab      	ldrh	r3, [r5, #12]
 8008f38:	065b      	lsls	r3, r3, #25
 8008f3a:	f53f af2d 	bmi.w	8008d98 <_svfiprintf_r+0x28>
 8008f3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f40:	e72c      	b.n	8008d9c <_svfiprintf_r+0x2c>
 8008f42:	ab03      	add	r3, sp, #12
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	462a      	mov	r2, r5
 8008f48:	4638      	mov	r0, r7
 8008f4a:	4b06      	ldr	r3, [pc, #24]	@ (8008f64 <_svfiprintf_r+0x1f4>)
 8008f4c:	a904      	add	r1, sp, #16
 8008f4e:	f000 f91f 	bl	8009190 <_printf_i>
 8008f52:	e7ed      	b.n	8008f30 <_svfiprintf_r+0x1c0>
 8008f54:	080097e2 	.word	0x080097e2
 8008f58:	080097e8 	.word	0x080097e8
 8008f5c:	080097ec 	.word	0x080097ec
 8008f60:	00000000 	.word	0x00000000
 8008f64:	08008cb9 	.word	0x08008cb9

08008f68 <sbrk_aligned>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	4e0f      	ldr	r6, [pc, #60]	@ (8008fa8 <sbrk_aligned+0x40>)
 8008f6c:	460c      	mov	r4, r1
 8008f6e:	6831      	ldr	r1, [r6, #0]
 8008f70:	4605      	mov	r5, r0
 8008f72:	b911      	cbnz	r1, 8008f7a <sbrk_aligned+0x12>
 8008f74:	f000 fa80 	bl	8009478 <_sbrk_r>
 8008f78:	6030      	str	r0, [r6, #0]
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f000 fa7b 	bl	8009478 <_sbrk_r>
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	d103      	bne.n	8008f8e <sbrk_aligned+0x26>
 8008f86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	bd70      	pop	{r4, r5, r6, pc}
 8008f8e:	1cc4      	adds	r4, r0, #3
 8008f90:	f024 0403 	bic.w	r4, r4, #3
 8008f94:	42a0      	cmp	r0, r4
 8008f96:	d0f8      	beq.n	8008f8a <sbrk_aligned+0x22>
 8008f98:	1a21      	subs	r1, r4, r0
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f000 fa6c 	bl	8009478 <_sbrk_r>
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d1f2      	bne.n	8008f8a <sbrk_aligned+0x22>
 8008fa4:	e7ef      	b.n	8008f86 <sbrk_aligned+0x1e>
 8008fa6:	bf00      	nop
 8008fa8:	20001d84 	.word	0x20001d84

08008fac <_malloc_r>:
 8008fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb0:	1ccd      	adds	r5, r1, #3
 8008fb2:	f025 0503 	bic.w	r5, r5, #3
 8008fb6:	3508      	adds	r5, #8
 8008fb8:	2d0c      	cmp	r5, #12
 8008fba:	bf38      	it	cc
 8008fbc:	250c      	movcc	r5, #12
 8008fbe:	2d00      	cmp	r5, #0
 8008fc0:	4606      	mov	r6, r0
 8008fc2:	db01      	blt.n	8008fc8 <_malloc_r+0x1c>
 8008fc4:	42a9      	cmp	r1, r5
 8008fc6:	d904      	bls.n	8008fd2 <_malloc_r+0x26>
 8008fc8:	230c      	movs	r3, #12
 8008fca:	6033      	str	r3, [r6, #0]
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090a8 <_malloc_r+0xfc>
 8008fd6:	f000 f9fb 	bl	80093d0 <__malloc_lock>
 8008fda:	f8d8 3000 	ldr.w	r3, [r8]
 8008fde:	461c      	mov	r4, r3
 8008fe0:	bb44      	cbnz	r4, 8009034 <_malloc_r+0x88>
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f7ff ffbf 	bl	8008f68 <sbrk_aligned>
 8008fea:	1c43      	adds	r3, r0, #1
 8008fec:	4604      	mov	r4, r0
 8008fee:	d158      	bne.n	80090a2 <_malloc_r+0xf6>
 8008ff0:	f8d8 4000 	ldr.w	r4, [r8]
 8008ff4:	4627      	mov	r7, r4
 8008ff6:	2f00      	cmp	r7, #0
 8008ff8:	d143      	bne.n	8009082 <_malloc_r+0xd6>
 8008ffa:	2c00      	cmp	r4, #0
 8008ffc:	d04b      	beq.n	8009096 <_malloc_r+0xea>
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	4639      	mov	r1, r7
 8009002:	4630      	mov	r0, r6
 8009004:	eb04 0903 	add.w	r9, r4, r3
 8009008:	f000 fa36 	bl	8009478 <_sbrk_r>
 800900c:	4581      	cmp	r9, r0
 800900e:	d142      	bne.n	8009096 <_malloc_r+0xea>
 8009010:	6821      	ldr	r1, [r4, #0]
 8009012:	4630      	mov	r0, r6
 8009014:	1a6d      	subs	r5, r5, r1
 8009016:	4629      	mov	r1, r5
 8009018:	f7ff ffa6 	bl	8008f68 <sbrk_aligned>
 800901c:	3001      	adds	r0, #1
 800901e:	d03a      	beq.n	8009096 <_malloc_r+0xea>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	442b      	add	r3, r5
 8009024:	6023      	str	r3, [r4, #0]
 8009026:	f8d8 3000 	ldr.w	r3, [r8]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	bb62      	cbnz	r2, 8009088 <_malloc_r+0xdc>
 800902e:	f8c8 7000 	str.w	r7, [r8]
 8009032:	e00f      	b.n	8009054 <_malloc_r+0xa8>
 8009034:	6822      	ldr	r2, [r4, #0]
 8009036:	1b52      	subs	r2, r2, r5
 8009038:	d420      	bmi.n	800907c <_malloc_r+0xd0>
 800903a:	2a0b      	cmp	r2, #11
 800903c:	d917      	bls.n	800906e <_malloc_r+0xc2>
 800903e:	1961      	adds	r1, r4, r5
 8009040:	42a3      	cmp	r3, r4
 8009042:	6025      	str	r5, [r4, #0]
 8009044:	bf18      	it	ne
 8009046:	6059      	strne	r1, [r3, #4]
 8009048:	6863      	ldr	r3, [r4, #4]
 800904a:	bf08      	it	eq
 800904c:	f8c8 1000 	streq.w	r1, [r8]
 8009050:	5162      	str	r2, [r4, r5]
 8009052:	604b      	str	r3, [r1, #4]
 8009054:	4630      	mov	r0, r6
 8009056:	f000 f9c1 	bl	80093dc <__malloc_unlock>
 800905a:	f104 000b 	add.w	r0, r4, #11
 800905e:	1d23      	adds	r3, r4, #4
 8009060:	f020 0007 	bic.w	r0, r0, #7
 8009064:	1ac2      	subs	r2, r0, r3
 8009066:	bf1c      	itt	ne
 8009068:	1a1b      	subne	r3, r3, r0
 800906a:	50a3      	strne	r3, [r4, r2]
 800906c:	e7af      	b.n	8008fce <_malloc_r+0x22>
 800906e:	6862      	ldr	r2, [r4, #4]
 8009070:	42a3      	cmp	r3, r4
 8009072:	bf0c      	ite	eq
 8009074:	f8c8 2000 	streq.w	r2, [r8]
 8009078:	605a      	strne	r2, [r3, #4]
 800907a:	e7eb      	b.n	8009054 <_malloc_r+0xa8>
 800907c:	4623      	mov	r3, r4
 800907e:	6864      	ldr	r4, [r4, #4]
 8009080:	e7ae      	b.n	8008fe0 <_malloc_r+0x34>
 8009082:	463c      	mov	r4, r7
 8009084:	687f      	ldr	r7, [r7, #4]
 8009086:	e7b6      	b.n	8008ff6 <_malloc_r+0x4a>
 8009088:	461a      	mov	r2, r3
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	42a3      	cmp	r3, r4
 800908e:	d1fb      	bne.n	8009088 <_malloc_r+0xdc>
 8009090:	2300      	movs	r3, #0
 8009092:	6053      	str	r3, [r2, #4]
 8009094:	e7de      	b.n	8009054 <_malloc_r+0xa8>
 8009096:	230c      	movs	r3, #12
 8009098:	4630      	mov	r0, r6
 800909a:	6033      	str	r3, [r6, #0]
 800909c:	f000 f99e 	bl	80093dc <__malloc_unlock>
 80090a0:	e794      	b.n	8008fcc <_malloc_r+0x20>
 80090a2:	6005      	str	r5, [r0, #0]
 80090a4:	e7d6      	b.n	8009054 <_malloc_r+0xa8>
 80090a6:	bf00      	nop
 80090a8:	20001d88 	.word	0x20001d88

080090ac <_printf_common>:
 80090ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b0:	4616      	mov	r6, r2
 80090b2:	4698      	mov	r8, r3
 80090b4:	688a      	ldr	r2, [r1, #8]
 80090b6:	690b      	ldr	r3, [r1, #16]
 80090b8:	4607      	mov	r7, r0
 80090ba:	4293      	cmp	r3, r2
 80090bc:	bfb8      	it	lt
 80090be:	4613      	movlt	r3, r2
 80090c0:	6033      	str	r3, [r6, #0]
 80090c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090c6:	460c      	mov	r4, r1
 80090c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090cc:	b10a      	cbz	r2, 80090d2 <_printf_common+0x26>
 80090ce:	3301      	adds	r3, #1
 80090d0:	6033      	str	r3, [r6, #0]
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	0699      	lsls	r1, r3, #26
 80090d6:	bf42      	ittt	mi
 80090d8:	6833      	ldrmi	r3, [r6, #0]
 80090da:	3302      	addmi	r3, #2
 80090dc:	6033      	strmi	r3, [r6, #0]
 80090de:	6825      	ldr	r5, [r4, #0]
 80090e0:	f015 0506 	ands.w	r5, r5, #6
 80090e4:	d106      	bne.n	80090f4 <_printf_common+0x48>
 80090e6:	f104 0a19 	add.w	sl, r4, #25
 80090ea:	68e3      	ldr	r3, [r4, #12]
 80090ec:	6832      	ldr	r2, [r6, #0]
 80090ee:	1a9b      	subs	r3, r3, r2
 80090f0:	42ab      	cmp	r3, r5
 80090f2:	dc2b      	bgt.n	800914c <_printf_common+0xa0>
 80090f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090f8:	6822      	ldr	r2, [r4, #0]
 80090fa:	3b00      	subs	r3, #0
 80090fc:	bf18      	it	ne
 80090fe:	2301      	movne	r3, #1
 8009100:	0692      	lsls	r2, r2, #26
 8009102:	d430      	bmi.n	8009166 <_printf_common+0xba>
 8009104:	4641      	mov	r1, r8
 8009106:	4638      	mov	r0, r7
 8009108:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800910c:	47c8      	blx	r9
 800910e:	3001      	adds	r0, #1
 8009110:	d023      	beq.n	800915a <_printf_common+0xae>
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	6922      	ldr	r2, [r4, #16]
 8009116:	f003 0306 	and.w	r3, r3, #6
 800911a:	2b04      	cmp	r3, #4
 800911c:	bf14      	ite	ne
 800911e:	2500      	movne	r5, #0
 8009120:	6833      	ldreq	r3, [r6, #0]
 8009122:	f04f 0600 	mov.w	r6, #0
 8009126:	bf08      	it	eq
 8009128:	68e5      	ldreq	r5, [r4, #12]
 800912a:	f104 041a 	add.w	r4, r4, #26
 800912e:	bf08      	it	eq
 8009130:	1aed      	subeq	r5, r5, r3
 8009132:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009136:	bf08      	it	eq
 8009138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800913c:	4293      	cmp	r3, r2
 800913e:	bfc4      	itt	gt
 8009140:	1a9b      	subgt	r3, r3, r2
 8009142:	18ed      	addgt	r5, r5, r3
 8009144:	42b5      	cmp	r5, r6
 8009146:	d11a      	bne.n	800917e <_printf_common+0xd2>
 8009148:	2000      	movs	r0, #0
 800914a:	e008      	b.n	800915e <_printf_common+0xb2>
 800914c:	2301      	movs	r3, #1
 800914e:	4652      	mov	r2, sl
 8009150:	4641      	mov	r1, r8
 8009152:	4638      	mov	r0, r7
 8009154:	47c8      	blx	r9
 8009156:	3001      	adds	r0, #1
 8009158:	d103      	bne.n	8009162 <_printf_common+0xb6>
 800915a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800915e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009162:	3501      	adds	r5, #1
 8009164:	e7c1      	b.n	80090ea <_printf_common+0x3e>
 8009166:	2030      	movs	r0, #48	@ 0x30
 8009168:	18e1      	adds	r1, r4, r3
 800916a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009174:	4422      	add	r2, r4
 8009176:	3302      	adds	r3, #2
 8009178:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800917c:	e7c2      	b.n	8009104 <_printf_common+0x58>
 800917e:	2301      	movs	r3, #1
 8009180:	4622      	mov	r2, r4
 8009182:	4641      	mov	r1, r8
 8009184:	4638      	mov	r0, r7
 8009186:	47c8      	blx	r9
 8009188:	3001      	adds	r0, #1
 800918a:	d0e6      	beq.n	800915a <_printf_common+0xae>
 800918c:	3601      	adds	r6, #1
 800918e:	e7d9      	b.n	8009144 <_printf_common+0x98>

08009190 <_printf_i>:
 8009190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009194:	7e0f      	ldrb	r7, [r1, #24]
 8009196:	4691      	mov	r9, r2
 8009198:	2f78      	cmp	r7, #120	@ 0x78
 800919a:	4680      	mov	r8, r0
 800919c:	460c      	mov	r4, r1
 800919e:	469a      	mov	sl, r3
 80091a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80091a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80091a6:	d807      	bhi.n	80091b8 <_printf_i+0x28>
 80091a8:	2f62      	cmp	r7, #98	@ 0x62
 80091aa:	d80a      	bhi.n	80091c2 <_printf_i+0x32>
 80091ac:	2f00      	cmp	r7, #0
 80091ae:	f000 80d3 	beq.w	8009358 <_printf_i+0x1c8>
 80091b2:	2f58      	cmp	r7, #88	@ 0x58
 80091b4:	f000 80ba 	beq.w	800932c <_printf_i+0x19c>
 80091b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80091c0:	e03a      	b.n	8009238 <_printf_i+0xa8>
 80091c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80091c6:	2b15      	cmp	r3, #21
 80091c8:	d8f6      	bhi.n	80091b8 <_printf_i+0x28>
 80091ca:	a101      	add	r1, pc, #4	@ (adr r1, 80091d0 <_printf_i+0x40>)
 80091cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091d0:	08009229 	.word	0x08009229
 80091d4:	0800923d 	.word	0x0800923d
 80091d8:	080091b9 	.word	0x080091b9
 80091dc:	080091b9 	.word	0x080091b9
 80091e0:	080091b9 	.word	0x080091b9
 80091e4:	080091b9 	.word	0x080091b9
 80091e8:	0800923d 	.word	0x0800923d
 80091ec:	080091b9 	.word	0x080091b9
 80091f0:	080091b9 	.word	0x080091b9
 80091f4:	080091b9 	.word	0x080091b9
 80091f8:	080091b9 	.word	0x080091b9
 80091fc:	0800933f 	.word	0x0800933f
 8009200:	08009267 	.word	0x08009267
 8009204:	080092f9 	.word	0x080092f9
 8009208:	080091b9 	.word	0x080091b9
 800920c:	080091b9 	.word	0x080091b9
 8009210:	08009361 	.word	0x08009361
 8009214:	080091b9 	.word	0x080091b9
 8009218:	08009267 	.word	0x08009267
 800921c:	080091b9 	.word	0x080091b9
 8009220:	080091b9 	.word	0x080091b9
 8009224:	08009301 	.word	0x08009301
 8009228:	6833      	ldr	r3, [r6, #0]
 800922a:	1d1a      	adds	r2, r3, #4
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	6032      	str	r2, [r6, #0]
 8009230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009234:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009238:	2301      	movs	r3, #1
 800923a:	e09e      	b.n	800937a <_printf_i+0x1ea>
 800923c:	6833      	ldr	r3, [r6, #0]
 800923e:	6820      	ldr	r0, [r4, #0]
 8009240:	1d19      	adds	r1, r3, #4
 8009242:	6031      	str	r1, [r6, #0]
 8009244:	0606      	lsls	r6, r0, #24
 8009246:	d501      	bpl.n	800924c <_printf_i+0xbc>
 8009248:	681d      	ldr	r5, [r3, #0]
 800924a:	e003      	b.n	8009254 <_printf_i+0xc4>
 800924c:	0645      	lsls	r5, r0, #25
 800924e:	d5fb      	bpl.n	8009248 <_printf_i+0xb8>
 8009250:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009254:	2d00      	cmp	r5, #0
 8009256:	da03      	bge.n	8009260 <_printf_i+0xd0>
 8009258:	232d      	movs	r3, #45	@ 0x2d
 800925a:	426d      	negs	r5, r5
 800925c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009260:	230a      	movs	r3, #10
 8009262:	4859      	ldr	r0, [pc, #356]	@ (80093c8 <_printf_i+0x238>)
 8009264:	e011      	b.n	800928a <_printf_i+0xfa>
 8009266:	6821      	ldr	r1, [r4, #0]
 8009268:	6833      	ldr	r3, [r6, #0]
 800926a:	0608      	lsls	r0, r1, #24
 800926c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009270:	d402      	bmi.n	8009278 <_printf_i+0xe8>
 8009272:	0649      	lsls	r1, r1, #25
 8009274:	bf48      	it	mi
 8009276:	b2ad      	uxthmi	r5, r5
 8009278:	2f6f      	cmp	r7, #111	@ 0x6f
 800927a:	6033      	str	r3, [r6, #0]
 800927c:	bf14      	ite	ne
 800927e:	230a      	movne	r3, #10
 8009280:	2308      	moveq	r3, #8
 8009282:	4851      	ldr	r0, [pc, #324]	@ (80093c8 <_printf_i+0x238>)
 8009284:	2100      	movs	r1, #0
 8009286:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800928a:	6866      	ldr	r6, [r4, #4]
 800928c:	2e00      	cmp	r6, #0
 800928e:	bfa8      	it	ge
 8009290:	6821      	ldrge	r1, [r4, #0]
 8009292:	60a6      	str	r6, [r4, #8]
 8009294:	bfa4      	itt	ge
 8009296:	f021 0104 	bicge.w	r1, r1, #4
 800929a:	6021      	strge	r1, [r4, #0]
 800929c:	b90d      	cbnz	r5, 80092a2 <_printf_i+0x112>
 800929e:	2e00      	cmp	r6, #0
 80092a0:	d04b      	beq.n	800933a <_printf_i+0x1aa>
 80092a2:	4616      	mov	r6, r2
 80092a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80092a8:	fb03 5711 	mls	r7, r3, r1, r5
 80092ac:	5dc7      	ldrb	r7, [r0, r7]
 80092ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092b2:	462f      	mov	r7, r5
 80092b4:	42bb      	cmp	r3, r7
 80092b6:	460d      	mov	r5, r1
 80092b8:	d9f4      	bls.n	80092a4 <_printf_i+0x114>
 80092ba:	2b08      	cmp	r3, #8
 80092bc:	d10b      	bne.n	80092d6 <_printf_i+0x146>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	07df      	lsls	r7, r3, #31
 80092c2:	d508      	bpl.n	80092d6 <_printf_i+0x146>
 80092c4:	6923      	ldr	r3, [r4, #16]
 80092c6:	6861      	ldr	r1, [r4, #4]
 80092c8:	4299      	cmp	r1, r3
 80092ca:	bfde      	ittt	le
 80092cc:	2330      	movle	r3, #48	@ 0x30
 80092ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80092d6:	1b92      	subs	r2, r2, r6
 80092d8:	6122      	str	r2, [r4, #16]
 80092da:	464b      	mov	r3, r9
 80092dc:	4621      	mov	r1, r4
 80092de:	4640      	mov	r0, r8
 80092e0:	f8cd a000 	str.w	sl, [sp]
 80092e4:	aa03      	add	r2, sp, #12
 80092e6:	f7ff fee1 	bl	80090ac <_printf_common>
 80092ea:	3001      	adds	r0, #1
 80092ec:	d14a      	bne.n	8009384 <_printf_i+0x1f4>
 80092ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092f2:	b004      	add	sp, #16
 80092f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f8:	6823      	ldr	r3, [r4, #0]
 80092fa:	f043 0320 	orr.w	r3, r3, #32
 80092fe:	6023      	str	r3, [r4, #0]
 8009300:	2778      	movs	r7, #120	@ 0x78
 8009302:	4832      	ldr	r0, [pc, #200]	@ (80093cc <_printf_i+0x23c>)
 8009304:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	6831      	ldr	r1, [r6, #0]
 800930c:	061f      	lsls	r7, r3, #24
 800930e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009312:	d402      	bmi.n	800931a <_printf_i+0x18a>
 8009314:	065f      	lsls	r7, r3, #25
 8009316:	bf48      	it	mi
 8009318:	b2ad      	uxthmi	r5, r5
 800931a:	6031      	str	r1, [r6, #0]
 800931c:	07d9      	lsls	r1, r3, #31
 800931e:	bf44      	itt	mi
 8009320:	f043 0320 	orrmi.w	r3, r3, #32
 8009324:	6023      	strmi	r3, [r4, #0]
 8009326:	b11d      	cbz	r5, 8009330 <_printf_i+0x1a0>
 8009328:	2310      	movs	r3, #16
 800932a:	e7ab      	b.n	8009284 <_printf_i+0xf4>
 800932c:	4826      	ldr	r0, [pc, #152]	@ (80093c8 <_printf_i+0x238>)
 800932e:	e7e9      	b.n	8009304 <_printf_i+0x174>
 8009330:	6823      	ldr	r3, [r4, #0]
 8009332:	f023 0320 	bic.w	r3, r3, #32
 8009336:	6023      	str	r3, [r4, #0]
 8009338:	e7f6      	b.n	8009328 <_printf_i+0x198>
 800933a:	4616      	mov	r6, r2
 800933c:	e7bd      	b.n	80092ba <_printf_i+0x12a>
 800933e:	6833      	ldr	r3, [r6, #0]
 8009340:	6825      	ldr	r5, [r4, #0]
 8009342:	1d18      	adds	r0, r3, #4
 8009344:	6961      	ldr	r1, [r4, #20]
 8009346:	6030      	str	r0, [r6, #0]
 8009348:	062e      	lsls	r6, r5, #24
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	d501      	bpl.n	8009352 <_printf_i+0x1c2>
 800934e:	6019      	str	r1, [r3, #0]
 8009350:	e002      	b.n	8009358 <_printf_i+0x1c8>
 8009352:	0668      	lsls	r0, r5, #25
 8009354:	d5fb      	bpl.n	800934e <_printf_i+0x1be>
 8009356:	8019      	strh	r1, [r3, #0]
 8009358:	2300      	movs	r3, #0
 800935a:	4616      	mov	r6, r2
 800935c:	6123      	str	r3, [r4, #16]
 800935e:	e7bc      	b.n	80092da <_printf_i+0x14a>
 8009360:	6833      	ldr	r3, [r6, #0]
 8009362:	2100      	movs	r1, #0
 8009364:	1d1a      	adds	r2, r3, #4
 8009366:	6032      	str	r2, [r6, #0]
 8009368:	681e      	ldr	r6, [r3, #0]
 800936a:	6862      	ldr	r2, [r4, #4]
 800936c:	4630      	mov	r0, r6
 800936e:	f000 f893 	bl	8009498 <memchr>
 8009372:	b108      	cbz	r0, 8009378 <_printf_i+0x1e8>
 8009374:	1b80      	subs	r0, r0, r6
 8009376:	6060      	str	r0, [r4, #4]
 8009378:	6863      	ldr	r3, [r4, #4]
 800937a:	6123      	str	r3, [r4, #16]
 800937c:	2300      	movs	r3, #0
 800937e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009382:	e7aa      	b.n	80092da <_printf_i+0x14a>
 8009384:	4632      	mov	r2, r6
 8009386:	4649      	mov	r1, r9
 8009388:	4640      	mov	r0, r8
 800938a:	6923      	ldr	r3, [r4, #16]
 800938c:	47d0      	blx	sl
 800938e:	3001      	adds	r0, #1
 8009390:	d0ad      	beq.n	80092ee <_printf_i+0x15e>
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	079b      	lsls	r3, r3, #30
 8009396:	d413      	bmi.n	80093c0 <_printf_i+0x230>
 8009398:	68e0      	ldr	r0, [r4, #12]
 800939a:	9b03      	ldr	r3, [sp, #12]
 800939c:	4298      	cmp	r0, r3
 800939e:	bfb8      	it	lt
 80093a0:	4618      	movlt	r0, r3
 80093a2:	e7a6      	b.n	80092f2 <_printf_i+0x162>
 80093a4:	2301      	movs	r3, #1
 80093a6:	4632      	mov	r2, r6
 80093a8:	4649      	mov	r1, r9
 80093aa:	4640      	mov	r0, r8
 80093ac:	47d0      	blx	sl
 80093ae:	3001      	adds	r0, #1
 80093b0:	d09d      	beq.n	80092ee <_printf_i+0x15e>
 80093b2:	3501      	adds	r5, #1
 80093b4:	68e3      	ldr	r3, [r4, #12]
 80093b6:	9903      	ldr	r1, [sp, #12]
 80093b8:	1a5b      	subs	r3, r3, r1
 80093ba:	42ab      	cmp	r3, r5
 80093bc:	dcf2      	bgt.n	80093a4 <_printf_i+0x214>
 80093be:	e7eb      	b.n	8009398 <_printf_i+0x208>
 80093c0:	2500      	movs	r5, #0
 80093c2:	f104 0619 	add.w	r6, r4, #25
 80093c6:	e7f5      	b.n	80093b4 <_printf_i+0x224>
 80093c8:	080097f3 	.word	0x080097f3
 80093cc:	08009804 	.word	0x08009804

080093d0 <__malloc_lock>:
 80093d0:	4801      	ldr	r0, [pc, #4]	@ (80093d8 <__malloc_lock+0x8>)
 80093d2:	f7ff bc19 	b.w	8008c08 <__retarget_lock_acquire_recursive>
 80093d6:	bf00      	nop
 80093d8:	20001d80 	.word	0x20001d80

080093dc <__malloc_unlock>:
 80093dc:	4801      	ldr	r0, [pc, #4]	@ (80093e4 <__malloc_unlock+0x8>)
 80093de:	f7ff bc14 	b.w	8008c0a <__retarget_lock_release_recursive>
 80093e2:	bf00      	nop
 80093e4:	20001d80 	.word	0x20001d80

080093e8 <_realloc_r>:
 80093e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ec:	4680      	mov	r8, r0
 80093ee:	4615      	mov	r5, r2
 80093f0:	460c      	mov	r4, r1
 80093f2:	b921      	cbnz	r1, 80093fe <_realloc_r+0x16>
 80093f4:	4611      	mov	r1, r2
 80093f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093fa:	f7ff bdd7 	b.w	8008fac <_malloc_r>
 80093fe:	b92a      	cbnz	r2, 800940c <_realloc_r+0x24>
 8009400:	f7ff fc12 	bl	8008c28 <_free_r>
 8009404:	2400      	movs	r4, #0
 8009406:	4620      	mov	r0, r4
 8009408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800940c:	f000 f852 	bl	80094b4 <_malloc_usable_size_r>
 8009410:	4285      	cmp	r5, r0
 8009412:	4606      	mov	r6, r0
 8009414:	d802      	bhi.n	800941c <_realloc_r+0x34>
 8009416:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800941a:	d8f4      	bhi.n	8009406 <_realloc_r+0x1e>
 800941c:	4629      	mov	r1, r5
 800941e:	4640      	mov	r0, r8
 8009420:	f7ff fdc4 	bl	8008fac <_malloc_r>
 8009424:	4607      	mov	r7, r0
 8009426:	2800      	cmp	r0, #0
 8009428:	d0ec      	beq.n	8009404 <_realloc_r+0x1c>
 800942a:	42b5      	cmp	r5, r6
 800942c:	462a      	mov	r2, r5
 800942e:	4621      	mov	r1, r4
 8009430:	bf28      	it	cs
 8009432:	4632      	movcs	r2, r6
 8009434:	f7ff fbea 	bl	8008c0c <memcpy>
 8009438:	4621      	mov	r1, r4
 800943a:	4640      	mov	r0, r8
 800943c:	f7ff fbf4 	bl	8008c28 <_free_r>
 8009440:	463c      	mov	r4, r7
 8009442:	e7e0      	b.n	8009406 <_realloc_r+0x1e>

08009444 <memmove>:
 8009444:	4288      	cmp	r0, r1
 8009446:	b510      	push	{r4, lr}
 8009448:	eb01 0402 	add.w	r4, r1, r2
 800944c:	d902      	bls.n	8009454 <memmove+0x10>
 800944e:	4284      	cmp	r4, r0
 8009450:	4623      	mov	r3, r4
 8009452:	d807      	bhi.n	8009464 <memmove+0x20>
 8009454:	1e43      	subs	r3, r0, #1
 8009456:	42a1      	cmp	r1, r4
 8009458:	d008      	beq.n	800946c <memmove+0x28>
 800945a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800945e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009462:	e7f8      	b.n	8009456 <memmove+0x12>
 8009464:	4601      	mov	r1, r0
 8009466:	4402      	add	r2, r0
 8009468:	428a      	cmp	r2, r1
 800946a:	d100      	bne.n	800946e <memmove+0x2a>
 800946c:	bd10      	pop	{r4, pc}
 800946e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009476:	e7f7      	b.n	8009468 <memmove+0x24>

08009478 <_sbrk_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	2300      	movs	r3, #0
 800947c:	4d05      	ldr	r5, [pc, #20]	@ (8009494 <_sbrk_r+0x1c>)
 800947e:	4604      	mov	r4, r0
 8009480:	4608      	mov	r0, r1
 8009482:	602b      	str	r3, [r5, #0]
 8009484:	f7f9 fbfa 	bl	8002c7c <_sbrk>
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	d102      	bne.n	8009492 <_sbrk_r+0x1a>
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	b103      	cbz	r3, 8009492 <_sbrk_r+0x1a>
 8009490:	6023      	str	r3, [r4, #0]
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	20001d7c 	.word	0x20001d7c

08009498 <memchr>:
 8009498:	4603      	mov	r3, r0
 800949a:	b510      	push	{r4, lr}
 800949c:	b2c9      	uxtb	r1, r1
 800949e:	4402      	add	r2, r0
 80094a0:	4293      	cmp	r3, r2
 80094a2:	4618      	mov	r0, r3
 80094a4:	d101      	bne.n	80094aa <memchr+0x12>
 80094a6:	2000      	movs	r0, #0
 80094a8:	e003      	b.n	80094b2 <memchr+0x1a>
 80094aa:	7804      	ldrb	r4, [r0, #0]
 80094ac:	3301      	adds	r3, #1
 80094ae:	428c      	cmp	r4, r1
 80094b0:	d1f6      	bne.n	80094a0 <memchr+0x8>
 80094b2:	bd10      	pop	{r4, pc}

080094b4 <_malloc_usable_size_r>:
 80094b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094b8:	1f18      	subs	r0, r3, #4
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	bfbc      	itt	lt
 80094be:	580b      	ldrlt	r3, [r1, r0]
 80094c0:	18c0      	addlt	r0, r0, r3
 80094c2:	4770      	bx	lr

080094c4 <_init>:
 80094c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c6:	bf00      	nop
 80094c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ca:	bc08      	pop	{r3}
 80094cc:	469e      	mov	lr, r3
 80094ce:	4770      	bx	lr

080094d0 <_fini>:
 80094d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d2:	bf00      	nop
 80094d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d6:	bc08      	pop	{r3}
 80094d8:	469e      	mov	lr, r3
 80094da:	4770      	bx	lr
